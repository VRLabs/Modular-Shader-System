{
  "0.0.0/api/index.html": {
    "href": "0.0.0/api/index.html",
    "title": "Welcome to the API Section | Modular Shader System Documentation",
    "keywords": "Welcome to the API Section Here you will find the documentation of each publicly available classes within the API."
  },
  "0.0.0/api/VRLabs.ModularShaderSystem.EnableProperty.-ctor.html": {
    "href": "0.0.0/api/VRLabs.ModularShaderSystem.EnableProperty.-ctor.html",
    "title": "Constructor EnableProperty | Modular Shader System Documentation",
    "keywords": "Constructor EnableProperty EnableProperty(String, String, Int32) Declaration public EnableProperty(string name, string displayName, int enableValue) Parameters Type Name Description String name String displayName Int32 enableValue EnableProperty(String, Int32) Declaration public EnableProperty(string name, int enableValue) Parameters Type Name Description String name Int32 enableValue"
  },
  "0.0.0/api/VRLabs.ModularShaderSystem.EnableProperty.EnableValue.html": {
    "href": "0.0.0/api/VRLabs.ModularShaderSystem.EnableProperty.EnableValue.html",
    "title": "Field EnableValue | Modular Shader System Documentation",
    "keywords": "Field EnableValue Namespace : VRLabs.ModularShaderSystem Syntax public int EnableValue Returns Int32"
  },
  "0.0.0/api/VRLabs.ModularShaderSystem.EnableProperty.Equals.html": {
    "href": "0.0.0/api/VRLabs.ModularShaderSystem.EnableProperty.Equals.html",
    "title": "Method Equals | Modular Shader System Documentation",
    "keywords": "Method Equals Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean Overrides Property.Equals(Object) Equals(EnableProperty) Declaration public bool Equals(EnableProperty other) Parameters Type Name Description EnableProperty other Returns Type Description Boolean Implements IEquatable<T>.Equals(T)"
  },
  "0.0.0/api/VRLabs.ModularShaderSystem.EnableProperty.GetHashCode.html": {
    "href": "0.0.0/api/VRLabs.ModularShaderSystem.EnableProperty.GetHashCode.html",
    "title": "Method GetHashCode | Modular Shader System Documentation",
    "keywords": "Method GetHashCode GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 Overrides Property.GetHashCode()"
  },
  "0.0.0/api/VRLabs.ModularShaderSystem.EnableProperty.html": {
    "href": "0.0.0/api/VRLabs.ModularShaderSystem.EnableProperty.html",
    "title": "Class EnableProperty | Modular Shader System Documentation",
    "keywords": "Class EnableProperty Inheritance Object Property EnableProperty Implements IEquatable < Property > IEquatable < EnableProperty > Namespace : VRLabs.ModularShaderSystem Syntax [Serializable] public class EnableProperty : Property, IEquatable<Property>, IEquatable<EnableProperty> Constructors Name Description EnableProperty(String, Int32) EnableProperty(String, String, Int32) Fields Name Description EnableValue Methods Name Description Equals(Object) Equals(EnableProperty) GetHashCode() Operators Name Description Equality(EnableProperty, EnableProperty) Inequality(EnableProperty, EnableProperty)"
  },
  "0.0.0/api/VRLabs.ModularShaderSystem.EnableProperty.op_Equality.html": {
    "href": "0.0.0/api/VRLabs.ModularShaderSystem.EnableProperty.op_Equality.html",
    "title": "Operator Equality | Modular Shader System Documentation",
    "keywords": "Operator Equality Equality(EnableProperty, EnableProperty) Declaration public static bool operator ==(EnableProperty left, EnableProperty right) Parameters Type Name Description EnableProperty left EnableProperty right Returns Type Description Boolean"
  },
  "0.0.0/api/VRLabs.ModularShaderSystem.EnableProperty.op_Inequality.html": {
    "href": "0.0.0/api/VRLabs.ModularShaderSystem.EnableProperty.op_Inequality.html",
    "title": "Operator Inequality | Modular Shader System Documentation",
    "keywords": "Operator Inequality Inequality(EnableProperty, EnableProperty) Declaration public static bool operator !=(EnableProperty left, EnableProperty right) Parameters Type Name Description EnableProperty left EnableProperty right Returns Type Description Boolean"
  },
  "0.0.0/api/VRLabs.ModularShaderSystem.EnablePropertyValue.html": {
    "href": "0.0.0/api/VRLabs.ModularShaderSystem.EnablePropertyValue.html",
    "title": "Struct EnablePropertyValue | Modular Shader System Documentation",
    "keywords": "Struct EnablePropertyValue Namespace : VRLabs.ModularShaderSystem Syntax public struct EnablePropertyValue Fields Name Description Name Value"
  },
  "0.0.0/api/VRLabs.ModularShaderSystem.EnablePropertyValue.Name.html": {
    "href": "0.0.0/api/VRLabs.ModularShaderSystem.EnablePropertyValue.Name.html",
    "title": "Field Name | Modular Shader System Documentation",
    "keywords": "Field Name Namespace : VRLabs.ModularShaderSystem Syntax public string Name Returns String"
  },
  "0.0.0/api/VRLabs.ModularShaderSystem.EnablePropertyValue.Value.html": {
    "href": "0.0.0/api/VRLabs.ModularShaderSystem.EnablePropertyValue.Value.html",
    "title": "Field Value | Modular Shader System Documentation",
    "keywords": "Field Value Namespace : VRLabs.ModularShaderSystem Syntax public int Value Returns Int32"
  },
  "0.0.0/api/VRLabs.ModularShaderSystem.html": {
    "href": "0.0.0/api/VRLabs.ModularShaderSystem.html",
    "title": "Namespace VRLabs.ModularShaderSystem | Modular Shader System Documentation",
    "keywords": "Namespace VRLabs.ModularShaderSystem Classes EnableProperty ModularShader ModuleTemplate Property ShaderFunction ShaderGenerator ShaderModule ShaderModuleGenerationTest ShaderStringBuilderExtensions TemplateAsset TemplateAssetImporter Variable Structs EnablePropertyValue"
  },
  "0.0.0/api/VRLabs.ModularShaderSystem.ModularShader.AdditionalModules.html": {
    "href": "0.0.0/api/VRLabs.ModularShaderSystem.ModularShader.AdditionalModules.html",
    "title": "Field AdditionalModules | Modular Shader System Documentation",
    "keywords": "Field AdditionalModules Namespace : VRLabs.ModularShaderSystem Syntax [HideInInspector] public List<ShaderModule> AdditionalModules Returns List < ShaderModule >"
  },
  "0.0.0/api/VRLabs.ModularShaderSystem.ModularShader.Author.html": {
    "href": "0.0.0/api/VRLabs.ModularShaderSystem.ModularShader.Author.html",
    "title": "Field Author | Modular Shader System Documentation",
    "keywords": "Field Author Namespace : VRLabs.ModularShaderSystem Syntax public string Author Returns String"
  },
  "0.0.0/api/VRLabs.ModularShaderSystem.ModularShader.BaseModules.html": {
    "href": "0.0.0/api/VRLabs.ModularShaderSystem.ModularShader.BaseModules.html",
    "title": "Field BaseModules | Modular Shader System Documentation",
    "keywords": "Field BaseModules Namespace : VRLabs.ModularShaderSystem Syntax public List<ShaderModule> BaseModules Returns List < ShaderModule >"
  },
  "0.0.0/api/VRLabs.ModularShaderSystem.ModularShader.CustomEditor.html": {
    "href": "0.0.0/api/VRLabs.ModularShaderSystem.ModularShader.CustomEditor.html",
    "title": "Field CustomEditor | Modular Shader System Documentation",
    "keywords": "Field CustomEditor Namespace : VRLabs.ModularShaderSystem Syntax public string CustomEditor Returns String"
  },
  "0.0.0/api/VRLabs.ModularShaderSystem.ModularShader.html": {
    "href": "0.0.0/api/VRLabs.ModularShaderSystem.ModularShader.html",
    "title": "Class ModularShader | Modular Shader System Documentation",
    "keywords": "Class ModularShader Inheritance Object Object ScriptableObject ModularShader Namespace : VRLabs.ModularShaderSystem Syntax [CreateAssetMenu(fileName = \"ShaderModule\", menuName = \"Modular Shader/Modular Shader\", order = 0)] public class ModularShader : ScriptableObject Fields Name Description AdditionalModules Author BaseModules CustomEditor Id Name Properties ShaderPath ShaderTemplate TemplateKeywords Version"
  },
  "0.0.0/api/VRLabs.ModularShaderSystem.ModularShader.Id.html": {
    "href": "0.0.0/api/VRLabs.ModularShaderSystem.ModularShader.Id.html",
    "title": "Field Id | Modular Shader System Documentation",
    "keywords": "Field Id Namespace : VRLabs.ModularShaderSystem Syntax public string Id Returns String"
  },
  "0.0.0/api/VRLabs.ModularShaderSystem.ModularShader.Name.html": {
    "href": "0.0.0/api/VRLabs.ModularShaderSystem.ModularShader.Name.html",
    "title": "Field Name | Modular Shader System Documentation",
    "keywords": "Field Name Namespace : VRLabs.ModularShaderSystem Syntax public string Name Returns String"
  },
  "0.0.0/api/VRLabs.ModularShaderSystem.ModularShader.Properties.html": {
    "href": "0.0.0/api/VRLabs.ModularShaderSystem.ModularShader.Properties.html",
    "title": "Field Properties | Modular Shader System Documentation",
    "keywords": "Field Properties Namespace : VRLabs.ModularShaderSystem Syntax public List<Property> Properties Returns List < Property >"
  },
  "0.0.0/api/VRLabs.ModularShaderSystem.ModularShader.ShaderPath.html": {
    "href": "0.0.0/api/VRLabs.ModularShaderSystem.ModularShader.ShaderPath.html",
    "title": "Field ShaderPath | Modular Shader System Documentation",
    "keywords": "Field ShaderPath Namespace : VRLabs.ModularShaderSystem Syntax public string ShaderPath Returns String"
  },
  "0.0.0/api/VRLabs.ModularShaderSystem.ModularShader.ShaderTemplate.html": {
    "href": "0.0.0/api/VRLabs.ModularShaderSystem.ModularShader.ShaderTemplate.html",
    "title": "Field ShaderTemplate | Modular Shader System Documentation",
    "keywords": "Field ShaderTemplate Namespace : VRLabs.ModularShaderSystem Syntax public TemplateAsset ShaderTemplate Returns TemplateAsset"
  },
  "0.0.0/api/VRLabs.ModularShaderSystem.ModularShader.TemplateKeywords.html": {
    "href": "0.0.0/api/VRLabs.ModularShaderSystem.ModularShader.TemplateKeywords.html",
    "title": "Field TemplateKeywords | Modular Shader System Documentation",
    "keywords": "Field TemplateKeywords Namespace : VRLabs.ModularShaderSystem Syntax public List<string> TemplateKeywords Returns List < String >"
  },
  "0.0.0/api/VRLabs.ModularShaderSystem.ModularShader.Version.html": {
    "href": "0.0.0/api/VRLabs.ModularShaderSystem.ModularShader.Version.html",
    "title": "Field Version | Modular Shader System Documentation",
    "keywords": "Field Version Namespace : VRLabs.ModularShaderSystem Syntax public string Version Returns String"
  },
  "0.0.0/api/VRLabs.ModularShaderSystem.ModuleTemplate.html": {
    "href": "0.0.0/api/VRLabs.ModularShaderSystem.ModuleTemplate.html",
    "title": "Class ModuleTemplate | Modular Shader System Documentation",
    "keywords": "Class ModuleTemplate Inheritance Object ModuleTemplate Namespace : VRLabs.ModularShaderSystem Syntax [Serializable] public class ModuleTemplate Fields Name Description IsCGOnly Keyword Template TemplateKeywords"
  },
  "0.0.0/api/VRLabs.ModularShaderSystem.ModuleTemplate.IsCGOnly.html": {
    "href": "0.0.0/api/VRLabs.ModularShaderSystem.ModuleTemplate.IsCGOnly.html",
    "title": "Field IsCGOnly | Modular Shader System Documentation",
    "keywords": "Field IsCGOnly Namespace : VRLabs.ModularShaderSystem Syntax public bool IsCGOnly Returns Boolean"
  },
  "0.0.0/api/VRLabs.ModularShaderSystem.ModuleTemplate.Keyword.html": {
    "href": "0.0.0/api/VRLabs.ModularShaderSystem.ModuleTemplate.Keyword.html",
    "title": "Field Keyword | Modular Shader System Documentation",
    "keywords": "Field Keyword Namespace : VRLabs.ModularShaderSystem Syntax public string Keyword Returns String"
  },
  "0.0.0/api/VRLabs.ModularShaderSystem.ModuleTemplate.Template.html": {
    "href": "0.0.0/api/VRLabs.ModularShaderSystem.ModuleTemplate.Template.html",
    "title": "Field Template | Modular Shader System Documentation",
    "keywords": "Field Template Namespace : VRLabs.ModularShaderSystem Syntax public TemplateAsset Template Returns TemplateAsset"
  },
  "0.0.0/api/VRLabs.ModularShaderSystem.ModuleTemplate.TemplateKeywords.html": {
    "href": "0.0.0/api/VRLabs.ModularShaderSystem.ModuleTemplate.TemplateKeywords.html",
    "title": "Field TemplateKeywords | Modular Shader System Documentation",
    "keywords": "Field TemplateKeywords Namespace : VRLabs.ModularShaderSystem Syntax public List<string> TemplateKeywords Returns List < String >"
  },
  "0.0.0/api/VRLabs.ModularShaderSystem.Property.Attributes.html": {
    "href": "0.0.0/api/VRLabs.ModularShaderSystem.Property.Attributes.html",
    "title": "Field Attributes | Modular Shader System Documentation",
    "keywords": "Field Attributes Namespace : VRLabs.ModularShaderSystem Syntax public string Attributes Returns String"
  },
  "0.0.0/api/VRLabs.ModularShaderSystem.Property.DefaultValue.html": {
    "href": "0.0.0/api/VRLabs.ModularShaderSystem.Property.DefaultValue.html",
    "title": "Field DefaultValue | Modular Shader System Documentation",
    "keywords": "Field DefaultValue Namespace : VRLabs.ModularShaderSystem Syntax public string DefaultValue Returns String"
  },
  "0.0.0/api/VRLabs.ModularShaderSystem.Property.DisplayName.html": {
    "href": "0.0.0/api/VRLabs.ModularShaderSystem.Property.DisplayName.html",
    "title": "Field DisplayName | Modular Shader System Documentation",
    "keywords": "Field DisplayName Namespace : VRLabs.ModularShaderSystem Syntax public string DisplayName Returns String"
  },
  "0.0.0/api/VRLabs.ModularShaderSystem.Property.Equals.html": {
    "href": "0.0.0/api/VRLabs.ModularShaderSystem.Property.Equals.html",
    "title": "Method Equals | Modular Shader System Documentation",
    "keywords": "Method Equals Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean Overrides Object.Equals(Object) Equals(Property) Declaration public bool Equals(Property other) Parameters Type Name Description Property other Returns Type Description Boolean Implements IEquatable<T>.Equals(T)"
  },
  "0.0.0/api/VRLabs.ModularShaderSystem.Property.GetHashCode.html": {
    "href": "0.0.0/api/VRLabs.ModularShaderSystem.Property.GetHashCode.html",
    "title": "Method GetHashCode | Modular Shader System Documentation",
    "keywords": "Method GetHashCode GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 Overrides Object.GetHashCode()"
  },
  "0.0.0/api/VRLabs.ModularShaderSystem.Property.html": {
    "href": "0.0.0/api/VRLabs.ModularShaderSystem.Property.html",
    "title": "Class Property | Modular Shader System Documentation",
    "keywords": "Class Property Inheritance Object Property EnableProperty EnableProperty EnableProperty Implements IEquatable < Property > Namespace : VRLabs.ModularShaderSystem Syntax [Serializable] public class Property : IEquatable<Property> Fields Name Description Attributes DefaultValue DisplayName Name Type Methods Name Description Equals(Object) Equals(Property) GetHashCode() ToVariable() Operators Name Description Equality(Property, Property) Inequality(Property, Property)"
  },
  "0.0.0/api/VRLabs.ModularShaderSystem.Property.Name.html": {
    "href": "0.0.0/api/VRLabs.ModularShaderSystem.Property.Name.html",
    "title": "Field Name | Modular Shader System Documentation",
    "keywords": "Field Name Namespace : VRLabs.ModularShaderSystem Syntax public string Name Returns String"
  },
  "0.0.0/api/VRLabs.ModularShaderSystem.Property.op_Equality.html": {
    "href": "0.0.0/api/VRLabs.ModularShaderSystem.Property.op_Equality.html",
    "title": "Operator Equality | Modular Shader System Documentation",
    "keywords": "Operator Equality Equality(Property, Property) Declaration public static bool operator ==(Property left, Property right) Parameters Type Name Description Property left Property right Returns Type Description Boolean"
  },
  "0.0.0/api/VRLabs.ModularShaderSystem.Property.op_Inequality.html": {
    "href": "0.0.0/api/VRLabs.ModularShaderSystem.Property.op_Inequality.html",
    "title": "Operator Inequality | Modular Shader System Documentation",
    "keywords": "Operator Inequality Inequality(Property, Property) Declaration public static bool operator !=(Property left, Property right) Parameters Type Name Description Property left Property right Returns Type Description Boolean"
  },
  "0.0.0/api/VRLabs.ModularShaderSystem.Property.ToVariable.html": {
    "href": "0.0.0/api/VRLabs.ModularShaderSystem.Property.ToVariable.html",
    "title": "Method ToVariable | Modular Shader System Documentation",
    "keywords": "Method ToVariable ToVariable() Declaration public Variable ToVariable() Returns Type Description Variable"
  },
  "0.0.0/api/VRLabs.ModularShaderSystem.Property.Type.html": {
    "href": "0.0.0/api/VRLabs.ModularShaderSystem.Property.Type.html",
    "title": "Field Type | Modular Shader System Documentation",
    "keywords": "Field Type Namespace : VRLabs.ModularShaderSystem Syntax public string Type Returns String"
  },
  "0.0.0/api/VRLabs.ModularShaderSystem.ShaderFunction.AppendAfter.html": {
    "href": "0.0.0/api/VRLabs.ModularShaderSystem.ShaderFunction.AppendAfter.html",
    "title": "Field AppendAfter | Modular Shader System Documentation",
    "keywords": "Field AppendAfter Namespace : VRLabs.ModularShaderSystem Syntax public string AppendAfter Returns String"
  },
  "0.0.0/api/VRLabs.ModularShaderSystem.ShaderFunction.CodeSinkKeyword.html": {
    "href": "0.0.0/api/VRLabs.ModularShaderSystem.ShaderFunction.CodeSinkKeyword.html",
    "title": "Field CodeSinkKeyword | Modular Shader System Documentation",
    "keywords": "Field CodeSinkKeyword Namespace : VRLabs.ModularShaderSystem Syntax public string CodeSinkKeyword Returns String"
  },
  "0.0.0/api/VRLabs.ModularShaderSystem.ShaderFunction.html": {
    "href": "0.0.0/api/VRLabs.ModularShaderSystem.ShaderFunction.html",
    "title": "Class ShaderFunction | Modular Shader System Documentation",
    "keywords": "Class ShaderFunction Inheritance Object ShaderFunction Namespace : VRLabs.ModularShaderSystem Syntax [Serializable] public class ShaderFunction Fields Name Description AppendAfter CodeSinkKeyword Name Priority ShaderFunctionCode UsedVariables VariableSinkKeyword"
  },
  "0.0.0/api/VRLabs.ModularShaderSystem.ShaderFunction.Name.html": {
    "href": "0.0.0/api/VRLabs.ModularShaderSystem.ShaderFunction.Name.html",
    "title": "Field Name | Modular Shader System Documentation",
    "keywords": "Field Name Namespace : VRLabs.ModularShaderSystem Syntax public string Name Returns String"
  },
  "0.0.0/api/VRLabs.ModularShaderSystem.ShaderFunction.Priority.html": {
    "href": "0.0.0/api/VRLabs.ModularShaderSystem.ShaderFunction.Priority.html",
    "title": "Field Priority | Modular Shader System Documentation",
    "keywords": "Field Priority Namespace : VRLabs.ModularShaderSystem Syntax public short Priority Returns Int16"
  },
  "0.0.0/api/VRLabs.ModularShaderSystem.ShaderFunction.ShaderFunctionCode.html": {
    "href": "0.0.0/api/VRLabs.ModularShaderSystem.ShaderFunction.ShaderFunctionCode.html",
    "title": "Field ShaderFunctionCode | Modular Shader System Documentation",
    "keywords": "Field ShaderFunctionCode Namespace : VRLabs.ModularShaderSystem Syntax public TemplateAsset ShaderFunctionCode Returns TemplateAsset"
  },
  "0.0.0/api/VRLabs.ModularShaderSystem.ShaderFunction.UsedVariables.html": {
    "href": "0.0.0/api/VRLabs.ModularShaderSystem.ShaderFunction.UsedVariables.html",
    "title": "Field UsedVariables | Modular Shader System Documentation",
    "keywords": "Field UsedVariables Namespace : VRLabs.ModularShaderSystem Syntax public List<Variable> UsedVariables Returns List < Variable >"
  },
  "0.0.0/api/VRLabs.ModularShaderSystem.ShaderFunction.VariableSinkKeyword.html": {
    "href": "0.0.0/api/VRLabs.ModularShaderSystem.ShaderFunction.VariableSinkKeyword.html",
    "title": "Field VariableSinkKeyword | Modular Shader System Documentation",
    "keywords": "Field VariableSinkKeyword Namespace : VRLabs.ModularShaderSystem Syntax public string VariableSinkKeyword Returns String"
  },
  "0.0.0/api/VRLabs.ModularShaderSystem.ShaderGenerator.DEFAULT_CODE_SINK.html": {
    "href": "0.0.0/api/VRLabs.ModularShaderSystem.ShaderGenerator.DEFAULT_CODE_SINK.html",
    "title": "Field DEFAULT_CODE_SINK | Modular Shader System Documentation",
    "keywords": "Field DEFAULT_CODE_SINK Namespace : VRLabs.ModularShaderSystem Syntax public const string DEFAULT_CODE_SINK = \"CODESINK\" Returns String"
  },
  "0.0.0/api/VRLabs.ModularShaderSystem.ShaderGenerator.DEFAULT_VARIABLES_SINK.html": {
    "href": "0.0.0/api/VRLabs.ModularShaderSystem.ShaderGenerator.DEFAULT_VARIABLES_SINK.html",
    "title": "Field DEFAULT_VARIABLES_SINK | Modular Shader System Documentation",
    "keywords": "Field DEFAULT_VARIABLES_SINK Namespace : VRLabs.ModularShaderSystem Syntax public const string DEFAULT_VARIABLES_SINK = \"VARIABLESINK\" Returns String"
  },
  "0.0.0/api/VRLabs.ModularShaderSystem.ShaderGenerator.GenerateMainShader.html": {
    "href": "0.0.0/api/VRLabs.ModularShaderSystem.ShaderGenerator.GenerateMainShader.html",
    "title": "Method GenerateMainShader | Modular Shader System Documentation",
    "keywords": "Method GenerateMainShader GenerateMainShader(String, ModularShader) Declaration public void GenerateMainShader(string path, ModularShader shader) Parameters Type Name Description String path ModularShader shader"
  },
  "0.0.0/api/VRLabs.ModularShaderSystem.ShaderGenerator.GenerateOptimizedShader.html": {
    "href": "0.0.0/api/VRLabs.ModularShaderSystem.ShaderGenerator.GenerateOptimizedShader.html",
    "title": "Method GenerateOptimizedShader | Modular Shader System Documentation",
    "keywords": "Method GenerateOptimizedShader GenerateOptimizedShader(ModularShader, List<EnablePropertyValue>) Declaration public void GenerateOptimizedShader(ModularShader shader, List<EnablePropertyValue> enableProperties) Parameters Type Name Description ModularShader shader List < EnablePropertyValue > enableProperties"
  },
  "0.0.0/api/VRLabs.ModularShaderSystem.ShaderGenerator.html": {
    "href": "0.0.0/api/VRLabs.ModularShaderSystem.ShaderGenerator.html",
    "title": "Class ShaderGenerator | Modular Shader System Documentation",
    "keywords": "Class ShaderGenerator Inheritance Object ShaderGenerator Namespace : VRLabs.ModularShaderSystem Syntax public class ShaderGenerator Fields Name Description DEFAULT_CODE_SINK DEFAULT_VARIABLES_SINK Methods Name Description GenerateMainShader(String, ModularShader) GenerateOptimizedShader(ModularShader, List<EnablePropertyValue>)"
  },
  "0.0.0/api/VRLabs.ModularShaderSystem.ShaderModule.Author.html": {
    "href": "0.0.0/api/VRLabs.ModularShaderSystem.ShaderModule.Author.html",
    "title": "Field Author | Modular Shader System Documentation",
    "keywords": "Field Author Namespace : VRLabs.ModularShaderSystem Syntax public string Author Returns String"
  },
  "0.0.0/api/VRLabs.ModularShaderSystem.ShaderModule.Enabled.html": {
    "href": "0.0.0/api/VRLabs.ModularShaderSystem.ShaderModule.Enabled.html",
    "title": "Field Enabled | Modular Shader System Documentation",
    "keywords": "Field Enabled Namespace : VRLabs.ModularShaderSystem Syntax public EnableProperty Enabled Returns EnableProperty"
  },
  "0.0.0/api/VRLabs.ModularShaderSystem.ShaderModule.Functions.html": {
    "href": "0.0.0/api/VRLabs.ModularShaderSystem.ShaderModule.Functions.html",
    "title": "Field Functions | Modular Shader System Documentation",
    "keywords": "Field Functions Namespace : VRLabs.ModularShaderSystem Syntax public List<ShaderFunction> Functions Returns List < ShaderFunction >"
  },
  "0.0.0/api/VRLabs.ModularShaderSystem.ShaderModule.html": {
    "href": "0.0.0/api/VRLabs.ModularShaderSystem.ShaderModule.html",
    "title": "Class ShaderModule | Modular Shader System Documentation",
    "keywords": "Class ShaderModule Inheritance Object Object ScriptableObject ShaderModule Namespace : VRLabs.ModularShaderSystem Syntax [CreateAssetMenu(fileName = \"ModularShader\", menuName = \"Modular Shader/Shader Module\", order = 0)] public class ShaderModule : ScriptableObject Fields Name Description Author Enabled Functions Id IncompatibleWith Name Properties RequiredIncludes Templates Version"
  },
  "0.0.0/api/VRLabs.ModularShaderSystem.ShaderModule.Id.html": {
    "href": "0.0.0/api/VRLabs.ModularShaderSystem.ShaderModule.Id.html",
    "title": "Field Id | Modular Shader System Documentation",
    "keywords": "Field Id Namespace : VRLabs.ModularShaderSystem Syntax public string Id Returns String"
  },
  "0.0.0/api/VRLabs.ModularShaderSystem.ShaderModule.IncompatibleWith.html": {
    "href": "0.0.0/api/VRLabs.ModularShaderSystem.ShaderModule.IncompatibleWith.html",
    "title": "Field IncompatibleWith | Modular Shader System Documentation",
    "keywords": "Field IncompatibleWith Namespace : VRLabs.ModularShaderSystem Syntax public List<string> IncompatibleWith Returns List < String >"
  },
  "0.0.0/api/VRLabs.ModularShaderSystem.ShaderModule.Name.html": {
    "href": "0.0.0/api/VRLabs.ModularShaderSystem.ShaderModule.Name.html",
    "title": "Field Name | Modular Shader System Documentation",
    "keywords": "Field Name Namespace : VRLabs.ModularShaderSystem Syntax public string Name Returns String"
  },
  "0.0.0/api/VRLabs.ModularShaderSystem.ShaderModule.Properties.html": {
    "href": "0.0.0/api/VRLabs.ModularShaderSystem.ShaderModule.Properties.html",
    "title": "Field Properties | Modular Shader System Documentation",
    "keywords": "Field Properties Namespace : VRLabs.ModularShaderSystem Syntax public List<Property> Properties Returns List < Property >"
  },
  "0.0.0/api/VRLabs.ModularShaderSystem.ShaderModule.RequiredIncludes.html": {
    "href": "0.0.0/api/VRLabs.ModularShaderSystem.ShaderModule.RequiredIncludes.html",
    "title": "Field RequiredIncludes | Modular Shader System Documentation",
    "keywords": "Field RequiredIncludes Namespace : VRLabs.ModularShaderSystem Syntax public List<string> RequiredIncludes Returns List < String >"
  },
  "0.0.0/api/VRLabs.ModularShaderSystem.ShaderModule.Templates.html": {
    "href": "0.0.0/api/VRLabs.ModularShaderSystem.ShaderModule.Templates.html",
    "title": "Field Templates | Modular Shader System Documentation",
    "keywords": "Field Templates Namespace : VRLabs.ModularShaderSystem Syntax public List<ModuleTemplate> Templates Returns List < ModuleTemplate >"
  },
  "0.0.0/api/VRLabs.ModularShaderSystem.ShaderModule.Version.html": {
    "href": "0.0.0/api/VRLabs.ModularShaderSystem.ShaderModule.Version.html",
    "title": "Field Version | Modular Shader System Documentation",
    "keywords": "Field Version Namespace : VRLabs.ModularShaderSystem Syntax public string Version Returns String"
  },
  "0.0.0/api/VRLabs.ModularShaderSystem.ShaderModuleGenerationTest.html": {
    "href": "0.0.0/api/VRLabs.ModularShaderSystem.ShaderModuleGenerationTest.html",
    "title": "Class ShaderModuleGenerationTest | Modular Shader System Documentation",
    "keywords": "Class ShaderModuleGenerationTest Inheritance Object Object ScriptableObject EditorWindow ShaderModuleGenerationTest Namespace : VRLabs.ModularShaderSystem Syntax public class ShaderModuleGenerationTest : EditorWindow"
  },
  "0.0.0/api/VRLabs.ModularShaderSystem.ShaderStringBuilderExtensions.AppendLineTabbed.html": {
    "href": "0.0.0/api/VRLabs.ModularShaderSystem.ShaderStringBuilderExtensions.AppendLineTabbed.html",
    "title": "Method AppendLineTabbed | Modular Shader System Documentation",
    "keywords": "Method AppendLineTabbed AppendLineTabbed(StringBuilder, Int32, String) Declaration public static StringBuilder AppendLineTabbed(this StringBuilder builder, int tabLevel, string value) Parameters Type Name Description StringBuilder builder Int32 tabLevel String value Returns Type Description StringBuilder"
  },
  "0.0.0/api/VRLabs.ModularShaderSystem.ShaderStringBuilderExtensions.AppendMultilineTabbed.html": {
    "href": "0.0.0/api/VRLabs.ModularShaderSystem.ShaderStringBuilderExtensions.AppendMultilineTabbed.html",
    "title": "Method AppendMultilineTabbed | Modular Shader System Documentation",
    "keywords": "Method AppendMultilineTabbed AppendMultilineTabbed(StringBuilder, Int32, String) Declaration public static StringBuilder AppendMultilineTabbed(this StringBuilder builder, int tablevel, string value) Parameters Type Name Description StringBuilder builder Int32 tablevel String value Returns Type Description StringBuilder"
  },
  "0.0.0/api/VRLabs.ModularShaderSystem.ShaderStringBuilderExtensions.AppendTabbed.html": {
    "href": "0.0.0/api/VRLabs.ModularShaderSystem.ShaderStringBuilderExtensions.AppendTabbed.html",
    "title": "Method AppendTabbed | Modular Shader System Documentation",
    "keywords": "Method AppendTabbed AppendTabbed(StringBuilder, Int32, String) Declaration public static StringBuilder AppendTabbed(this StringBuilder builder, int tabLevel, string value) Parameters Type Name Description StringBuilder builder Int32 tabLevel String value Returns Type Description StringBuilder"
  },
  "0.0.0/api/VRLabs.ModularShaderSystem.ShaderStringBuilderExtensions.Contains.html": {
    "href": "0.0.0/api/VRLabs.ModularShaderSystem.ShaderStringBuilderExtensions.Contains.html",
    "title": "Method Contains | Modular Shader System Documentation",
    "keywords": "Method Contains Contains(StringBuilder, String) Declaration public static bool Contains(this StringBuilder haystack, string needle) Parameters Type Name Description StringBuilder haystack String needle Returns Type Description Boolean"
  },
  "0.0.0/api/VRLabs.ModularShaderSystem.ShaderStringBuilderExtensions.html": {
    "href": "0.0.0/api/VRLabs.ModularShaderSystem.ShaderStringBuilderExtensions.html",
    "title": "Class ShaderStringBuilderExtensions | Modular Shader System Documentation",
    "keywords": "Class ShaderStringBuilderExtensions Inheritance Object ShaderStringBuilderExtensions Namespace : VRLabs.ModularShaderSystem Syntax public static class ShaderStringBuilderExtensions Methods Name Description AppendLineTabbed(StringBuilder, Int32, String) AppendMultilineTabbed(StringBuilder, Int32, String) AppendTabbed(StringBuilder, Int32, String) Contains(StringBuilder, String) IndexOf(StringBuilder, String) Prepend(StringBuilder, String) PrependLine(StringBuilder, String) PrependLineTabbed(StringBuilder, Int32, String) PrependTabbed(StringBuilder, Int32, String)"
  },
  "0.0.0/api/VRLabs.ModularShaderSystem.ShaderStringBuilderExtensions.IndexOf.html": {
    "href": "0.0.0/api/VRLabs.ModularShaderSystem.ShaderStringBuilderExtensions.IndexOf.html",
    "title": "Method IndexOf | Modular Shader System Documentation",
    "keywords": "Method IndexOf IndexOf(StringBuilder, String) Declaration public static int IndexOf(this StringBuilder haystack, string needle) Parameters Type Name Description StringBuilder haystack String needle Returns Type Description Int32"
  },
  "0.0.0/api/VRLabs.ModularShaderSystem.ShaderStringBuilderExtensions.Prepend.html": {
    "href": "0.0.0/api/VRLabs.ModularShaderSystem.ShaderStringBuilderExtensions.Prepend.html",
    "title": "Method Prepend | Modular Shader System Documentation",
    "keywords": "Method Prepend Prepend(StringBuilder, String) Declaration public static StringBuilder Prepend(this StringBuilder builder, string value) Parameters Type Name Description StringBuilder builder String value Returns Type Description StringBuilder"
  },
  "0.0.0/api/VRLabs.ModularShaderSystem.ShaderStringBuilderExtensions.PrependLine.html": {
    "href": "0.0.0/api/VRLabs.ModularShaderSystem.ShaderStringBuilderExtensions.PrependLine.html",
    "title": "Method PrependLine | Modular Shader System Documentation",
    "keywords": "Method PrependLine PrependLine(StringBuilder, String) Declaration public static StringBuilder PrependLine(this StringBuilder builder, string value) Parameters Type Name Description StringBuilder builder String value Returns Type Description StringBuilder"
  },
  "0.0.0/api/VRLabs.ModularShaderSystem.ShaderStringBuilderExtensions.PrependLineTabbed.html": {
    "href": "0.0.0/api/VRLabs.ModularShaderSystem.ShaderStringBuilderExtensions.PrependLineTabbed.html",
    "title": "Method PrependLineTabbed | Modular Shader System Documentation",
    "keywords": "Method PrependLineTabbed PrependLineTabbed(StringBuilder, Int32, String) Declaration public static StringBuilder PrependLineTabbed(this StringBuilder builder, int tabLevel, string value) Parameters Type Name Description StringBuilder builder Int32 tabLevel String value Returns Type Description StringBuilder"
  },
  "0.0.0/api/VRLabs.ModularShaderSystem.ShaderStringBuilderExtensions.PrependTabbed.html": {
    "href": "0.0.0/api/VRLabs.ModularShaderSystem.ShaderStringBuilderExtensions.PrependTabbed.html",
    "title": "Method PrependTabbed | Modular Shader System Documentation",
    "keywords": "Method PrependTabbed PrependTabbed(StringBuilder, Int32, String) Declaration public static StringBuilder PrependTabbed(this StringBuilder builder, int tabLevel, string value) Parameters Type Name Description StringBuilder builder Int32 tabLevel String value Returns Type Description StringBuilder"
  },
  "0.0.0/api/VRLabs.ModularShaderSystem.TemplateAsset.-ctor.html": {
    "href": "0.0.0/api/VRLabs.ModularShaderSystem.TemplateAsset.-ctor.html",
    "title": "Constructor TemplateAsset | Modular Shader System Documentation",
    "keywords": "Constructor TemplateAsset TemplateAsset(String) Declaration public TemplateAsset(string template) Parameters Type Name Description String template TemplateAsset() Declaration public TemplateAsset()"
  },
  "0.0.0/api/VRLabs.ModularShaderSystem.TemplateAsset.html": {
    "href": "0.0.0/api/VRLabs.ModularShaderSystem.TemplateAsset.html",
    "title": "Class TemplateAsset | Modular Shader System Documentation",
    "keywords": "Class TemplateAsset Inheritance Object Object ScriptableObject TemplateAsset Namespace : VRLabs.ModularShaderSystem Syntax public class TemplateAsset : ScriptableObject Constructors Name Description TemplateAsset() TemplateAsset(String) Fields Name Description Template"
  },
  "0.0.0/api/VRLabs.ModularShaderSystem.TemplateAsset.Template.html": {
    "href": "0.0.0/api/VRLabs.ModularShaderSystem.TemplateAsset.Template.html",
    "title": "Field Template | Modular Shader System Documentation",
    "keywords": "Field Template Namespace : VRLabs.ModularShaderSystem Syntax public string Template Returns String"
  },
  "0.0.0/api/VRLabs.ModularShaderSystem.TemplateAssetImporter.html": {
    "href": "0.0.0/api/VRLabs.ModularShaderSystem.TemplateAssetImporter.html",
    "title": "Class TemplateAssetImporter | Modular Shader System Documentation",
    "keywords": "Class TemplateAssetImporter Inheritance Object Object AssetImporter ScriptedImporter TemplateAssetImporter Namespace : VRLabs.ModularShaderSystem Syntax [ScriptedImporter(1, \"stemplate\")] public class TemplateAssetImporter : ScriptedImporter Methods Name Description OnImportAsset(AssetImportContext) SupportsRemappedAssetType(Type)"
  },
  "0.0.0/api/VRLabs.ModularShaderSystem.TemplateAssetImporter.OnImportAsset.html": {
    "href": "0.0.0/api/VRLabs.ModularShaderSystem.TemplateAssetImporter.OnImportAsset.html",
    "title": "Method OnImportAsset | Modular Shader System Documentation",
    "keywords": "Method OnImportAsset OnImportAsset(AssetImportContext) Declaration public override void OnImportAsset(AssetImportContext ctx) Parameters Type Name Description AssetImportContext ctx Overrides ScriptedImporter.OnImportAsset(AssetImportContext)"
  },
  "0.0.0/api/VRLabs.ModularShaderSystem.TemplateAssetImporter.SupportsRemappedAssetType.html": {
    "href": "0.0.0/api/VRLabs.ModularShaderSystem.TemplateAssetImporter.SupportsRemappedAssetType.html",
    "title": "Method SupportsRemappedAssetType | Modular Shader System Documentation",
    "keywords": "Method SupportsRemappedAssetType SupportsRemappedAssetType(Type) Declaration public override bool SupportsRemappedAssetType(Type type) Parameters Type Name Description Type type Returns Type Description Boolean Overrides ScriptedImporter.SupportsRemappedAssetType(Type)"
  },
  "0.0.0/api/VRLabs.ModularShaderSystem.Variable.Equals.html": {
    "href": "0.0.0/api/VRLabs.ModularShaderSystem.Variable.Equals.html",
    "title": "Method Equals | Modular Shader System Documentation",
    "keywords": "Method Equals Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean Overrides Object.Equals(Object) Equals(Variable) Declaration public bool Equals(Variable other) Parameters Type Name Description Variable other Returns Type Description Boolean Implements IEquatable<T>.Equals(T)"
  },
  "0.0.0/api/VRLabs.ModularShaderSystem.Variable.GetHashCode.html": {
    "href": "0.0.0/api/VRLabs.ModularShaderSystem.Variable.GetHashCode.html",
    "title": "Method GetHashCode | Modular Shader System Documentation",
    "keywords": "Method GetHashCode GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 Overrides Object.GetHashCode()"
  },
  "0.0.0/api/VRLabs.ModularShaderSystem.Variable.html": {
    "href": "0.0.0/api/VRLabs.ModularShaderSystem.Variable.html",
    "title": "Class Variable | Modular Shader System Documentation",
    "keywords": "Class Variable Inheritance Object Variable Implements IEquatable < Variable > Namespace : VRLabs.ModularShaderSystem Syntax [Serializable] public class Variable : IEquatable<Variable> Fields Name Description Name Type Methods Name Description Equals(Object) Equals(Variable) GetHashCode() Operators Name Description Equality(Variable, Variable) Inequality(Variable, Variable)"
  },
  "0.0.0/api/VRLabs.ModularShaderSystem.Variable.Name.html": {
    "href": "0.0.0/api/VRLabs.ModularShaderSystem.Variable.Name.html",
    "title": "Field Name | Modular Shader System Documentation",
    "keywords": "Field Name Namespace : VRLabs.ModularShaderSystem Syntax public string Name Returns String"
  },
  "0.0.0/api/VRLabs.ModularShaderSystem.Variable.op_Equality.html": {
    "href": "0.0.0/api/VRLabs.ModularShaderSystem.Variable.op_Equality.html",
    "title": "Operator Equality | Modular Shader System Documentation",
    "keywords": "Operator Equality Equality(Variable, Variable) Declaration public static bool operator ==(Variable left, Variable right) Parameters Type Name Description Variable left Variable right Returns Type Description Boolean"
  },
  "0.0.0/api/VRLabs.ModularShaderSystem.Variable.op_Inequality.html": {
    "href": "0.0.0/api/VRLabs.ModularShaderSystem.Variable.op_Inequality.html",
    "title": "Operator Inequality | Modular Shader System Documentation",
    "keywords": "Operator Inequality Inequality(Variable, Variable) Declaration public static bool operator !=(Variable left, Variable right) Parameters Type Name Description Variable left Variable right Returns Type Description Boolean"
  },
  "0.0.0/api/VRLabs.ModularShaderSystem.Variable.Type.html": {
    "href": "0.0.0/api/VRLabs.ModularShaderSystem.Variable.Type.html",
    "title": "Field Type | Modular Shader System Documentation",
    "keywords": "Field Type Namespace : VRLabs.ModularShaderSystem Syntax public string Type Returns String"
  },
  "0.0.0/guides/index.html": {
    "href": "0.0.0/guides/index.html",
    "title": "| Modular Shader System Documentation",
    "keywords": "Seems like at this point there weren't any guide available, try to look a more up to date version"
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "Welcome to the API Section | Modular Shader System Documentation",
    "keywords": "Welcome to the API Section Here you will find the documentation of each publicly available classes within the API."
  },
  "api/VRLabs.ModularShaderSystem.Debug.FunctionTimeline.-ctor.html": {
    "href": "api/VRLabs.ModularShaderSystem.Debug.FunctionTimeline.-ctor.html",
    "title": "Constructor FunctionTimeline | Modular Shader System Documentation",
    "keywords": "Constructor FunctionTimeline FunctionTimeline() Declaration public FunctionTimeline()"
  },
  "api/VRLabs.ModularShaderSystem.Debug.FunctionTimeline.html": {
    "href": "api/VRLabs.ModularShaderSystem.Debug.FunctionTimeline.html",
    "title": "Class FunctionTimeline | Modular Shader System Documentation",
    "keywords": "Class FunctionTimeline Modular Shader Debugger tab used to show the functions flow in the modular shader Inheritance Object FunctionTimeline Implements IModularShaderDebuggerTab Namespace : VRLabs.ModularShaderSystem.Debug Syntax public class FunctionTimeline : IModularShaderDebuggerTab Constructors Name Description FunctionTimeline() Properties Name Description TabContainer TabName Methods Name Description UpdateTab(ModularShader)"
  },
  "api/VRLabs.ModularShaderSystem.Debug.FunctionTimeline.TabContainer.html": {
    "href": "api/VRLabs.ModularShaderSystem.Debug.FunctionTimeline.TabContainer.html",
    "title": "Property TabContainer | Modular Shader System Documentation",
    "keywords": "Property TabContainer TabContainer Declaration public VisualElement TabContainer { get; set; } Property Value Type Description VisualElement Implements IModularShaderDebuggerTab.TabContainer"
  },
  "api/VRLabs.ModularShaderSystem.Debug.FunctionTimeline.TabName.html": {
    "href": "api/VRLabs.ModularShaderSystem.Debug.FunctionTimeline.TabName.html",
    "title": "Property TabName | Modular Shader System Documentation",
    "keywords": "Property TabName TabName Declaration public string TabName { get; set; } Property Value Type Description String Implements IModularShaderDebuggerTab.TabName"
  },
  "api/VRLabs.ModularShaderSystem.Debug.FunctionTimeline.UpdateTab.html": {
    "href": "api/VRLabs.ModularShaderSystem.Debug.FunctionTimeline.UpdateTab.html",
    "title": "Method UpdateTab | Modular Shader System Documentation",
    "keywords": "Method UpdateTab UpdateTab(ModularShader) Declaration public void UpdateTab(ModularShader shader) Parameters Type Name Description ModularShader shader Implements IModularShaderDebuggerTab.UpdateTab(ModularShader)"
  },
  "api/VRLabs.ModularShaderSystem.Debug.html": {
    "href": "api/VRLabs.ModularShaderSystem.Debug.html",
    "title": "Namespace VRLabs.ModularShaderSystem.Debug | Modular Shader System Documentation",
    "keywords": "Namespace VRLabs.ModularShaderSystem.Debug Classes FunctionTimeline Modular Shader Debugger tab used to show the functions flow in the modular shader ModularShaderDebugger Debugger Window for modular shaders. In here you can check various data visualization for your modular shader. TemplateGraph Modular Shader Debugger tab used show the current template tree of the modular shader. Interfaces IModularShaderDebuggerTab Interface indicating a tab for the Modular Shader Debugger."
  },
  "api/VRLabs.ModularShaderSystem.Debug.IModularShaderDebuggerTab.html": {
    "href": "api/VRLabs.ModularShaderSystem.Debug.IModularShaderDebuggerTab.html",
    "title": "Interface IModularShaderDebuggerTab | Modular Shader System Documentation",
    "keywords": "Interface IModularShaderDebuggerTab Interface indicating a tab for the Modular Shader Debugger. Namespace : VRLabs.ModularShaderSystem.Debug Syntax public interface IModularShaderDebuggerTab Remarks By implementing this interface in a custom class you can add a tab on the ModularShaderDebugger with your own debug tools. This can be useful in cases where you have specific implementations you want to track in your modular shader. Properties Name Description TabContainer VisualElement that will be visualized in the tab. Your ui goes here. Remember to initialize it in your constructor. TabName Name of the tab. Methods Name Description UpdateTab(ModularShader) Function called when updating the shader field (or refreshing). Changes in the data of your ui should go here"
  },
  "api/VRLabs.ModularShaderSystem.Debug.IModularShaderDebuggerTab.TabContainer.html": {
    "href": "api/VRLabs.ModularShaderSystem.Debug.IModularShaderDebuggerTab.TabContainer.html",
    "title": "Property TabContainer | Modular Shader System Documentation",
    "keywords": "Property TabContainer TabContainer VisualElement that will be visualized in the tab. Your ui goes here. Remember to initialize it in your constructor. Declaration VisualElement TabContainer { get; set; } Property Value Type Description VisualElement"
  },
  "api/VRLabs.ModularShaderSystem.Debug.IModularShaderDebuggerTab.TabName.html": {
    "href": "api/VRLabs.ModularShaderSystem.Debug.IModularShaderDebuggerTab.TabName.html",
    "title": "Property TabName | Modular Shader System Documentation",
    "keywords": "Property TabName TabName Name of the tab. Declaration string TabName { get; set; } Property Value Type Description String"
  },
  "api/VRLabs.ModularShaderSystem.Debug.IModularShaderDebuggerTab.UpdateTab.html": {
    "href": "api/VRLabs.ModularShaderSystem.Debug.IModularShaderDebuggerTab.UpdateTab.html",
    "title": "Method UpdateTab | Modular Shader System Documentation",
    "keywords": "Method UpdateTab UpdateTab(ModularShader) Function called when updating the shader field (or refreshing). Changes in the data of your ui should go here Declaration void UpdateTab(ModularShader shader) Parameters Type Name Description ModularShader shader New shader being shown in the debugger"
  },
  "api/VRLabs.ModularShaderSystem.Debug.ModularShaderDebugger.CreateGUI.html": {
    "href": "api/VRLabs.ModularShaderSystem.Debug.ModularShaderDebugger.CreateGUI.html",
    "title": "Method CreateGUI | Modular Shader System Documentation",
    "keywords": "Method CreateGUI CreateGUI() Declaration public void CreateGUI()"
  },
  "api/VRLabs.ModularShaderSystem.Debug.ModularShaderDebugger.html": {
    "href": "api/VRLabs.ModularShaderSystem.Debug.ModularShaderDebugger.html",
    "title": "Class ModularShaderDebugger | Modular Shader System Documentation",
    "keywords": "Class ModularShaderDebugger Debugger Window for modular shaders. In here you can check various data visualization for your modular shader. Inheritance Object Object ScriptableObject EditorWindow ModularShaderDebugger Namespace : VRLabs.ModularShaderSystem.Debug Syntax public class ModularShaderDebugger : EditorWindow Remarks When creating and editing modules you may need to get some information (example: template dependency) without checking manually each module asset. This window can help you get said information rapidly. It can also be expanded with custom tabs for your own needs by implementing the IModularShaderDebuggerTab interface. Methods Name Description CreateGUI() ShowExample()"
  },
  "api/VRLabs.ModularShaderSystem.Debug.ModularShaderDebugger.ShowExample.html": {
    "href": "api/VRLabs.ModularShaderSystem.Debug.ModularShaderDebugger.ShowExample.html",
    "title": "Method ShowExample | Modular Shader System Documentation",
    "keywords": "Method ShowExample ShowExample() Declaration [MenuItem(\"VRLabs/Modular Shader/Modular Shader Debugger\", priority = 5)] public static void ShowExample()"
  },
  "api/VRLabs.ModularShaderSystem.Debug.TemplateGraph.-ctor.html": {
    "href": "api/VRLabs.ModularShaderSystem.Debug.TemplateGraph.-ctor.html",
    "title": "Constructor TemplateGraph | Modular Shader System Documentation",
    "keywords": "Constructor TemplateGraph TemplateGraph() Declaration public TemplateGraph()"
  },
  "api/VRLabs.ModularShaderSystem.Debug.TemplateGraph.html": {
    "href": "api/VRLabs.ModularShaderSystem.Debug.TemplateGraph.html",
    "title": "Class TemplateGraph | Modular Shader System Documentation",
    "keywords": "Class TemplateGraph Modular Shader Debugger tab used show the current template tree of the modular shader. Inheritance Object TemplateGraph Implements IModularShaderDebuggerTab Namespace : VRLabs.ModularShaderSystem.Debug Syntax public class TemplateGraph : IModularShaderDebuggerTab Constructors Name Description TemplateGraph() Properties Name Description TabContainer TabName Methods Name Description UpdateTab(ModularShader)"
  },
  "api/VRLabs.ModularShaderSystem.Debug.TemplateGraph.TabContainer.html": {
    "href": "api/VRLabs.ModularShaderSystem.Debug.TemplateGraph.TabContainer.html",
    "title": "Property TabContainer | Modular Shader System Documentation",
    "keywords": "Property TabContainer TabContainer Declaration public VisualElement TabContainer { get; set; } Property Value Type Description VisualElement Implements IModularShaderDebuggerTab.TabContainer"
  },
  "api/VRLabs.ModularShaderSystem.Debug.TemplateGraph.TabName.html": {
    "href": "api/VRLabs.ModularShaderSystem.Debug.TemplateGraph.TabName.html",
    "title": "Property TabName | Modular Shader System Documentation",
    "keywords": "Property TabName TabName Declaration public string TabName { get; set; } Property Value Type Description String Implements IModularShaderDebuggerTab.TabName"
  },
  "api/VRLabs.ModularShaderSystem.Debug.TemplateGraph.UpdateTab.html": {
    "href": "api/VRLabs.ModularShaderSystem.Debug.TemplateGraph.UpdateTab.html",
    "title": "Method UpdateTab | Modular Shader System Documentation",
    "keywords": "Method UpdateTab UpdateTab(ModularShader) Declaration public void UpdateTab(ModularShader shader) Parameters Type Name Description ModularShader shader Implements IModularShaderDebuggerTab.UpdateTab(ModularShader)"
  },
  "api/VRLabs.ModularShaderSystem.EnableProperty.-ctor.html": {
    "href": "api/VRLabs.ModularShaderSystem.EnableProperty.-ctor.html",
    "title": "Constructor EnableProperty | Modular Shader System Documentation",
    "keywords": "Constructor EnableProperty EnableProperty(String, String, Int32) Main constructor. Declaration public EnableProperty(string name, string displayName, int enableValue) Parameters Type Name Description String name name of the property. String displayName Display name of the property. Int32 enableValue Value to enable the module that uses this enable property. EnableProperty(String, Int32) Simpler constructor where the name and display name are the same. Declaration public EnableProperty(string name, int enableValue) Parameters Type Name Description String name Name of the property, used also as display name. Int32 enableValue Value to enable the module that uses this enable property."
  },
  "api/VRLabs.ModularShaderSystem.EnableProperty.EnableValue.html": {
    "href": "api/VRLabs.ModularShaderSystem.EnableProperty.EnableValue.html",
    "title": "Field EnableValue | Modular Shader System Documentation",
    "keywords": "Field EnableValue Value to enable the module that uses this enable property. Namespace : VRLabs.ModularShaderSystem Syntax public int EnableValue Returns Int32"
  },
  "api/VRLabs.ModularShaderSystem.EnableProperty.Equals.html": {
    "href": "api/VRLabs.ModularShaderSystem.EnableProperty.Equals.html",
    "title": "Method Equals | Modular Shader System Documentation",
    "keywords": "Method Equals Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean Overrides Property.Equals(Object)"
  },
  "api/VRLabs.ModularShaderSystem.EnableProperty.GetHashCode.html": {
    "href": "api/VRLabs.ModularShaderSystem.EnableProperty.GetHashCode.html",
    "title": "Method GetHashCode | Modular Shader System Documentation",
    "keywords": "Method GetHashCode GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 Overrides Property.GetHashCode()"
  },
  "api/VRLabs.ModularShaderSystem.EnableProperty.html": {
    "href": "api/VRLabs.ModularShaderSystem.EnableProperty.html",
    "title": "Class EnableProperty | Modular Shader System Documentation",
    "keywords": "Class EnableProperty Property used to define if a module should be enabled or not. Inheritance Object Property EnableProperty Implements IEquatable < Property > IEquatable < EnableProperty > Namespace : VRLabs.ModularShaderSystem Syntax [Serializable] public class EnableProperty : Property, IEquatable<Property>, IEquatable<EnableProperty> Constructors Name Description EnableProperty(String, Int32) Simpler constructor where the name and display name are the same. EnableProperty(String, String, Int32) Main constructor. Fields Name Description EnableValue Value to enable the module that uses this enable property. Methods Name Description Equals(Object) GetHashCode() ToVariable() Convert the property to its variable implementation. Operators Name Description Equality(EnableProperty, EnableProperty) Inequality(EnableProperty, EnableProperty) Explicit Interface Implementations Name Description IEquatable<EnableProperty>.Equals(EnableProperty)"
  },
  "api/VRLabs.ModularShaderSystem.EnableProperty.op_Equality.html": {
    "href": "api/VRLabs.ModularShaderSystem.EnableProperty.op_Equality.html",
    "title": "Operator Equality | Modular Shader System Documentation",
    "keywords": "Operator Equality Equality(EnableProperty, EnableProperty) Declaration public static bool operator ==(EnableProperty left, EnableProperty right) Parameters Type Name Description EnableProperty left EnableProperty right Returns Type Description Boolean"
  },
  "api/VRLabs.ModularShaderSystem.EnableProperty.op_Inequality.html": {
    "href": "api/VRLabs.ModularShaderSystem.EnableProperty.op_Inequality.html",
    "title": "Operator Inequality | Modular Shader System Documentation",
    "keywords": "Operator Inequality Inequality(EnableProperty, EnableProperty) Declaration public static bool operator !=(EnableProperty left, EnableProperty right) Parameters Type Name Description EnableProperty left EnableProperty right Returns Type Description Boolean"
  },
  "api/VRLabs.ModularShaderSystem.EnableProperty.System-IEquatable-VRLabs-ModularShaderSystem-EnableProperty--Equals.html": {
    "href": "api/VRLabs.ModularShaderSystem.EnableProperty.System-IEquatable-VRLabs-ModularShaderSystem-EnableProperty--Equals.html",
    "title": "Method IEquatable<EnableProperty>.Equals | Modular Shader System Documentation",
    "keywords": "Method IEquatable<EnableProperty>.Equals IEquatable<EnableProperty>.Equals(EnableProperty) Declaration bool IEquatable<EnableProperty>.Equals(EnableProperty other) Parameters Type Name Description EnableProperty other Returns Type Description Boolean Implements IEquatable<T>.Equals(T)"
  },
  "api/VRLabs.ModularShaderSystem.EnableProperty.ToVariable.html": {
    "href": "api/VRLabs.ModularShaderSystem.EnableProperty.ToVariable.html",
    "title": "Method ToVariable | Modular Shader System Documentation",
    "keywords": "Method ToVariable ToVariable() Convert the property to its variable implementation. Declaration public override Variable ToVariable() Returns Type Description Variable Shader variable referring to this property. Overrides Property.ToVariable()"
  },
  "api/VRLabs.ModularShaderSystem.html": {
    "href": "api/VRLabs.ModularShaderSystem.html",
    "title": "Namespace VRLabs.ModularShaderSystem | Modular Shader System Documentation",
    "keywords": "Namespace VRLabs.ModularShaderSystem Classes EnableProperty Property used to define if a module should be enabled or not. MigratedAssets MigratedCollection MigratedItemElement<T> MigratedModularShader MigratedModuleTemplate MigratedShaderFunction MigratedShaderModule MigratedTemplate Migrator ModularShader The main asset used for the modular shader system, containing informations to generate a shader from modules declared here. ModuleTemplate Object indicating a template contained in a module that indicate what asset to use, in which keywords to add it to, and when to add it. MSSConstants Constants used across the library. Property Shader property information. ShaderFunction Function information for a shader module. ShaderGenerator ShaderGenerator.ShaderContext ShaderModule Asset containing a module to add features to a shader. ShaderStringBuilderExtensions Static class that adds extension methods for the StringBuilder, used mainly in the shader generator for writing down the shader file TemplateAsset Asset containing shader code that is used around the modular shader system. TemplateAssetImporter Scripted importer for the template asset TemplateCollectionAsset Asset containing multiple templates separated by special keywords. TemplateColletionAssetImporter Scripted importer for the template collection. Variable Object defining a shader variable. It's used mainly for defining used variables in a module's function. Enums PropertyType Typed of shader properties. VariableType Possible types of variables."
  },
  "api/VRLabs.ModularShaderSystem.MigratedAssets.-ctor.html": {
    "href": "api/VRLabs.ModularShaderSystem.MigratedAssets.-ctor.html",
    "title": "Constructor MigratedAssets | Modular Shader System Documentation",
    "keywords": "Constructor MigratedAssets MigratedAssets() Declaration public MigratedAssets()"
  },
  "api/VRLabs.ModularShaderSystem.MigratedAssets.html": {
    "href": "api/VRLabs.ModularShaderSystem.MigratedAssets.html",
    "title": "Class MigratedAssets | Modular Shader System Documentation",
    "keywords": "Class MigratedAssets Inheritance Object MigratedAssets Namespace : VRLabs.ModularShaderSystem Syntax [Serializable] public class MigratedAssets Constructors Name Description MigratedAssets() Fields Name Description modularShaders shaderModules templateCollections templates"
  },
  "api/VRLabs.ModularShaderSystem.MigratedAssets.modularShaders.html": {
    "href": "api/VRLabs.ModularShaderSystem.MigratedAssets.modularShaders.html",
    "title": "Field modularShaders | Modular Shader System Documentation",
    "keywords": "Field modularShaders Namespace : VRLabs.ModularShaderSystem Syntax public List<MigratedModularShader> modularShaders Returns List < MigratedModularShader >"
  },
  "api/VRLabs.ModularShaderSystem.MigratedAssets.shaderModules.html": {
    "href": "api/VRLabs.ModularShaderSystem.MigratedAssets.shaderModules.html",
    "title": "Field shaderModules | Modular Shader System Documentation",
    "keywords": "Field shaderModules Namespace : VRLabs.ModularShaderSystem Syntax public List<MigratedShaderModule> shaderModules Returns List < MigratedShaderModule >"
  },
  "api/VRLabs.ModularShaderSystem.MigratedAssets.templateCollections.html": {
    "href": "api/VRLabs.ModularShaderSystem.MigratedAssets.templateCollections.html",
    "title": "Field templateCollections | Modular Shader System Documentation",
    "keywords": "Field templateCollections Namespace : VRLabs.ModularShaderSystem Syntax public List<MigratedCollection> templateCollections Returns List < MigratedCollection >"
  },
  "api/VRLabs.ModularShaderSystem.MigratedAssets.templates.html": {
    "href": "api/VRLabs.ModularShaderSystem.MigratedAssets.templates.html",
    "title": "Field templates | Modular Shader System Documentation",
    "keywords": "Field templates Namespace : VRLabs.ModularShaderSystem Syntax public List<MigratedTemplate> templates Returns List < MigratedTemplate >"
  },
  "api/VRLabs.ModularShaderSystem.MigratedCollection.content.html": {
    "href": "api/VRLabs.ModularShaderSystem.MigratedCollection.content.html",
    "title": "Field content | Modular Shader System Documentation",
    "keywords": "Field content Namespace : VRLabs.ModularShaderSystem Syntax public string content Returns String"
  },
  "api/VRLabs.ModularShaderSystem.MigratedCollection.html": {
    "href": "api/VRLabs.ModularShaderSystem.MigratedCollection.html",
    "title": "Class MigratedCollection | Modular Shader System Documentation",
    "keywords": "Class MigratedCollection Inheritance Object MigratedCollection Namespace : VRLabs.ModularShaderSystem Syntax [Serializable] public class MigratedCollection Fields Name Description content id path"
  },
  "api/VRLabs.ModularShaderSystem.MigratedCollection.id.html": {
    "href": "api/VRLabs.ModularShaderSystem.MigratedCollection.id.html",
    "title": "Field id | Modular Shader System Documentation",
    "keywords": "Field id Namespace : VRLabs.ModularShaderSystem Syntax public long id Returns Int64"
  },
  "api/VRLabs.ModularShaderSystem.MigratedCollection.path.html": {
    "href": "api/VRLabs.ModularShaderSystem.MigratedCollection.path.html",
    "title": "Field path | Modular Shader System Documentation",
    "keywords": "Field path Namespace : VRLabs.ModularShaderSystem Syntax public string path Returns String"
  },
  "api/VRLabs.ModularShaderSystem.MigratedItemElement-1.-ctor.html": {
    "href": "api/VRLabs.ModularShaderSystem.MigratedItemElement-1.-ctor.html",
    "title": "Constructor MigratedItemElement | Modular Shader System Documentation",
    "keywords": "Constructor MigratedItemElement MigratedItemElement(Migrator, T, String) Declaration public MigratedItemElement(Migrator window, T toggledItem, string name) Parameters Type Name Description Migrator window T toggledItem String name"
  },
  "api/VRLabs.ModularShaderSystem.MigratedItemElement-1.html": {
    "href": "api/VRLabs.ModularShaderSystem.MigratedItemElement-1.html",
    "title": "Class MigratedItemElement<T> | Modular Shader System Documentation",
    "keywords": "Class MigratedItemElement<T> Inheritance Object CallbackEventHandler Focusable VisualElement MigratedItemElement<T> Implements IEventHandler ITransform ITransitionAnimations IExperimentalFeatures IVisualElementScheduler IResolvedStyle Namespace : VRLabs.ModularShaderSystem Syntax public class MigratedItemElement<T> : VisualElement, IEventHandler, ITransform, ITransitionAnimations, IExperimentalFeatures, IVisualElementScheduler, IResolvedStyle Type Parameters T Constructors Name Description MigratedItemElement(Migrator, T, String) Fields Name Description ToggledItem Properties Name Description IsSelected"
  },
  "api/VRLabs.ModularShaderSystem.MigratedItemElement-1.IsSelected.html": {
    "href": "api/VRLabs.ModularShaderSystem.MigratedItemElement-1.IsSelected.html",
    "title": "Property IsSelected | Modular Shader System Documentation",
    "keywords": "Property IsSelected IsSelected Declaration public bool IsSelected { get; set; } Property Value Type Description Boolean"
  },
  "api/VRLabs.ModularShaderSystem.MigratedItemElement-1.ToggledItem.html": {
    "href": "api/VRLabs.ModularShaderSystem.MigratedItemElement-1.ToggledItem.html",
    "title": "Field ToggledItem | Modular Shader System Documentation",
    "keywords": "Field ToggledItem Namespace : VRLabs.ModularShaderSystem Syntax public T ToggledItem Returns T"
  },
  "api/VRLabs.ModularShaderSystem.MigratedModularShader.additionalModules.html": {
    "href": "api/VRLabs.ModularShaderSystem.MigratedModularShader.additionalModules.html",
    "title": "Field additionalModules | Modular Shader System Documentation",
    "keywords": "Field additionalModules Namespace : VRLabs.ModularShaderSystem Syntax public List<long> additionalModules Returns List < Int64 >"
  },
  "api/VRLabs.ModularShaderSystem.MigratedModularShader.additionalSerializedData.html": {
    "href": "api/VRLabs.ModularShaderSystem.MigratedModularShader.additionalSerializedData.html",
    "title": "Field additionalSerializedData | Modular Shader System Documentation",
    "keywords": "Field additionalSerializedData Namespace : VRLabs.ModularShaderSystem Syntax public string additionalSerializedData Returns String"
  },
  "api/VRLabs.ModularShaderSystem.MigratedModularShader.author.html": {
    "href": "api/VRLabs.ModularShaderSystem.MigratedModularShader.author.html",
    "title": "Field author | Modular Shader System Documentation",
    "keywords": "Field author Namespace : VRLabs.ModularShaderSystem Syntax public string author Returns String"
  },
  "api/VRLabs.ModularShaderSystem.MigratedModularShader.baseModules.html": {
    "href": "api/VRLabs.ModularShaderSystem.MigratedModularShader.baseModules.html",
    "title": "Field baseModules | Modular Shader System Documentation",
    "keywords": "Field baseModules Namespace : VRLabs.ModularShaderSystem Syntax public List<long> baseModules Returns List < Int64 >"
  },
  "api/VRLabs.ModularShaderSystem.MigratedModularShader.customEditor.html": {
    "href": "api/VRLabs.ModularShaderSystem.MigratedModularShader.customEditor.html",
    "title": "Field customEditor | Modular Shader System Documentation",
    "keywords": "Field customEditor Namespace : VRLabs.ModularShaderSystem Syntax public string customEditor Returns String"
  },
  "api/VRLabs.ModularShaderSystem.MigratedModularShader.description.html": {
    "href": "api/VRLabs.ModularShaderSystem.MigratedModularShader.description.html",
    "title": "Field description | Modular Shader System Documentation",
    "keywords": "Field description Namespace : VRLabs.ModularShaderSystem Syntax public string description Returns String"
  },
  "api/VRLabs.ModularShaderSystem.MigratedModularShader.html": {
    "href": "api/VRLabs.ModularShaderSystem.MigratedModularShader.html",
    "title": "Class MigratedModularShader | Modular Shader System Documentation",
    "keywords": "Class MigratedModularShader Inheritance Object MigratedModularShader Namespace : VRLabs.ModularShaderSystem Syntax [Serializable] public class MigratedModularShader Fields Name Description additionalModules additionalSerializedData author baseModules customEditor description id lastGeneratedShaders lockBaseModules name path properties propertiesCollectionSubId propertiesTemplateReference shaderCollectionSubId shaderId shaderPath shaderTemplateReference useTemplatesForProperties version"
  },
  "api/VRLabs.ModularShaderSystem.MigratedModularShader.id.html": {
    "href": "api/VRLabs.ModularShaderSystem.MigratedModularShader.id.html",
    "title": "Field id | Modular Shader System Documentation",
    "keywords": "Field id Namespace : VRLabs.ModularShaderSystem Syntax public long id Returns Int64"
  },
  "api/VRLabs.ModularShaderSystem.MigratedModularShader.lastGeneratedShaders.html": {
    "href": "api/VRLabs.ModularShaderSystem.MigratedModularShader.lastGeneratedShaders.html",
    "title": "Field lastGeneratedShaders | Modular Shader System Documentation",
    "keywords": "Field lastGeneratedShaders Namespace : VRLabs.ModularShaderSystem Syntax public List<Shader> lastGeneratedShaders Returns List < Shader >"
  },
  "api/VRLabs.ModularShaderSystem.MigratedModularShader.lockBaseModules.html": {
    "href": "api/VRLabs.ModularShaderSystem.MigratedModularShader.lockBaseModules.html",
    "title": "Field lockBaseModules | Modular Shader System Documentation",
    "keywords": "Field lockBaseModules Namespace : VRLabs.ModularShaderSystem Syntax public bool lockBaseModules Returns Boolean"
  },
  "api/VRLabs.ModularShaderSystem.MigratedModularShader.name.html": {
    "href": "api/VRLabs.ModularShaderSystem.MigratedModularShader.name.html",
    "title": "Field name | Modular Shader System Documentation",
    "keywords": "Field name Namespace : VRLabs.ModularShaderSystem Syntax public string name Returns String"
  },
  "api/VRLabs.ModularShaderSystem.MigratedModularShader.path.html": {
    "href": "api/VRLabs.ModularShaderSystem.MigratedModularShader.path.html",
    "title": "Field path | Modular Shader System Documentation",
    "keywords": "Field path Namespace : VRLabs.ModularShaderSystem Syntax public string path Returns String"
  },
  "api/VRLabs.ModularShaderSystem.MigratedModularShader.properties.html": {
    "href": "api/VRLabs.ModularShaderSystem.MigratedModularShader.properties.html",
    "title": "Field properties | Modular Shader System Documentation",
    "keywords": "Field properties Namespace : VRLabs.ModularShaderSystem Syntax public List<Property> properties Returns List < Property >"
  },
  "api/VRLabs.ModularShaderSystem.MigratedModularShader.propertiesCollectionSubId.html": {
    "href": "api/VRLabs.ModularShaderSystem.MigratedModularShader.propertiesCollectionSubId.html",
    "title": "Field propertiesCollectionSubId | Modular Shader System Documentation",
    "keywords": "Field propertiesCollectionSubId Namespace : VRLabs.ModularShaderSystem Syntax public string propertiesCollectionSubId Returns String"
  },
  "api/VRLabs.ModularShaderSystem.MigratedModularShader.propertiesTemplateReference.html": {
    "href": "api/VRLabs.ModularShaderSystem.MigratedModularShader.propertiesTemplateReference.html",
    "title": "Field propertiesTemplateReference | Modular Shader System Documentation",
    "keywords": "Field propertiesTemplateReference Namespace : VRLabs.ModularShaderSystem Syntax public long propertiesTemplateReference Returns Int64"
  },
  "api/VRLabs.ModularShaderSystem.MigratedModularShader.shaderCollectionSubId.html": {
    "href": "api/VRLabs.ModularShaderSystem.MigratedModularShader.shaderCollectionSubId.html",
    "title": "Field shaderCollectionSubId | Modular Shader System Documentation",
    "keywords": "Field shaderCollectionSubId Namespace : VRLabs.ModularShaderSystem Syntax public string shaderCollectionSubId Returns String"
  },
  "api/VRLabs.ModularShaderSystem.MigratedModularShader.shaderId.html": {
    "href": "api/VRLabs.ModularShaderSystem.MigratedModularShader.shaderId.html",
    "title": "Field shaderId | Modular Shader System Documentation",
    "keywords": "Field shaderId Namespace : VRLabs.ModularShaderSystem Syntax public string shaderId Returns String"
  },
  "api/VRLabs.ModularShaderSystem.MigratedModularShader.shaderPath.html": {
    "href": "api/VRLabs.ModularShaderSystem.MigratedModularShader.shaderPath.html",
    "title": "Field shaderPath | Modular Shader System Documentation",
    "keywords": "Field shaderPath Namespace : VRLabs.ModularShaderSystem Syntax public string shaderPath Returns String"
  },
  "api/VRLabs.ModularShaderSystem.MigratedModularShader.shaderTemplateReference.html": {
    "href": "api/VRLabs.ModularShaderSystem.MigratedModularShader.shaderTemplateReference.html",
    "title": "Field shaderTemplateReference | Modular Shader System Documentation",
    "keywords": "Field shaderTemplateReference Namespace : VRLabs.ModularShaderSystem Syntax public long shaderTemplateReference Returns Int64"
  },
  "api/VRLabs.ModularShaderSystem.MigratedModularShader.useTemplatesForProperties.html": {
    "href": "api/VRLabs.ModularShaderSystem.MigratedModularShader.useTemplatesForProperties.html",
    "title": "Field useTemplatesForProperties | Modular Shader System Documentation",
    "keywords": "Field useTemplatesForProperties Namespace : VRLabs.ModularShaderSystem Syntax public bool useTemplatesForProperties Returns Boolean"
  },
  "api/VRLabs.ModularShaderSystem.MigratedModularShader.version.html": {
    "href": "api/VRLabs.ModularShaderSystem.MigratedModularShader.version.html",
    "title": "Field version | Modular Shader System Documentation",
    "keywords": "Field version Namespace : VRLabs.ModularShaderSystem Syntax public string version Returns String"
  },
  "api/VRLabs.ModularShaderSystem.MigratedModuleTemplate.collectionSubId.html": {
    "href": "api/VRLabs.ModularShaderSystem.MigratedModuleTemplate.collectionSubId.html",
    "title": "Field collectionSubId | Modular Shader System Documentation",
    "keywords": "Field collectionSubId Namespace : VRLabs.ModularShaderSystem Syntax public string collectionSubId Returns String"
  },
  "api/VRLabs.ModularShaderSystem.MigratedModuleTemplate.html": {
    "href": "api/VRLabs.ModularShaderSystem.MigratedModuleTemplate.html",
    "title": "Class MigratedModuleTemplate | Modular Shader System Documentation",
    "keywords": "Class MigratedModuleTemplate Inheritance Object MigratedModuleTemplate Namespace : VRLabs.ModularShaderSystem Syntax [Serializable] public class MigratedModuleTemplate Fields Name Description collectionSubId keywords needsVariant queue templateReference"
  },
  "api/VRLabs.ModularShaderSystem.MigratedModuleTemplate.keywords.html": {
    "href": "api/VRLabs.ModularShaderSystem.MigratedModuleTemplate.keywords.html",
    "title": "Field keywords | Modular Shader System Documentation",
    "keywords": "Field keywords Namespace : VRLabs.ModularShaderSystem Syntax public List<string> keywords Returns List < String >"
  },
  "api/VRLabs.ModularShaderSystem.MigratedModuleTemplate.needsVariant.html": {
    "href": "api/VRLabs.ModularShaderSystem.MigratedModuleTemplate.needsVariant.html",
    "title": "Field needsVariant | Modular Shader System Documentation",
    "keywords": "Field needsVariant Namespace : VRLabs.ModularShaderSystem Syntax public bool needsVariant Returns Boolean"
  },
  "api/VRLabs.ModularShaderSystem.MigratedModuleTemplate.queue.html": {
    "href": "api/VRLabs.ModularShaderSystem.MigratedModuleTemplate.queue.html",
    "title": "Field queue | Modular Shader System Documentation",
    "keywords": "Field queue Namespace : VRLabs.ModularShaderSystem Syntax public int queue Returns Int32"
  },
  "api/VRLabs.ModularShaderSystem.MigratedModuleTemplate.templateReference.html": {
    "href": "api/VRLabs.ModularShaderSystem.MigratedModuleTemplate.templateReference.html",
    "title": "Field templateReference | Modular Shader System Documentation",
    "keywords": "Field templateReference Namespace : VRLabs.ModularShaderSystem Syntax public long templateReference Returns Int64"
  },
  "api/VRLabs.ModularShaderSystem.MigratedShaderFunction.appendAfter.html": {
    "href": "api/VRLabs.ModularShaderSystem.MigratedShaderFunction.appendAfter.html",
    "title": "Field appendAfter | Modular Shader System Documentation",
    "keywords": "Field appendAfter Namespace : VRLabs.ModularShaderSystem Syntax public string appendAfter Returns String"
  },
  "api/VRLabs.ModularShaderSystem.MigratedShaderFunction.codeKeywords.html": {
    "href": "api/VRLabs.ModularShaderSystem.MigratedShaderFunction.codeKeywords.html",
    "title": "Field codeKeywords | Modular Shader System Documentation",
    "keywords": "Field codeKeywords Namespace : VRLabs.ModularShaderSystem Syntax public List<string> codeKeywords Returns List < String >"
  },
  "api/VRLabs.ModularShaderSystem.MigratedShaderFunction.collectionSubId.html": {
    "href": "api/VRLabs.ModularShaderSystem.MigratedShaderFunction.collectionSubId.html",
    "title": "Field collectionSubId | Modular Shader System Documentation",
    "keywords": "Field collectionSubId Namespace : VRLabs.ModularShaderSystem Syntax public string collectionSubId Returns String"
  },
  "api/VRLabs.ModularShaderSystem.MigratedShaderFunction.html": {
    "href": "api/VRLabs.ModularShaderSystem.MigratedShaderFunction.html",
    "title": "Class MigratedShaderFunction | Modular Shader System Documentation",
    "keywords": "Class MigratedShaderFunction Inheritance Object MigratedShaderFunction Namespace : VRLabs.ModularShaderSystem Syntax [Serializable] public class MigratedShaderFunction Fields Name Description appendAfter codeKeywords collectionSubId name queue templateReference usedVariables variableKeywords"
  },
  "api/VRLabs.ModularShaderSystem.MigratedShaderFunction.name.html": {
    "href": "api/VRLabs.ModularShaderSystem.MigratedShaderFunction.name.html",
    "title": "Field name | Modular Shader System Documentation",
    "keywords": "Field name Namespace : VRLabs.ModularShaderSystem Syntax public string name Returns String"
  },
  "api/VRLabs.ModularShaderSystem.MigratedShaderFunction.queue.html": {
    "href": "api/VRLabs.ModularShaderSystem.MigratedShaderFunction.queue.html",
    "title": "Field queue | Modular Shader System Documentation",
    "keywords": "Field queue Namespace : VRLabs.ModularShaderSystem Syntax public short queue Returns Int16"
  },
  "api/VRLabs.ModularShaderSystem.MigratedShaderFunction.templateReference.html": {
    "href": "api/VRLabs.ModularShaderSystem.MigratedShaderFunction.templateReference.html",
    "title": "Field templateReference | Modular Shader System Documentation",
    "keywords": "Field templateReference Namespace : VRLabs.ModularShaderSystem Syntax public long templateReference Returns Int64"
  },
  "api/VRLabs.ModularShaderSystem.MigratedShaderFunction.usedVariables.html": {
    "href": "api/VRLabs.ModularShaderSystem.MigratedShaderFunction.usedVariables.html",
    "title": "Field usedVariables | Modular Shader System Documentation",
    "keywords": "Field usedVariables Namespace : VRLabs.ModularShaderSystem Syntax public List<Variable> usedVariables Returns List < Variable >"
  },
  "api/VRLabs.ModularShaderSystem.MigratedShaderFunction.variableKeywords.html": {
    "href": "api/VRLabs.ModularShaderSystem.MigratedShaderFunction.variableKeywords.html",
    "title": "Field variableKeywords | Modular Shader System Documentation",
    "keywords": "Field variableKeywords Namespace : VRLabs.ModularShaderSystem Syntax public List<string> variableKeywords Returns List < String >"
  },
  "api/VRLabs.ModularShaderSystem.MigratedShaderModule.additionalSerializedData.html": {
    "href": "api/VRLabs.ModularShaderSystem.MigratedShaderModule.additionalSerializedData.html",
    "title": "Field additionalSerializedData | Modular Shader System Documentation",
    "keywords": "Field additionalSerializedData Namespace : VRLabs.ModularShaderSystem Syntax public string additionalSerializedData Returns String"
  },
  "api/VRLabs.ModularShaderSystem.MigratedShaderModule.author.html": {
    "href": "api/VRLabs.ModularShaderSystem.MigratedShaderModule.author.html",
    "title": "Field author | Modular Shader System Documentation",
    "keywords": "Field author Namespace : VRLabs.ModularShaderSystem Syntax public string author Returns String"
  },
  "api/VRLabs.ModularShaderSystem.MigratedShaderModule.description.html": {
    "href": "api/VRLabs.ModularShaderSystem.MigratedShaderModule.description.html",
    "title": "Field description | Modular Shader System Documentation",
    "keywords": "Field description Namespace : VRLabs.ModularShaderSystem Syntax public string description Returns String"
  },
  "api/VRLabs.ModularShaderSystem.MigratedShaderModule.enableProperties.html": {
    "href": "api/VRLabs.ModularShaderSystem.MigratedShaderModule.enableProperties.html",
    "title": "Field enableProperties | Modular Shader System Documentation",
    "keywords": "Field enableProperties Namespace : VRLabs.ModularShaderSystem Syntax public List<EnableProperty> enableProperties Returns List < EnableProperty >"
  },
  "api/VRLabs.ModularShaderSystem.MigratedShaderModule.functions.html": {
    "href": "api/VRLabs.ModularShaderSystem.MigratedShaderModule.functions.html",
    "title": "Field functions | Modular Shader System Documentation",
    "keywords": "Field functions Namespace : VRLabs.ModularShaderSystem Syntax public List<MigratedShaderFunction> functions Returns List < MigratedShaderFunction >"
  },
  "api/VRLabs.ModularShaderSystem.MigratedShaderModule.html": {
    "href": "api/VRLabs.ModularShaderSystem.MigratedShaderModule.html",
    "title": "Class MigratedShaderModule | Modular Shader System Documentation",
    "keywords": "Class MigratedShaderModule Inheritance Object MigratedShaderModule Namespace : VRLabs.ModularShaderSystem Syntax [Serializable] public class MigratedShaderModule Fields Name Description additionalSerializedData author description enableProperties functions id incompatibleWith moduleDependencies moduleId name path properties templates version"
  },
  "api/VRLabs.ModularShaderSystem.MigratedShaderModule.id.html": {
    "href": "api/VRLabs.ModularShaderSystem.MigratedShaderModule.id.html",
    "title": "Field id | Modular Shader System Documentation",
    "keywords": "Field id Namespace : VRLabs.ModularShaderSystem Syntax public long id Returns Int64"
  },
  "api/VRLabs.ModularShaderSystem.MigratedShaderModule.incompatibleWith.html": {
    "href": "api/VRLabs.ModularShaderSystem.MigratedShaderModule.incompatibleWith.html",
    "title": "Field incompatibleWith | Modular Shader System Documentation",
    "keywords": "Field incompatibleWith Namespace : VRLabs.ModularShaderSystem Syntax public List<string> incompatibleWith Returns List < String >"
  },
  "api/VRLabs.ModularShaderSystem.MigratedShaderModule.moduleDependencies.html": {
    "href": "api/VRLabs.ModularShaderSystem.MigratedShaderModule.moduleDependencies.html",
    "title": "Field moduleDependencies | Modular Shader System Documentation",
    "keywords": "Field moduleDependencies Namespace : VRLabs.ModularShaderSystem Syntax public List<string> moduleDependencies Returns List < String >"
  },
  "api/VRLabs.ModularShaderSystem.MigratedShaderModule.moduleId.html": {
    "href": "api/VRLabs.ModularShaderSystem.MigratedShaderModule.moduleId.html",
    "title": "Field moduleId | Modular Shader System Documentation",
    "keywords": "Field moduleId Namespace : VRLabs.ModularShaderSystem Syntax public string moduleId Returns String"
  },
  "api/VRLabs.ModularShaderSystem.MigratedShaderModule.name.html": {
    "href": "api/VRLabs.ModularShaderSystem.MigratedShaderModule.name.html",
    "title": "Field name | Modular Shader System Documentation",
    "keywords": "Field name Namespace : VRLabs.ModularShaderSystem Syntax public string name Returns String"
  },
  "api/VRLabs.ModularShaderSystem.MigratedShaderModule.path.html": {
    "href": "api/VRLabs.ModularShaderSystem.MigratedShaderModule.path.html",
    "title": "Field path | Modular Shader System Documentation",
    "keywords": "Field path Namespace : VRLabs.ModularShaderSystem Syntax public string path Returns String"
  },
  "api/VRLabs.ModularShaderSystem.MigratedShaderModule.properties.html": {
    "href": "api/VRLabs.ModularShaderSystem.MigratedShaderModule.properties.html",
    "title": "Field properties | Modular Shader System Documentation",
    "keywords": "Field properties Namespace : VRLabs.ModularShaderSystem Syntax public List<Property> properties Returns List < Property >"
  },
  "api/VRLabs.ModularShaderSystem.MigratedShaderModule.templates.html": {
    "href": "api/VRLabs.ModularShaderSystem.MigratedShaderModule.templates.html",
    "title": "Field templates | Modular Shader System Documentation",
    "keywords": "Field templates Namespace : VRLabs.ModularShaderSystem Syntax public List<MigratedModuleTemplate> templates Returns List < MigratedModuleTemplate >"
  },
  "api/VRLabs.ModularShaderSystem.MigratedShaderModule.version.html": {
    "href": "api/VRLabs.ModularShaderSystem.MigratedShaderModule.version.html",
    "title": "Field version | Modular Shader System Documentation",
    "keywords": "Field version Namespace : VRLabs.ModularShaderSystem Syntax public string version Returns String"
  },
  "api/VRLabs.ModularShaderSystem.MigratedTemplate.content.html": {
    "href": "api/VRLabs.ModularShaderSystem.MigratedTemplate.content.html",
    "title": "Field content | Modular Shader System Documentation",
    "keywords": "Field content Namespace : VRLabs.ModularShaderSystem Syntax public string content Returns String"
  },
  "api/VRLabs.ModularShaderSystem.MigratedTemplate.html": {
    "href": "api/VRLabs.ModularShaderSystem.MigratedTemplate.html",
    "title": "Class MigratedTemplate | Modular Shader System Documentation",
    "keywords": "Class MigratedTemplate Inheritance Object MigratedTemplate Namespace : VRLabs.ModularShaderSystem Syntax [Serializable] public class MigratedTemplate Fields Name Description content id path"
  },
  "api/VRLabs.ModularShaderSystem.MigratedTemplate.id.html": {
    "href": "api/VRLabs.ModularShaderSystem.MigratedTemplate.id.html",
    "title": "Field id | Modular Shader System Documentation",
    "keywords": "Field id Namespace : VRLabs.ModularShaderSystem Syntax public long id Returns Int64"
  },
  "api/VRLabs.ModularShaderSystem.MigratedTemplate.path.html": {
    "href": "api/VRLabs.ModularShaderSystem.MigratedTemplate.path.html",
    "title": "Field path | Modular Shader System Documentation",
    "keywords": "Field path Namespace : VRLabs.ModularShaderSystem Syntax public string path Returns String"
  },
  "api/VRLabs.ModularShaderSystem.Migrator.html": {
    "href": "api/VRLabs.ModularShaderSystem.Migrator.html",
    "title": "Class Migrator | Modular Shader System Documentation",
    "keywords": "Class Migrator Inheritance Object Object ScriptableObject EditorWindow Migrator Namespace : VRLabs.ModularShaderSystem Syntax public class Migrator : EditorWindow"
  },
  "api/VRLabs.ModularShaderSystem.ModularShader.AdditionalModules.html": {
    "href": "api/VRLabs.ModularShaderSystem.ModularShader.AdditionalModules.html",
    "title": "Field AdditionalModules | Modular Shader System Documentation",
    "keywords": "Field AdditionalModules List of additional modules. Namespace : VRLabs.ModularShaderSystem Syntax [HideInInspector] public List<ShaderModule> AdditionalModules Returns List < ShaderModule > Remarks Unlike base modules, additional modules are not shown in the ui, and the list is intended to be used mainly by custom scripts."
  },
  "api/VRLabs.ModularShaderSystem.ModularShader.AdditionalSerializedData.html": {
    "href": "api/VRLabs.ModularShaderSystem.ModularShader.AdditionalSerializedData.html",
    "title": "Field AdditionalSerializedData | Modular Shader System Documentation",
    "keywords": "Field AdditionalSerializedData string that can contain whatever you want, it is originally intended to contain serialized data that you may need for your own custom system based on the modular shader system. Namespace : VRLabs.ModularShaderSystem Syntax [HideInInspector] public string AdditionalSerializedData Returns String"
  },
  "api/VRLabs.ModularShaderSystem.ModularShader.Author.html": {
    "href": "api/VRLabs.ModularShaderSystem.ModularShader.Author.html",
    "title": "Field Author | Modular Shader System Documentation",
    "keywords": "Field Author Author of the modular shader. Namespace : VRLabs.ModularShaderSystem Syntax public string Author Returns String"
  },
  "api/VRLabs.ModularShaderSystem.ModularShader.BaseModules.html": {
    "href": "api/VRLabs.ModularShaderSystem.ModularShader.BaseModules.html",
    "title": "Field BaseModules | Modular Shader System Documentation",
    "keywords": "Field BaseModules List of base modules. Namespace : VRLabs.ModularShaderSystem Syntax public List<ShaderModule> BaseModules Returns List < ShaderModule >"
  },
  "api/VRLabs.ModularShaderSystem.ModularShader.CustomEditor.html": {
    "href": "api/VRLabs.ModularShaderSystem.ModularShader.CustomEditor.html",
    "title": "Field CustomEditor | Modular Shader System Documentation",
    "keywords": "Field CustomEditor Custom editor definition. Namespace : VRLabs.ModularShaderSystem Syntax public string CustomEditor Returns String"
  },
  "api/VRLabs.ModularShaderSystem.ModularShader.Description.html": {
    "href": "api/VRLabs.ModularShaderSystem.ModularShader.Description.html",
    "title": "Field Description | Modular Shader System Documentation",
    "keywords": "Field Description Description of the modular shader. Namespace : VRLabs.ModularShaderSystem Syntax public string Description Returns String"
  },
  "api/VRLabs.ModularShaderSystem.ModularShader.html": {
    "href": "api/VRLabs.ModularShaderSystem.ModularShader.html",
    "title": "Class ModularShader | Modular Shader System Documentation",
    "keywords": "Class ModularShader The main asset used for the modular shader system, containing informations to generate a shader from modules declared here. Inheritance Object Object ScriptableObject ModularShader Namespace : VRLabs.ModularShaderSystem Syntax [CreateAssetMenu(fileName = \"ModularShader\", menuName = \"VRLabs/Modular Shader/Modular Shader\", order = 0)] public class ModularShader : ScriptableObject Fields Name Description AdditionalModules List of additional modules. AdditionalSerializedData string that can contain whatever you want, it is originally intended to contain serialized data that you may need for your own custom system based on the modular shader system. Author Author of the modular shader. BaseModules List of base modules. CustomEditor Custom editor definition. Description Description of the modular shader. Id Id of the modular shader. LastGeneratedShaders List of shaders that have been last generated by this modular shader. Useful to backtrack from which modular shader a specific shader comes. LockBaseModules Boolean to disable the base modules list edit. Can be edited by either scripts or the debug inspector. Name Name of the modular shader. Properties List of properties defined. ShaderPath Path for the shader in the shader selector. ShaderPropertiesTemplate Template asset for defining properties. ShaderTemplate Main template asset for the shader. UseTemplatesForProperties Toggle to define if the modular shader can use templates to declare properties. Version Version of the modular shader."
  },
  "api/VRLabs.ModularShaderSystem.ModularShader.Id.html": {
    "href": "api/VRLabs.ModularShaderSystem.ModularShader.Id.html",
    "title": "Field Id | Modular Shader System Documentation",
    "keywords": "Field Id Id of the modular shader. Namespace : VRLabs.ModularShaderSystem Syntax public string Id Returns String"
  },
  "api/VRLabs.ModularShaderSystem.ModularShader.LastGeneratedShaders.html": {
    "href": "api/VRLabs.ModularShaderSystem.ModularShader.LastGeneratedShaders.html",
    "title": "Field LastGeneratedShaders | Modular Shader System Documentation",
    "keywords": "Field LastGeneratedShaders List of shaders that have been last generated by this modular shader. Useful to backtrack from which modular shader a specific shader comes. Namespace : VRLabs.ModularShaderSystem Syntax public List<Shader> LastGeneratedShaders Returns List < Shader > Remarks This list is not visible in the inspector, but can be accessed by scripts."
  },
  "api/VRLabs.ModularShaderSystem.ModularShader.LockBaseModules.html": {
    "href": "api/VRLabs.ModularShaderSystem.ModularShader.LockBaseModules.html",
    "title": "Field LockBaseModules | Modular Shader System Documentation",
    "keywords": "Field LockBaseModules Boolean to disable the base modules list edit. Can be edited by either scripts or the debug inspector. Namespace : VRLabs.ModularShaderSystem Syntax public bool LockBaseModules Returns Boolean"
  },
  "api/VRLabs.ModularShaderSystem.ModularShader.Name.html": {
    "href": "api/VRLabs.ModularShaderSystem.ModularShader.Name.html",
    "title": "Field Name | Modular Shader System Documentation",
    "keywords": "Field Name Name of the modular shader. Namespace : VRLabs.ModularShaderSystem Syntax public string Name Returns String"
  },
  "api/VRLabs.ModularShaderSystem.ModularShader.Properties.html": {
    "href": "api/VRLabs.ModularShaderSystem.ModularShader.Properties.html",
    "title": "Field Properties | Modular Shader System Documentation",
    "keywords": "Field Properties List of properties defined. Namespace : VRLabs.ModularShaderSystem Syntax public List<Property> Properties Returns List < Property >"
  },
  "api/VRLabs.ModularShaderSystem.ModularShader.ShaderPath.html": {
    "href": "api/VRLabs.ModularShaderSystem.ModularShader.ShaderPath.html",
    "title": "Field ShaderPath | Modular Shader System Documentation",
    "keywords": "Field ShaderPath Path for the shader in the shader selector. Namespace : VRLabs.ModularShaderSystem Syntax public string ShaderPath Returns String"
  },
  "api/VRLabs.ModularShaderSystem.ModularShader.ShaderPropertiesTemplate.html": {
    "href": "api/VRLabs.ModularShaderSystem.ModularShader.ShaderPropertiesTemplate.html",
    "title": "Field ShaderPropertiesTemplate | Modular Shader System Documentation",
    "keywords": "Field ShaderPropertiesTemplate Template asset for defining properties. Namespace : VRLabs.ModularShaderSystem Syntax public TemplateAsset ShaderPropertiesTemplate Returns TemplateAsset"
  },
  "api/VRLabs.ModularShaderSystem.ModularShader.ShaderTemplate.html": {
    "href": "api/VRLabs.ModularShaderSystem.ModularShader.ShaderTemplate.html",
    "title": "Field ShaderTemplate | Modular Shader System Documentation",
    "keywords": "Field ShaderTemplate Main template asset for the shader. Namespace : VRLabs.ModularShaderSystem Syntax public TemplateAsset ShaderTemplate Returns TemplateAsset"
  },
  "api/VRLabs.ModularShaderSystem.ModularShader.UseTemplatesForProperties.html": {
    "href": "api/VRLabs.ModularShaderSystem.ModularShader.UseTemplatesForProperties.html",
    "title": "Field UseTemplatesForProperties | Modular Shader System Documentation",
    "keywords": "Field UseTemplatesForProperties Toggle to define if the modular shader can use templates to declare properties. Namespace : VRLabs.ModularShaderSystem Syntax public bool UseTemplatesForProperties Returns Boolean"
  },
  "api/VRLabs.ModularShaderSystem.ModularShader.Version.html": {
    "href": "api/VRLabs.ModularShaderSystem.ModularShader.Version.html",
    "title": "Field Version | Modular Shader System Documentation",
    "keywords": "Field Version Version of the modular shader. Namespace : VRLabs.ModularShaderSystem Syntax public string Version Returns String"
  },
  "api/VRLabs.ModularShaderSystem.ModuleTemplate.html": {
    "href": "api/VRLabs.ModularShaderSystem.ModuleTemplate.html",
    "title": "Class ModuleTemplate | Modular Shader System Documentation",
    "keywords": "Class ModuleTemplate Object indicating a template contained in a module that indicate what asset to use, in which keywords to add it to, and when to add it. Inheritance Object ModuleTemplate Namespace : VRLabs.ModularShaderSystem Syntax [Serializable] public class ModuleTemplate Fields Name Description Keywords List of keyword hooks NeedsVariant Boolean indicating if the template needs to generate it's own versions of the shader to toggle on and off the content of it. Queue Queue indicating when the template is processed by the generator. Template Template asset to use"
  },
  "api/VRLabs.ModularShaderSystem.ModuleTemplate.Keywords.html": {
    "href": "api/VRLabs.ModularShaderSystem.ModuleTemplate.Keywords.html",
    "title": "Field Keywords | Modular Shader System Documentation",
    "keywords": "Field Keywords List of keyword hooks Namespace : VRLabs.ModularShaderSystem Syntax [FormerlySerializedAs(\"Keyword\")] public List<string> Keywords Returns List < String >"
  },
  "api/VRLabs.ModularShaderSystem.ModuleTemplate.NeedsVariant.html": {
    "href": "api/VRLabs.ModularShaderSystem.ModuleTemplate.NeedsVariant.html",
    "title": "Field NeedsVariant | Modular Shader System Documentation",
    "keywords": "Field NeedsVariant Boolean indicating if the template needs to generate it's own versions of the shader to toggle on and off the content of it. Namespace : VRLabs.ModularShaderSystem Syntax [FormerlySerializedAs(\"IsCGOnly\")] public bool NeedsVariant Returns Boolean"
  },
  "api/VRLabs.ModularShaderSystem.ModuleTemplate.Queue.html": {
    "href": "api/VRLabs.ModularShaderSystem.ModuleTemplate.Queue.html",
    "title": "Field Queue | Modular Shader System Documentation",
    "keywords": "Field Queue Queue indicating when the template is processed by the generator. Namespace : VRLabs.ModularShaderSystem Syntax public int Queue Returns Int32"
  },
  "api/VRLabs.ModularShaderSystem.ModuleTemplate.Template.html": {
    "href": "api/VRLabs.ModularShaderSystem.ModuleTemplate.Template.html",
    "title": "Field Template | Modular Shader System Documentation",
    "keywords": "Field Template Template asset to use Namespace : VRLabs.ModularShaderSystem Syntax public TemplateAsset Template Returns TemplateAsset"
  },
  "api/VRLabs.ModularShaderSystem.MSSConstants.CREATE_PATH.html": {
    "href": "api/VRLabs.ModularShaderSystem.MSSConstants.CREATE_PATH.html",
    "title": "Field CREATE_PATH | Modular Shader System Documentation",
    "keywords": "Field CREATE_PATH Default path in the create menu to place all options related to asset creation (new templates, template collections, modules, modular shaders). Namespace : VRLabs.ModularShaderSystem Syntax public const string CREATE_PATH = \"VRLabs/Modular Shader\" Returns String"
  },
  "api/VRLabs.ModularShaderSystem.MSSConstants.DEFAULT_CODE_KEYWORD.html": {
    "href": "api/VRLabs.ModularShaderSystem.MSSConstants.DEFAULT_CODE_KEYWORD.html",
    "title": "Field DEFAULT_CODE_KEYWORD | Modular Shader System Documentation",
    "keywords": "Field DEFAULT_CODE_KEYWORD Default Keyword used for placing code templates, all modules that do not define custom keywords to place code templates will use this one. Namespace : VRLabs.ModularShaderSystem Syntax public const string DEFAULT_CODE_KEYWORD = \"DEFAULT_CODE\" Returns String"
  },
  "api/VRLabs.ModularShaderSystem.MSSConstants.DEFAULT_VARIABLES_KEYWORD.html": {
    "href": "api/VRLabs.ModularShaderSystem.MSSConstants.DEFAULT_VARIABLES_KEYWORD.html",
    "title": "Field DEFAULT_VARIABLES_KEYWORD | Modular Shader System Documentation",
    "keywords": "Field DEFAULT_VARIABLES_KEYWORD Default Keyword used for placing variables, all modules that do not define custom keywords to place variables will use this one. Namespace : VRLabs.ModularShaderSystem Syntax public const string DEFAULT_VARIABLES_KEYWORD = \"DEFAULT_VARIABLES\" Returns String"
  },
  "api/VRLabs.ModularShaderSystem.MSSConstants.html": {
    "href": "api/VRLabs.ModularShaderSystem.MSSConstants.html",
    "title": "Class MSSConstants | Modular Shader System Documentation",
    "keywords": "Class MSSConstants Constants used across the library. Inheritance Object MSSConstants Namespace : VRLabs.ModularShaderSystem Syntax public static class MSSConstants Remarks These constants are the default one used, when you embed the library you have the option to change these defaults to whatever you want Fields Name Description CREATE_PATH Default path in the create menu to place all options related to asset creation (new templates, template collections, modules, modular shaders). DEFAULT_CODE_KEYWORD Default Keyword used for placing code templates, all modules that do not define custom keywords to place code templates will use this one. DEFAULT_VARIABLES_KEYWORD Default Keyword used for placing variables, all modules that do not define custom keywords to place variables will use this one. RESOURCES_FOLDER Default name of the subfolder of the Resources folder containing all the resources needed for the library. TEMPLATE_COLLECTION_EXTENSION Default extension for template collections. TEMPLATE_EXTENSION Default extension for templates. TEMPLATE_PROPERTIES_KEYWORD Default Keyword used for placing properties from templates. WINDOW_PATH Default path in the menu to place all windows menu options."
  },
  "api/VRLabs.ModularShaderSystem.MSSConstants.RESOURCES_FOLDER.html": {
    "href": "api/VRLabs.ModularShaderSystem.MSSConstants.RESOURCES_FOLDER.html",
    "title": "Field RESOURCES_FOLDER | Modular Shader System Documentation",
    "keywords": "Field RESOURCES_FOLDER Default name of the subfolder of the Resources folder containing all the resources needed for the library. Namespace : VRLabs.ModularShaderSystem Syntax public const string RESOURCES_FOLDER = \"MSS\" Returns String Remarks A custom folder name is needed to differentiate different installed versions of the libraries from multiple shaders, you HAVE to use a different name when embedding the library to your shader project, or else conflicts may arise whenever someone who already has the official library will also download your shader, especially when the 2 versions don't match up."
  },
  "api/VRLabs.ModularShaderSystem.MSSConstants.TEMPLATE_COLLECTION_EXTENSION.html": {
    "href": "api/VRLabs.ModularShaderSystem.MSSConstants.TEMPLATE_COLLECTION_EXTENSION.html",
    "title": "Field TEMPLATE_COLLECTION_EXTENSION | Modular Shader System Documentation",
    "keywords": "Field TEMPLATE_COLLECTION_EXTENSION Default extension for template collections. Namespace : VRLabs.ModularShaderSystem Syntax public const string TEMPLATE_COLLECTION_EXTENSION = \"stemplatecollection\" Returns String"
  },
  "api/VRLabs.ModularShaderSystem.MSSConstants.TEMPLATE_EXTENSION.html": {
    "href": "api/VRLabs.ModularShaderSystem.MSSConstants.TEMPLATE_EXTENSION.html",
    "title": "Field TEMPLATE_EXTENSION | Modular Shader System Documentation",
    "keywords": "Field TEMPLATE_EXTENSION Default extension for templates. Namespace : VRLabs.ModularShaderSystem Syntax public const string TEMPLATE_EXTENSION = \"stemplate\" Returns String"
  },
  "api/VRLabs.ModularShaderSystem.MSSConstants.TEMPLATE_PROPERTIES_KEYWORD.html": {
    "href": "api/VRLabs.ModularShaderSystem.MSSConstants.TEMPLATE_PROPERTIES_KEYWORD.html",
    "title": "Field TEMPLATE_PROPERTIES_KEYWORD | Modular Shader System Documentation",
    "keywords": "Field TEMPLATE_PROPERTIES_KEYWORD Default Keyword used for placing properties from templates. Namespace : VRLabs.ModularShaderSystem Syntax public const string TEMPLATE_PROPERTIES_KEYWORD = \"SHADER_PROPERTIES\" Returns String"
  },
  "api/VRLabs.ModularShaderSystem.MSSConstants.WINDOW_PATH.html": {
    "href": "api/VRLabs.ModularShaderSystem.MSSConstants.WINDOW_PATH.html",
    "title": "Field WINDOW_PATH | Modular Shader System Documentation",
    "keywords": "Field WINDOW_PATH Default path in the menu to place all windows menu options. Namespace : VRLabs.ModularShaderSystem Syntax public const string WINDOW_PATH = \"VRLabs/Modular Shader\" Returns String"
  },
  "api/VRLabs.ModularShaderSystem.Property.Attributes.html": {
    "href": "api/VRLabs.ModularShaderSystem.Property.Attributes.html",
    "title": "Field Attributes | Modular Shader System Documentation",
    "keywords": "Field Attributes List of attributes for the shader property. Namespace : VRLabs.ModularShaderSystem Syntax public List<string> Attributes Returns List < String >"
  },
  "api/VRLabs.ModularShaderSystem.Property.DefaultTextureAsset.html": {
    "href": "api/VRLabs.ModularShaderSystem.Property.DefaultTextureAsset.html",
    "title": "Field DefaultTextureAsset | Modular Shader System Documentation",
    "keywords": "Field DefaultTextureAsset Default texture asset assigned to the property if it's a Texture2D or Texture3D; Namespace : VRLabs.ModularShaderSystem Syntax public Texture DefaultTextureAsset Returns Texture"
  },
  "api/VRLabs.ModularShaderSystem.Property.DefaultValue.html": {
    "href": "api/VRLabs.ModularShaderSystem.Property.DefaultValue.html",
    "title": "Field DefaultValue | Modular Shader System Documentation",
    "keywords": "Field DefaultValue Default value of the shader property. Namespace : VRLabs.ModularShaderSystem Syntax public string DefaultValue Returns String"
  },
  "api/VRLabs.ModularShaderSystem.Property.DisplayName.html": {
    "href": "api/VRLabs.ModularShaderSystem.Property.DisplayName.html",
    "title": "Field DisplayName | Modular Shader System Documentation",
    "keywords": "Field DisplayName Display name of the shader property. Namespace : VRLabs.ModularShaderSystem Syntax public string DisplayName Returns String"
  },
  "api/VRLabs.ModularShaderSystem.Property.Equals.html": {
    "href": "api/VRLabs.ModularShaderSystem.Property.Equals.html",
    "title": "Method Equals | Modular Shader System Documentation",
    "keywords": "Method Equals Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean Overrides Object.Equals(Object)"
  },
  "api/VRLabs.ModularShaderSystem.Property.GetHashCode.html": {
    "href": "api/VRLabs.ModularShaderSystem.Property.GetHashCode.html",
    "title": "Method GetHashCode | Modular Shader System Documentation",
    "keywords": "Method GetHashCode GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 Overrides Object.GetHashCode()"
  },
  "api/VRLabs.ModularShaderSystem.Property.html": {
    "href": "api/VRLabs.ModularShaderSystem.Property.html",
    "title": "Class Property | Modular Shader System Documentation",
    "keywords": "Class Property Shader property information. Inheritance Object Property EnableProperty EnableProperty Implements IEquatable < Property > Namespace : VRLabs.ModularShaderSystem Syntax [Serializable] public class Property : IEquatable<Property> Fields Name Description Attributes List of attributes for the shader property. DefaultTextureAsset Default texture asset assigned to the property if it's a Texture2D or Texture3D; DefaultValue Default value of the shader property. DisplayName Display name of the shader property. Name Name of the shader property. Type Type of the shader property. Methods Name Description Equals(Object) GetHashCode() ToVariable() Convert the property to a shader variable. Operators Name Description Equality(Property, Property) Inequality(Property, Property) Explicit Interface Implementations Name Description IEquatable<Property>.Equals(Property)"
  },
  "api/VRLabs.ModularShaderSystem.Property.Name.html": {
    "href": "api/VRLabs.ModularShaderSystem.Property.Name.html",
    "title": "Field Name | Modular Shader System Documentation",
    "keywords": "Field Name Name of the shader property. Namespace : VRLabs.ModularShaderSystem Syntax public string Name Returns String"
  },
  "api/VRLabs.ModularShaderSystem.Property.op_Equality.html": {
    "href": "api/VRLabs.ModularShaderSystem.Property.op_Equality.html",
    "title": "Operator Equality | Modular Shader System Documentation",
    "keywords": "Operator Equality Equality(Property, Property) Declaration public static bool operator ==(Property left, Property right) Parameters Type Name Description Property left Property right Returns Type Description Boolean"
  },
  "api/VRLabs.ModularShaderSystem.Property.op_Inequality.html": {
    "href": "api/VRLabs.ModularShaderSystem.Property.op_Inequality.html",
    "title": "Operator Inequality | Modular Shader System Documentation",
    "keywords": "Operator Inequality Inequality(Property, Property) Declaration public static bool operator !=(Property left, Property right) Parameters Type Name Description Property left Property right Returns Type Description Boolean"
  },
  "api/VRLabs.ModularShaderSystem.Property.System-IEquatable-VRLabs-ModularShaderSystem-Property--Equals.html": {
    "href": "api/VRLabs.ModularShaderSystem.Property.System-IEquatable-VRLabs-ModularShaderSystem-Property--Equals.html",
    "title": "Method IEquatable<Property>.Equals | Modular Shader System Documentation",
    "keywords": "Method IEquatable<Property>.Equals IEquatable<Property>.Equals(Property) Declaration bool IEquatable<Property>.Equals(Property other) Parameters Type Name Description Property other Returns Type Description Boolean Implements IEquatable<T>.Equals(T)"
  },
  "api/VRLabs.ModularShaderSystem.Property.ToVariable.html": {
    "href": "api/VRLabs.ModularShaderSystem.Property.ToVariable.html",
    "title": "Method ToVariable | Modular Shader System Documentation",
    "keywords": "Method ToVariable ToVariable() Convert the property to a shader variable. Declaration public virtual Variable ToVariable() Returns Type Description Variable A variable representing the the property in shader code."
  },
  "api/VRLabs.ModularShaderSystem.Property.Type.html": {
    "href": "api/VRLabs.ModularShaderSystem.Property.Type.html",
    "title": "Field Type | Modular Shader System Documentation",
    "keywords": "Field Type Type of the shader property. Namespace : VRLabs.ModularShaderSystem Syntax public string Type Returns String"
  },
  "api/VRLabs.ModularShaderSystem.PropertyType.html": {
    "href": "api/VRLabs.ModularShaderSystem.PropertyType.html",
    "title": "Enum PropertyType | Modular Shader System Documentation",
    "keywords": "Enum PropertyType Typed of shader properties. Namespace : VRLabs.ModularShaderSystem Syntax public enum PropertyType Fields Name Description Color Cube CubeArray Float Int Range Texture2D Texture2DArray Texture3D Vector"
  },
  "api/VRLabs.ModularShaderSystem.ShaderFunction.AppendAfter.html": {
    "href": "api/VRLabs.ModularShaderSystem.ShaderFunction.AppendAfter.html",
    "title": "Field AppendAfter | Modular Shader System Documentation",
    "keywords": "Field AppendAfter Function or keyword this function appends after. Namespace : VRLabs.ModularShaderSystem Syntax public string AppendAfter Returns String"
  },
  "api/VRLabs.ModularShaderSystem.ShaderFunction.CodeKeywords.html": {
    "href": "api/VRLabs.ModularShaderSystem.ShaderFunction.CodeKeywords.html",
    "title": "Field CodeKeywords | Modular Shader System Documentation",
    "keywords": "Field CodeKeywords Keywords used to place function code implementation. Namespace : VRLabs.ModularShaderSystem Syntax [FormerlySerializedAs(\"CodeSinkKeywords\")] [FormerlySerializedAs(\"CodeSinkKeyword\")] public List<string> CodeKeywords Returns List < String >"
  },
  "api/VRLabs.ModularShaderSystem.ShaderFunction.html": {
    "href": "api/VRLabs.ModularShaderSystem.ShaderFunction.html",
    "title": "Class ShaderFunction | Modular Shader System Documentation",
    "keywords": "Class ShaderFunction Function information for a shader module. Inheritance Object ShaderFunction Namespace : VRLabs.ModularShaderSystem Syntax [Serializable] public class ShaderFunction Fields Name Description AppendAfter Function or keyword this function appends after. CodeKeywords Keywords used to place function code implementation. Name Name of the function. Queue Order in which this function is evaluated respectively to their AppendAfter value. ShaderFunctionCode Template containing the function implementation. UsedVariables List of variables the functions uses. VariableKeywords Keywords used to place variable definitions."
  },
  "api/VRLabs.ModularShaderSystem.ShaderFunction.Name.html": {
    "href": "api/VRLabs.ModularShaderSystem.ShaderFunction.Name.html",
    "title": "Field Name | Modular Shader System Documentation",
    "keywords": "Field Name Name of the function. Namespace : VRLabs.ModularShaderSystem Syntax public string Name Returns String"
  },
  "api/VRLabs.ModularShaderSystem.ShaderFunction.Queue.html": {
    "href": "api/VRLabs.ModularShaderSystem.ShaderFunction.Queue.html",
    "title": "Field Queue | Modular Shader System Documentation",
    "keywords": "Field Queue Order in which this function is evaluated respectively to their AppendAfter value. Namespace : VRLabs.ModularShaderSystem Syntax [FormerlySerializedAs(\"Priority\")] public short Queue Returns Int16"
  },
  "api/VRLabs.ModularShaderSystem.ShaderFunction.ShaderFunctionCode.html": {
    "href": "api/VRLabs.ModularShaderSystem.ShaderFunction.ShaderFunctionCode.html",
    "title": "Field ShaderFunctionCode | Modular Shader System Documentation",
    "keywords": "Field ShaderFunctionCode Template containing the function implementation. Namespace : VRLabs.ModularShaderSystem Syntax public TemplateAsset ShaderFunctionCode Returns TemplateAsset"
  },
  "api/VRLabs.ModularShaderSystem.ShaderFunction.UsedVariables.html": {
    "href": "api/VRLabs.ModularShaderSystem.ShaderFunction.UsedVariables.html",
    "title": "Field UsedVariables | Modular Shader System Documentation",
    "keywords": "Field UsedVariables List of variables the functions uses. Namespace : VRLabs.ModularShaderSystem Syntax public List<Variable> UsedVariables Returns List < Variable >"
  },
  "api/VRLabs.ModularShaderSystem.ShaderFunction.VariableKeywords.html": {
    "href": "api/VRLabs.ModularShaderSystem.ShaderFunction.VariableKeywords.html",
    "title": "Field VariableKeywords | Modular Shader System Documentation",
    "keywords": "Field VariableKeywords Keywords used to place variable definitions. Namespace : VRLabs.ModularShaderSystem Syntax [FormerlySerializedAs(\"VariableSinkKeywords\")] [FormerlySerializedAs(\"VariableSinkKeyword\")] public List<string> VariableKeywords Returns List < String >"
  },
  "api/VRLabs.ModularShaderSystem.ShaderGenerator.CheckShaderIssues.html": {
    "href": "api/VRLabs.ModularShaderSystem.ShaderGenerator.CheckShaderIssues.html",
    "title": "Method CheckShaderIssues | Modular Shader System Documentation",
    "keywords": "Method CheckShaderIssues CheckShaderIssues(ModularShader) Checks for issues with the modular shader in its current state Declaration public static List<string> CheckShaderIssues(ModularShader shader) Parameters Type Name Description ModularShader shader Shader to check Returns Type Description List < String > A list of strings detailing all errors, or an empty list if there are no issues Remarks When you're making your own automatic generation system for your application, be sure to call this function before calling GenerateShader(String, ModularShader, Boolean) or and check for errors to be sure that there won't be issues with the generation of the shader file. CheckShaderIssues(List<ShaderModule>) Checks for issues with the given list of modules Declaration public static List<string> CheckShaderIssues(List<ShaderModule> modules) Parameters Type Name Description List < ShaderModule > modules Modules to check Returns Type Description List < String > A list of strings detailing all errors, or an empty list if there are no issues Remarks When you're making your own automatic generation system for your application, be sure to call this function before calling GenerateShader(String, ModularShader, Boolean) or and check for errors to be sure that there won't be issues with the generation of the shader file."
  },
  "api/VRLabs.ModularShaderSystem.ShaderGenerator.EnqueueShadersToGenerate.html": {
    "href": "api/VRLabs.ModularShaderSystem.ShaderGenerator.EnqueueShadersToGenerate.html",
    "title": "Method EnqueueShadersToGenerate | Modular Shader System Documentation",
    "keywords": "Method EnqueueShadersToGenerate EnqueueShadersToGenerate(String, ModularShader, IEnumerable<Material>, Action<StringBuilder, ShaderGenerator.ShaderContext>) Enqueues shaders to generate Declaration public static List<ShaderGenerator.ShaderContext> EnqueueShadersToGenerate(string path, ModularShader shader, IEnumerable<Material> materials, Action<StringBuilder, ShaderGenerator.ShaderContext> postGeneration = null) Parameters Type Name Description String path path for the shader files ModularShader shader Modular shader to use IEnumerable < Material > materials List of materials given Action < StringBuilder , ShaderGenerator.ShaderContext > postGeneration Actions to performs post generation and before cleanup Returns Type Description List < ShaderGenerator.ShaderContext > A list of the shaderContexts"
  },
  "api/VRLabs.ModularShaderSystem.ShaderGenerator.FindActiveModules.html": {
    "href": "api/VRLabs.ModularShaderSystem.ShaderGenerator.FindActiveModules.html",
    "title": "Method FindActiveModules | Modular Shader System Documentation",
    "keywords": "Method FindActiveModules FindActiveModules(ModularShader, Dictionary<String, Int32>) Find all active modules inside a specified shader. Declaration public static List<ShaderModule> FindActiveModules(ModularShader shader, Dictionary<string, int> activeEnablers) Parameters Type Name Description ModularShader shader Modular shader to check Dictionary < String , Int32 > activeEnablers Dictionary of active Property Enablers Returns Type Description List < ShaderModule > A list of active ShaderModule inside this shader"
  },
  "api/VRLabs.ModularShaderSystem.ShaderGenerator.FindAllFunctions.html": {
    "href": "api/VRLabs.ModularShaderSystem.ShaderGenerator.FindAllFunctions.html",
    "title": "Method FindAllFunctions | Modular Shader System Documentation",
    "keywords": "Method FindAllFunctions FindAllFunctions(ModularShader) Find all functions declared by all the modules inside a specified shader Declaration public static List<ShaderFunction> FindAllFunctions(ModularShader shader) Parameters Type Name Description ModularShader shader Modular shader to check Returns Type Description List < ShaderFunction > A list of ShaderFunction inside this shader"
  },
  "api/VRLabs.ModularShaderSystem.ShaderGenerator.FindAllModules.html": {
    "href": "api/VRLabs.ModularShaderSystem.ShaderGenerator.FindAllModules.html",
    "title": "Method FindAllModules | Modular Shader System Documentation",
    "keywords": "Method FindAllModules FindAllModules(ModularShader) Find all modules inside a specified shader. Declaration public static List<ShaderModule> FindAllModules(ModularShader shader) Parameters Type Name Description ModularShader shader Modular shader to check Returns Type Description List < ShaderModule > A list of ShaderModule inside this shader"
  },
  "api/VRLabs.ModularShaderSystem.ShaderGenerator.FindAllProperties.html": {
    "href": "api/VRLabs.ModularShaderSystem.ShaderGenerator.FindAllProperties.html",
    "title": "Method FindAllProperties | Modular Shader System Documentation",
    "keywords": "Method FindAllProperties FindAllProperties(ModularShader) Find all properties declared by the shader and its current modules Declaration public static List<Property> FindAllProperties(ModularShader shader) Parameters Type Name Description ModularShader shader Modular shader to check Returns Type Description List < Property > A list of Property contained in this shader"
  },
  "api/VRLabs.ModularShaderSystem.ShaderGenerator.GenerateMinimalShader.html": {
    "href": "api/VRLabs.ModularShaderSystem.ShaderGenerator.GenerateMinimalShader.html",
    "title": "Method GenerateMinimalShader | Modular Shader System Documentation",
    "keywords": "Method GenerateMinimalShader GenerateMinimalShader(String, ModularShader, IEnumerable<Material>, Action<StringBuilder, ShaderGenerator.ShaderContext>) Generates a shader for selected materials Declaration public static void GenerateMinimalShader(string path, ModularShader shader, IEnumerable<Material> materials, Action<StringBuilder, ShaderGenerator.ShaderContext> postGeneration = null) Parameters Type Name Description String path path for the shader files ModularShader shader Modular shader to use IEnumerable < Material > materials List of materials given Action < StringBuilder , ShaderGenerator.ShaderContext > postGeneration Actions to performs post generation and before cleanup"
  },
  "api/VRLabs.ModularShaderSystem.ShaderGenerator.GenerateMinimalShaders.html": {
    "href": "api/VRLabs.ModularShaderSystem.ShaderGenerator.GenerateMinimalShaders.html",
    "title": "Method GenerateMinimalShaders | Modular Shader System Documentation",
    "keywords": "Method GenerateMinimalShaders GenerateMinimalShaders(List<ShaderGenerator.ShaderContext>) Generates shaders from the given list of contexts Declaration public static void GenerateMinimalShaders(this List<ShaderGenerator.ShaderContext> contexts) Parameters Type Name Description List < ShaderGenerator.ShaderContext > contexts"
  },
  "api/VRLabs.ModularShaderSystem.ShaderGenerator.GenerateShader.html": {
    "href": "api/VRLabs.ModularShaderSystem.ShaderGenerator.GenerateShader.html",
    "title": "Method GenerateShader | Modular Shader System Documentation",
    "keywords": "Method GenerateShader GenerateShader(String, ModularShader, Boolean) Generates a shader with all shader variants Declaration public static void GenerateShader(string path, ModularShader shader, bool hideVariants = false) Parameters Type Name Description String path path of the folder to put the shader files ModularShader shader Modular shader to use Boolean hideVariants Hide variants from the shader selector on the material, showing only the shader with all variants disabled from the menu GenerateShader(String, ModularShader, Action<StringBuilder, ShaderGenerator.ShaderContext>, Boolean) Generates a shader with all shader variants, you can give a custom PostGeneration action to handle the shader result for some custom modifications (build keywords are still available at this stage) Declaration public static void GenerateShader(string path, ModularShader shader, Action<StringBuilder, ShaderGenerator.ShaderContext> postGeneration, bool hideVariants = false) Parameters Type Name Description String path path of the folder to put the shader files ModularShader shader Modular shader to use Action < StringBuilder , ShaderGenerator.ShaderContext > postGeneration Actions to performs post generation and before cleanup Boolean hideVariants Hide variants from the shader selector on the material, showing only the shader with all variants disabled from the menu"
  },
  "api/VRLabs.ModularShaderSystem.ShaderGenerator.GetVariantCode.html": {
    "href": "api/VRLabs.ModularShaderSystem.ShaderGenerator.GetVariantCode.html",
    "title": "Method GetVariantCode | Modular Shader System Documentation",
    "keywords": "Method GetVariantCode GetVariantCode(Dictionary<String, Int32>) Declaration public static string GetVariantCode(Dictionary<string, int> activeEnablers) Parameters Type Name Description Dictionary < String , Int32 > activeEnablers Returns Type Description String"
  },
  "api/VRLabs.ModularShaderSystem.ShaderGenerator.html": {
    "href": "api/VRLabs.ModularShaderSystem.ShaderGenerator.html",
    "title": "Class ShaderGenerator | Modular Shader System Documentation",
    "keywords": "Class ShaderGenerator Inheritance Object ShaderGenerator Namespace : VRLabs.ModularShaderSystem Syntax public static class ShaderGenerator Methods Name Description CheckShaderIssues(List<ShaderModule>) Checks for issues with the given list of modules CheckShaderIssues(ModularShader) Checks for issues with the modular shader in its current state EnqueueShadersToGenerate(String, ModularShader, IEnumerable<Material>, Action<StringBuilder, ShaderGenerator.ShaderContext>) Enqueues shaders to generate FindActiveModules(ModularShader, Dictionary<String, Int32>) Find all active modules inside a specified shader. FindAllFunctions(ModularShader) Find all functions declared by all the modules inside a specified shader FindAllModules(ModularShader) Find all modules inside a specified shader. FindAllProperties(ModularShader) Find all properties declared by the shader and its current modules GenerateMinimalShader(String, ModularShader, IEnumerable<Material>, Action<StringBuilder, ShaderGenerator.ShaderContext>) Generates a shader for selected materials GenerateMinimalShaders(List<ShaderGenerator.ShaderContext>) Generates shaders from the given list of contexts GenerateShader(String, ModularShader, Action<StringBuilder, ShaderGenerator.ShaderContext>, Boolean) Generates a shader with all shader variants, you can give a custom PostGeneration action to handle the shader result for some custom modifications (build keywords are still available at this stage) GenerateShader(String, ModularShader, Boolean) Generates a shader with all shader variants GetVariantCode(Dictionary<String, Int32>)"
  },
  "api/VRLabs.ModularShaderSystem.ShaderGenerator.ShaderContext.ActiveEnablers.html": {
    "href": "api/VRLabs.ModularShaderSystem.ShaderGenerator.ShaderContext.ActiveEnablers.html",
    "title": "Field ActiveEnablers | Modular Shader System Documentation",
    "keywords": "Field ActiveEnablers Namespace : VRLabs.ModularShaderSystem Syntax public Dictionary<string, int> ActiveEnablers Returns Dictionary < String , Int32 >"
  },
  "api/VRLabs.ModularShaderSystem.ShaderGenerator.ShaderContext.AreVariantsHidden.html": {
    "href": "api/VRLabs.ModularShaderSystem.ShaderGenerator.ShaderContext.AreVariantsHidden.html",
    "title": "Field AreVariantsHidden | Modular Shader System Documentation",
    "keywords": "Field AreVariantsHidden Namespace : VRLabs.ModularShaderSystem Syntax public bool AreVariantsHidden Returns Boolean"
  },
  "api/VRLabs.ModularShaderSystem.ShaderGenerator.ShaderContext.FilePath.html": {
    "href": "api/VRLabs.ModularShaderSystem.ShaderGenerator.ShaderContext.FilePath.html",
    "title": "Field FilePath | Modular Shader System Documentation",
    "keywords": "Field FilePath Namespace : VRLabs.ModularShaderSystem Syntax public string FilePath Returns String"
  },
  "api/VRLabs.ModularShaderSystem.ShaderGenerator.ShaderContext.FreshAssets.html": {
    "href": "api/VRLabs.ModularShaderSystem.ShaderGenerator.ShaderContext.FreshAssets.html",
    "title": "Field FreshAssets | Modular Shader System Documentation",
    "keywords": "Field FreshAssets Namespace : VRLabs.ModularShaderSystem Syntax public Dictionary<TemplateAsset, TemplateAsset> FreshAssets Returns Dictionary < TemplateAsset , TemplateAsset >"
  },
  "api/VRLabs.ModularShaderSystem.ShaderGenerator.ShaderContext.GenerateShader.html": {
    "href": "api/VRLabs.ModularShaderSystem.ShaderGenerator.ShaderContext.GenerateShader.html",
    "title": "Method GenerateShader | Modular Shader System Documentation",
    "keywords": "Method GenerateShader GenerateShader() Declaration public void GenerateShader()"
  },
  "api/VRLabs.ModularShaderSystem.ShaderGenerator.ShaderContext.Guid.html": {
    "href": "api/VRLabs.ModularShaderSystem.ShaderGenerator.ShaderContext.Guid.html",
    "title": "Field Guid | Modular Shader System Documentation",
    "keywords": "Field Guid Namespace : VRLabs.ModularShaderSystem Syntax public string Guid Returns String"
  },
  "api/VRLabs.ModularShaderSystem.ShaderGenerator.ShaderContext.html": {
    "href": "api/VRLabs.ModularShaderSystem.ShaderGenerator.ShaderContext.html",
    "title": "Class ShaderGenerator.ShaderContext | Modular Shader System Documentation",
    "keywords": "Class ShaderGenerator.ShaderContext Inheritance Object ShaderGenerator.ShaderContext Namespace : VRLabs.ModularShaderSystem Syntax public class ShaderContext Fields Name Description ActiveEnablers AreVariantsHidden FilePath FreshAssets Guid Materials OptimizedShader PostGeneration PropertiesBlock Shader ShaderFile ShaderName VariantFileName VariantName Properties Name Description Modules Methods Name Description GenerateShader()"
  },
  "api/VRLabs.ModularShaderSystem.ShaderGenerator.ShaderContext.Materials.html": {
    "href": "api/VRLabs.ModularShaderSystem.ShaderGenerator.ShaderContext.Materials.html",
    "title": "Field Materials | Modular Shader System Documentation",
    "keywords": "Field Materials Namespace : VRLabs.ModularShaderSystem Syntax public List<Material> Materials Returns List < Material >"
  },
  "api/VRLabs.ModularShaderSystem.ShaderGenerator.ShaderContext.Modules.html": {
    "href": "api/VRLabs.ModularShaderSystem.ShaderGenerator.ShaderContext.Modules.html",
    "title": "Property Modules | Modular Shader System Documentation",
    "keywords": "Property Modules Modules Declaration public List<ShaderModule> Modules { get; } Property Value Type Description List < ShaderModule >"
  },
  "api/VRLabs.ModularShaderSystem.ShaderGenerator.ShaderContext.OptimizedShader.html": {
    "href": "api/VRLabs.ModularShaderSystem.ShaderGenerator.ShaderContext.OptimizedShader.html",
    "title": "Field OptimizedShader | Modular Shader System Documentation",
    "keywords": "Field OptimizedShader Namespace : VRLabs.ModularShaderSystem Syntax public bool OptimizedShader Returns Boolean"
  },
  "api/VRLabs.ModularShaderSystem.ShaderGenerator.ShaderContext.PostGeneration.html": {
    "href": "api/VRLabs.ModularShaderSystem.ShaderGenerator.ShaderContext.PostGeneration.html",
    "title": "Field PostGeneration | Modular Shader System Documentation",
    "keywords": "Field PostGeneration Namespace : VRLabs.ModularShaderSystem Syntax public Action<StringBuilder, ShaderGenerator.ShaderContext> PostGeneration Returns Action < StringBuilder , ShaderGenerator.ShaderContext >"
  },
  "api/VRLabs.ModularShaderSystem.ShaderGenerator.ShaderContext.PropertiesBlock.html": {
    "href": "api/VRLabs.ModularShaderSystem.ShaderGenerator.ShaderContext.PropertiesBlock.html",
    "title": "Field PropertiesBlock | Modular Shader System Documentation",
    "keywords": "Field PropertiesBlock Namespace : VRLabs.ModularShaderSystem Syntax public string PropertiesBlock Returns String"
  },
  "api/VRLabs.ModularShaderSystem.ShaderGenerator.ShaderContext.Shader.html": {
    "href": "api/VRLabs.ModularShaderSystem.ShaderGenerator.ShaderContext.Shader.html",
    "title": "Field Shader | Modular Shader System Documentation",
    "keywords": "Field Shader Namespace : VRLabs.ModularShaderSystem Syntax public ModularShader Shader Returns ModularShader"
  },
  "api/VRLabs.ModularShaderSystem.ShaderGenerator.ShaderContext.ShaderFile.html": {
    "href": "api/VRLabs.ModularShaderSystem.ShaderGenerator.ShaderContext.ShaderFile.html",
    "title": "Field ShaderFile | Modular Shader System Documentation",
    "keywords": "Field ShaderFile Namespace : VRLabs.ModularShaderSystem Syntax public StringBuilder ShaderFile Returns StringBuilder"
  },
  "api/VRLabs.ModularShaderSystem.ShaderGenerator.ShaderContext.ShaderName.html": {
    "href": "api/VRLabs.ModularShaderSystem.ShaderGenerator.ShaderContext.ShaderName.html",
    "title": "Field ShaderName | Modular Shader System Documentation",
    "keywords": "Field ShaderName Namespace : VRLabs.ModularShaderSystem Syntax public string ShaderName Returns String"
  },
  "api/VRLabs.ModularShaderSystem.ShaderGenerator.ShaderContext.VariantFileName.html": {
    "href": "api/VRLabs.ModularShaderSystem.ShaderGenerator.ShaderContext.VariantFileName.html",
    "title": "Field VariantFileName | Modular Shader System Documentation",
    "keywords": "Field VariantFileName Namespace : VRLabs.ModularShaderSystem Syntax public string VariantFileName Returns String"
  },
  "api/VRLabs.ModularShaderSystem.ShaderGenerator.ShaderContext.VariantName.html": {
    "href": "api/VRLabs.ModularShaderSystem.ShaderGenerator.ShaderContext.VariantName.html",
    "title": "Field VariantName | Modular Shader System Documentation",
    "keywords": "Field VariantName Namespace : VRLabs.ModularShaderSystem Syntax public string VariantName Returns String"
  },
  "api/VRLabs.ModularShaderSystem.ShaderModule.AdditionalSerializedData.html": {
    "href": "api/VRLabs.ModularShaderSystem.ShaderModule.AdditionalSerializedData.html",
    "title": "Field AdditionalSerializedData | Modular Shader System Documentation",
    "keywords": "Field AdditionalSerializedData string that can contain whatever you want, it is originally intended to contain serialized data that you may need for your own custom system based on the modular shader system. Namespace : VRLabs.ModularShaderSystem Syntax [HideInInspector] public string AdditionalSerializedData Returns String"
  },
  "api/VRLabs.ModularShaderSystem.ShaderModule.Author.html": {
    "href": "api/VRLabs.ModularShaderSystem.ShaderModule.Author.html",
    "title": "Field Author | Modular Shader System Documentation",
    "keywords": "Field Author Author of the shader module. Namespace : VRLabs.ModularShaderSystem Syntax public string Author Returns String"
  },
  "api/VRLabs.ModularShaderSystem.ShaderModule.Description.html": {
    "href": "api/VRLabs.ModularShaderSystem.ShaderModule.Description.html",
    "title": "Field Description | Modular Shader System Documentation",
    "keywords": "Field Description Description of the shader model. Namespace : VRLabs.ModularShaderSystem Syntax public string Description Returns String"
  },
  "api/VRLabs.ModularShaderSystem.ShaderModule.EnableProperties.html": {
    "href": "api/VRLabs.ModularShaderSystem.ShaderModule.EnableProperties.html",
    "title": "Field EnableProperties | Modular Shader System Documentation",
    "keywords": "Field EnableProperties List of properties declared by the module. Namespace : VRLabs.ModularShaderSystem Syntax public List<EnableProperty> EnableProperties Returns List < EnableProperty >"
  },
  "api/VRLabs.ModularShaderSystem.ShaderModule.Functions.html": {
    "href": "api/VRLabs.ModularShaderSystem.ShaderModule.Functions.html",
    "title": "Field Functions | Modular Shader System Documentation",
    "keywords": "Field Functions List functions this shader module uses. Namespace : VRLabs.ModularShaderSystem Syntax public List<ShaderFunction> Functions Returns List < ShaderFunction >"
  },
  "api/VRLabs.ModularShaderSystem.ShaderModule.html": {
    "href": "api/VRLabs.ModularShaderSystem.ShaderModule.html",
    "title": "Class ShaderModule | Modular Shader System Documentation",
    "keywords": "Class ShaderModule Asset containing a module to add features to a shader. Inheritance Object Object ScriptableObject ShaderModule Namespace : VRLabs.ModularShaderSystem Syntax [CreateAssetMenu(fileName = \"ShaderModule\", menuName = \"VRLabs/Modular Shader/Shader Module\", order = 0)] public class ShaderModule : ScriptableObject Fields Name Description AdditionalSerializedData string that can contain whatever you want, it is originally intended to contain serialized data that you may need for your own custom system based on the modular shader system. Author Author of the shader module. Description Description of the shader model. EnableProperties List of properties declared by the module. Functions List functions this shader module uses. Id Id of the shader module. IncompatibleWith List of ids of shader modules this shader module is incompatible. ModuleDependencies List of ids of shader modules this shader module depends on. Name Name of the shader module. Properties List of properties declared by the module. Templates List of templates this shader module uses. Version Version of the shader module."
  },
  "api/VRLabs.ModularShaderSystem.ShaderModule.Id.html": {
    "href": "api/VRLabs.ModularShaderSystem.ShaderModule.Id.html",
    "title": "Field Id | Modular Shader System Documentation",
    "keywords": "Field Id Id of the shader module. Namespace : VRLabs.ModularShaderSystem Syntax public string Id Returns String"
  },
  "api/VRLabs.ModularShaderSystem.ShaderModule.IncompatibleWith.html": {
    "href": "api/VRLabs.ModularShaderSystem.ShaderModule.IncompatibleWith.html",
    "title": "Field IncompatibleWith | Modular Shader System Documentation",
    "keywords": "Field IncompatibleWith List of ids of shader modules this shader module is incompatible. Namespace : VRLabs.ModularShaderSystem Syntax public List<string> IncompatibleWith Returns List < String >"
  },
  "api/VRLabs.ModularShaderSystem.ShaderModule.ModuleDependencies.html": {
    "href": "api/VRLabs.ModularShaderSystem.ShaderModule.ModuleDependencies.html",
    "title": "Field ModuleDependencies | Modular Shader System Documentation",
    "keywords": "Field ModuleDependencies List of ids of shader modules this shader module depends on. Namespace : VRLabs.ModularShaderSystem Syntax public List<string> ModuleDependencies Returns List < String >"
  },
  "api/VRLabs.ModularShaderSystem.ShaderModule.Name.html": {
    "href": "api/VRLabs.ModularShaderSystem.ShaderModule.Name.html",
    "title": "Field Name | Modular Shader System Documentation",
    "keywords": "Field Name Name of the shader module. Namespace : VRLabs.ModularShaderSystem Syntax public string Name Returns String"
  },
  "api/VRLabs.ModularShaderSystem.ShaderModule.Properties.html": {
    "href": "api/VRLabs.ModularShaderSystem.ShaderModule.Properties.html",
    "title": "Field Properties | Modular Shader System Documentation",
    "keywords": "Field Properties List of properties declared by the module. Namespace : VRLabs.ModularShaderSystem Syntax public List<Property> Properties Returns List < Property >"
  },
  "api/VRLabs.ModularShaderSystem.ShaderModule.Templates.html": {
    "href": "api/VRLabs.ModularShaderSystem.ShaderModule.Templates.html",
    "title": "Field Templates | Modular Shader System Documentation",
    "keywords": "Field Templates List of templates this shader module uses. Namespace : VRLabs.ModularShaderSystem Syntax public List<ModuleTemplate> Templates Returns List < ModuleTemplate >"
  },
  "api/VRLabs.ModularShaderSystem.ShaderModule.Version.html": {
    "href": "api/VRLabs.ModularShaderSystem.ShaderModule.Version.html",
    "title": "Field Version | Modular Shader System Documentation",
    "keywords": "Field Version Version of the shader module. Namespace : VRLabs.ModularShaderSystem Syntax public string Version Returns String"
  },
  "api/VRLabs.ModularShaderSystem.ShaderStringBuilderExtensions.AppendLineTabbed.html": {
    "href": "api/VRLabs.ModularShaderSystem.ShaderStringBuilderExtensions.AppendLineTabbed.html",
    "title": "Method AppendLineTabbed | Modular Shader System Documentation",
    "keywords": "Method AppendLineTabbed AppendLineTabbed(StringBuilder, Int32, String) Appends a line to the StringBuilder with a specific tab level attached. Declaration public static StringBuilder AppendLineTabbed(this StringBuilder builder, int tabLevel, string value) Parameters Type Name Description StringBuilder builder Builder to use Int32 tabLevel number of tabs String value string to append Returns Type Description StringBuilder The StringBuilder used"
  },
  "api/VRLabs.ModularShaderSystem.ShaderStringBuilderExtensions.AppendMultilineTabbed.html": {
    "href": "api/VRLabs.ModularShaderSystem.ShaderStringBuilderExtensions.AppendMultilineTabbed.html",
    "title": "Method AppendMultilineTabbed | Modular Shader System Documentation",
    "keywords": "Method AppendMultilineTabbed AppendMultilineTabbed(StringBuilder, Int32, String) Appends mulltiple lines to the StringBuilder with a specific tab level attached. Declaration public static StringBuilder AppendMultilineTabbed(this StringBuilder builder, int tabLevel, string value) Parameters Type Name Description StringBuilder builder Builder to use Int32 tabLevel number of tabs String value multiline string to append Returns Type Description StringBuilder The StringBuilder used"
  },
  "api/VRLabs.ModularShaderSystem.ShaderStringBuilderExtensions.AppendTabbed.html": {
    "href": "api/VRLabs.ModularShaderSystem.ShaderStringBuilderExtensions.AppendTabbed.html",
    "title": "Method AppendTabbed | Modular Shader System Documentation",
    "keywords": "Method AppendTabbed AppendTabbed(StringBuilder, Int32, String) Appends a string to the StringBuilder with a specific tab level attached. Declaration public static StringBuilder AppendTabbed(this StringBuilder builder, int tabLevel, string value) Parameters Type Name Description StringBuilder builder Builder to use Int32 tabLevel number of tabs String value string to append Returns Type Description StringBuilder The StringBuilder used"
  },
  "api/VRLabs.ModularShaderSystem.ShaderStringBuilderExtensions.Contains.html": {
    "href": "api/VRLabs.ModularShaderSystem.ShaderStringBuilderExtensions.Contains.html",
    "title": "Method Contains | Modular Shader System Documentation",
    "keywords": "Method Contains Contains(StringBuilder, String) Checks if a StringBuilder contains a specific string Declaration public static bool Contains(this StringBuilder haystack, string needle) Parameters Type Name Description StringBuilder haystack The StringBuilder to use String needle The string to search Returns Type Description Boolean True it The StringBuilder contains the string, false otherwise Remarks This has been shamelessly copy pasted from here: https://stackoverflow.com/questions/12261344/fastest-search-method-in-stringbuilder"
  },
  "api/VRLabs.ModularShaderSystem.ShaderStringBuilderExtensions.html": {
    "href": "api/VRLabs.ModularShaderSystem.ShaderStringBuilderExtensions.html",
    "title": "Class ShaderStringBuilderExtensions | Modular Shader System Documentation",
    "keywords": "Class ShaderStringBuilderExtensions Static class that adds extension methods for the StringBuilder, used mainly in the shader generator for writing down the shader file Inheritance Object ShaderStringBuilderExtensions Namespace : VRLabs.ModularShaderSystem Syntax public static class ShaderStringBuilderExtensions Methods Name Description AppendLineTabbed(StringBuilder, Int32, String) Appends a line to the StringBuilder with a specific tab level attached. AppendMultilineTabbed(StringBuilder, Int32, String) Appends mulltiple lines to the StringBuilder with a specific tab level attached. AppendTabbed(StringBuilder, Int32, String) Appends a string to the StringBuilder with a specific tab level attached. Contains(StringBuilder, String) Checks if a StringBuilder contains a specific string IndexOf(StringBuilder, String) Get the index of the first match of a string Prepend(StringBuilder, String) Prepends a string to the StringBuilder. PrependLine(StringBuilder, String) Prepends a line to the StringBuilder. PrependLineTabbed(StringBuilder, Int32, String) Prepends a line to the StringBuilder with a specific tab level attached. PrependTabbed(StringBuilder, Int32, String) Prepends a string to the StringBuilder with a specific tab level attached."
  },
  "api/VRLabs.ModularShaderSystem.ShaderStringBuilderExtensions.IndexOf.html": {
    "href": "api/VRLabs.ModularShaderSystem.ShaderStringBuilderExtensions.IndexOf.html",
    "title": "Method IndexOf | Modular Shader System Documentation",
    "keywords": "Method IndexOf IndexOf(StringBuilder, String) Get the index of the first match of a string Declaration public static int IndexOf(this StringBuilder haystack, string needle) Parameters Type Name Description StringBuilder haystack The StringBuilder to use String needle The string to search Returns Type Description Int32 The index of the first match Remarks This has been shamelessly copy pasted from here: https://stackoverflow.com/questions/12261344/fastest-search-method-in-stringbuilder Exceptions Type Condition ArgumentNullException"
  },
  "api/VRLabs.ModularShaderSystem.ShaderStringBuilderExtensions.Prepend.html": {
    "href": "api/VRLabs.ModularShaderSystem.ShaderStringBuilderExtensions.Prepend.html",
    "title": "Method Prepend | Modular Shader System Documentation",
    "keywords": "Method Prepend Prepend(StringBuilder, String) Prepends a string to the StringBuilder. Declaration public static StringBuilder Prepend(this StringBuilder builder, string value) Parameters Type Name Description StringBuilder builder Builder to use String value string to prepend Returns Type Description StringBuilder The StringBuilder used"
  },
  "api/VRLabs.ModularShaderSystem.ShaderStringBuilderExtensions.PrependLine.html": {
    "href": "api/VRLabs.ModularShaderSystem.ShaderStringBuilderExtensions.PrependLine.html",
    "title": "Method PrependLine | Modular Shader System Documentation",
    "keywords": "Method PrependLine PrependLine(StringBuilder, String) Prepends a line to the StringBuilder. Declaration public static StringBuilder PrependLine(this StringBuilder builder, string value) Parameters Type Name Description StringBuilder builder Builder to use String value string to prepend Returns Type Description StringBuilder The StringBuilder used"
  },
  "api/VRLabs.ModularShaderSystem.ShaderStringBuilderExtensions.PrependLineTabbed.html": {
    "href": "api/VRLabs.ModularShaderSystem.ShaderStringBuilderExtensions.PrependLineTabbed.html",
    "title": "Method PrependLineTabbed | Modular Shader System Documentation",
    "keywords": "Method PrependLineTabbed PrependLineTabbed(StringBuilder, Int32, String) Prepends a line to the StringBuilder with a specific tab level attached. Declaration public static StringBuilder PrependLineTabbed(this StringBuilder builder, int tabLevel, string value) Parameters Type Name Description StringBuilder builder Builder to use Int32 tabLevel number of tabs String value string to prepend Returns Type Description StringBuilder The StringBuilder used"
  },
  "api/VRLabs.ModularShaderSystem.ShaderStringBuilderExtensions.PrependTabbed.html": {
    "href": "api/VRLabs.ModularShaderSystem.ShaderStringBuilderExtensions.PrependTabbed.html",
    "title": "Method PrependTabbed | Modular Shader System Documentation",
    "keywords": "Method PrependTabbed PrependTabbed(StringBuilder, Int32, String) Prepends a string to the StringBuilder with a specific tab level attached. Declaration public static StringBuilder PrependTabbed(this StringBuilder builder, int tabLevel, string value) Parameters Type Name Description StringBuilder builder Builder to use Int32 tabLevel number of tabs String value string to prepend Returns Type Description StringBuilder The StringBuilder used"
  },
  "api/VRLabs.ModularShaderSystem.TemplateAsset.-ctor.html": {
    "href": "api/VRLabs.ModularShaderSystem.TemplateAsset.-ctor.html",
    "title": "Constructor TemplateAsset | Modular Shader System Documentation",
    "keywords": "Constructor TemplateAsset TemplateAsset(String) Declaration public TemplateAsset(string template) Parameters Type Name Description String template TemplateAsset() Declaration public TemplateAsset()"
  },
  "api/VRLabs.ModularShaderSystem.TemplateAsset.html": {
    "href": "api/VRLabs.ModularShaderSystem.TemplateAsset.html",
    "title": "Class TemplateAsset | Modular Shader System Documentation",
    "keywords": "Class TemplateAsset Asset containing shader code that is used around the modular shader system. Inheritance Object Object ScriptableObject TemplateAsset Namespace : VRLabs.ModularShaderSystem Syntax public class TemplateAsset : ScriptableObject Constructors Name Description TemplateAsset() TemplateAsset(String) Fields Name Description Keywords Keywords found in the template Template Template string."
  },
  "api/VRLabs.ModularShaderSystem.TemplateAsset.Keywords.html": {
    "href": "api/VRLabs.ModularShaderSystem.TemplateAsset.Keywords.html",
    "title": "Field Keywords | Modular Shader System Documentation",
    "keywords": "Field Keywords Keywords found in the template Namespace : VRLabs.ModularShaderSystem Syntax public string[] Keywords Returns String []"
  },
  "api/VRLabs.ModularShaderSystem.TemplateAsset.Template.html": {
    "href": "api/VRLabs.ModularShaderSystem.TemplateAsset.Template.html",
    "title": "Field Template | Modular Shader System Documentation",
    "keywords": "Field Template Template string. Namespace : VRLabs.ModularShaderSystem Syntax public string Template Returns String"
  },
  "api/VRLabs.ModularShaderSystem.TemplateAssetImporter.html": {
    "href": "api/VRLabs.ModularShaderSystem.TemplateAssetImporter.html",
    "title": "Class TemplateAssetImporter | Modular Shader System Documentation",
    "keywords": "Class TemplateAssetImporter Scripted importer for the template asset Inheritance Object Object AssetImporter ScriptedImporter TemplateAssetImporter Namespace : VRLabs.ModularShaderSystem Syntax [ScriptedImporter(1, \"stemplate\")] public class TemplateAssetImporter : ScriptedImporter Methods Name Description OnImportAsset(AssetImportContext) SupportsRemappedAssetType(Type)"
  },
  "api/VRLabs.ModularShaderSystem.TemplateAssetImporter.OnImportAsset.html": {
    "href": "api/VRLabs.ModularShaderSystem.TemplateAssetImporter.OnImportAsset.html",
    "title": "Method OnImportAsset | Modular Shader System Documentation",
    "keywords": "Method OnImportAsset OnImportAsset(AssetImportContext) Declaration public override void OnImportAsset(AssetImportContext ctx) Parameters Type Name Description AssetImportContext ctx Overrides ScriptedImporter.OnImportAsset(AssetImportContext)"
  },
  "api/VRLabs.ModularShaderSystem.TemplateAssetImporter.SupportsRemappedAssetType.html": {
    "href": "api/VRLabs.ModularShaderSystem.TemplateAssetImporter.SupportsRemappedAssetType.html",
    "title": "Method SupportsRemappedAssetType | Modular Shader System Documentation",
    "keywords": "Method SupportsRemappedAssetType SupportsRemappedAssetType(Type) Declaration public override bool SupportsRemappedAssetType(Type type) Parameters Type Name Description Type type Returns Type Description Boolean Overrides ScriptedImporter.SupportsRemappedAssetType(Type)"
  },
  "api/VRLabs.ModularShaderSystem.TemplateCollectionAsset.-ctor.html": {
    "href": "api/VRLabs.ModularShaderSystem.TemplateCollectionAsset.-ctor.html",
    "title": "Constructor TemplateCollectionAsset | Modular Shader System Documentation",
    "keywords": "Constructor TemplateCollectionAsset TemplateCollectionAsset() Declaration public TemplateCollectionAsset()"
  },
  "api/VRLabs.ModularShaderSystem.TemplateCollectionAsset.html": {
    "href": "api/VRLabs.ModularShaderSystem.TemplateCollectionAsset.html",
    "title": "Class TemplateCollectionAsset | Modular Shader System Documentation",
    "keywords": "Class TemplateCollectionAsset Asset containing multiple templates separated by special keywords. Inheritance Object Object ScriptableObject TemplateCollectionAsset Namespace : VRLabs.ModularShaderSystem Syntax public class TemplateCollectionAsset : ScriptableObject Remarks Each template is marked by starting a \"#T#TEMPLATE_NAME\" and ends whenever a new template keyword is declared or the end of the file. Constructors Name Description TemplateCollectionAsset() Fields Name Description Templates List of templates contained in this collection."
  },
  "api/VRLabs.ModularShaderSystem.TemplateCollectionAsset.Templates.html": {
    "href": "api/VRLabs.ModularShaderSystem.TemplateCollectionAsset.Templates.html",
    "title": "Field Templates | Modular Shader System Documentation",
    "keywords": "Field Templates List of templates contained in this collection. Namespace : VRLabs.ModularShaderSystem Syntax public List<TemplateAsset> Templates Returns List < TemplateAsset >"
  },
  "api/VRLabs.ModularShaderSystem.TemplateColletionAssetImporter.html": {
    "href": "api/VRLabs.ModularShaderSystem.TemplateColletionAssetImporter.html",
    "title": "Class TemplateColletionAssetImporter | Modular Shader System Documentation",
    "keywords": "Class TemplateColletionAssetImporter Scripted importer for the template collection. Inheritance Object Object AssetImporter ScriptedImporter TemplateColletionAssetImporter Namespace : VRLabs.ModularShaderSystem Syntax [ScriptedImporter(1, \"stemplatecollection\")] public class TemplateColletionAssetImporter : ScriptedImporter Methods Name Description OnImportAsset(AssetImportContext) SupportsRemappedAssetType(Type)"
  },
  "api/VRLabs.ModularShaderSystem.TemplateColletionAssetImporter.OnImportAsset.html": {
    "href": "api/VRLabs.ModularShaderSystem.TemplateColletionAssetImporter.OnImportAsset.html",
    "title": "Method OnImportAsset | Modular Shader System Documentation",
    "keywords": "Method OnImportAsset OnImportAsset(AssetImportContext) Declaration public override void OnImportAsset(AssetImportContext ctx) Parameters Type Name Description AssetImportContext ctx Overrides ScriptedImporter.OnImportAsset(AssetImportContext)"
  },
  "api/VRLabs.ModularShaderSystem.TemplateColletionAssetImporter.SupportsRemappedAssetType.html": {
    "href": "api/VRLabs.ModularShaderSystem.TemplateColletionAssetImporter.SupportsRemappedAssetType.html",
    "title": "Method SupportsRemappedAssetType | Modular Shader System Documentation",
    "keywords": "Method SupportsRemappedAssetType SupportsRemappedAssetType(Type) Declaration public override bool SupportsRemappedAssetType(Type type) Parameters Type Name Description Type type Returns Type Description Boolean Overrides ScriptedImporter.SupportsRemappedAssetType(Type)"
  },
  "api/VRLabs.ModularShaderSystem.Tools.EmbedLibraryWindow.CreateGUI.html": {
    "href": "api/VRLabs.ModularShaderSystem.Tools.EmbedLibraryWindow.CreateGUI.html",
    "title": "Method CreateGUI | Modular Shader System Documentation",
    "keywords": "Method CreateGUI CreateGUI() Declaration public void CreateGUI()"
  },
  "api/VRLabs.ModularShaderSystem.Tools.EmbedLibraryWindow.CreateWindow.html": {
    "href": "api/VRLabs.ModularShaderSystem.Tools.EmbedLibraryWindow.CreateWindow.html",
    "title": "Method CreateWindow | Modular Shader System Documentation",
    "keywords": "Method CreateWindow CreateWindow() Declaration [MenuItem(\"VRLabs/Modular Shader/Tools/Embed Library\", priority = 102)] public static void CreateWindow()"
  },
  "api/VRLabs.ModularShaderSystem.Tools.EmbedLibraryWindow.html": {
    "href": "api/VRLabs.ModularShaderSystem.Tools.EmbedLibraryWindow.html",
    "title": "Class EmbedLibraryWindow | Modular Shader System Documentation",
    "keywords": "Class EmbedLibraryWindow Editor window to let users embed the modular shader system into another library. Inheritance Object Object ScriptableObject EditorWindow EmbedLibraryWindow Namespace : VRLabs.ModularShaderSystem.Tools Syntax public class EmbedLibraryWindow : EditorWindow Methods Name Description CreateGUI() CreateWindow()"
  },
  "api/VRLabs.ModularShaderSystem.Tools.html": {
    "href": "api/VRLabs.ModularShaderSystem.Tools.html",
    "title": "Namespace VRLabs.ModularShaderSystem.Tools | Modular Shader System Documentation",
    "keywords": "Namespace VRLabs.ModularShaderSystem.Tools Classes EmbedLibraryWindow Editor window to let users embed the modular shader system into another library."
  },
  "api/VRLabs.ModularShaderSystem.UI.CodeViewElement.-ctor.html": {
    "href": "api/VRLabs.ModularShaderSystem.UI.CodeViewElement.-ctor.html",
    "title": "Constructor CodeViewElement | Modular Shader System Documentation",
    "keywords": "Constructor CodeViewElement CodeViewElement() Default constructor of CodeViewElement Declaration public CodeViewElement()"
  },
  "api/VRLabs.ModularShaderSystem.UI.CodeViewElement.html": {
    "href": "api/VRLabs.ModularShaderSystem.UI.CodeViewElement.html",
    "title": "Class CodeViewElement | Modular Shader System Documentation",
    "keywords": "Class CodeViewElement VisualElement used to show a piece of code Inheritance Object CallbackEventHandler Focusable VisualElement CodeViewElement Implements IEventHandler ITransform ITransitionAnimations IExperimentalFeatures IVisualElementScheduler IResolvedStyle Namespace : VRLabs.ModularShaderSystem.UI Syntax public class CodeViewElement : VisualElement, IEventHandler, ITransform, ITransitionAnimations, IExperimentalFeatures, IVisualElementScheduler, IResolvedStyle Constructors Name Description CodeViewElement() Default constructor of CodeViewElement Properties Name Description LineCount Text"
  },
  "api/VRLabs.ModularShaderSystem.UI.CodeViewElement.LineCount.html": {
    "href": "api/VRLabs.ModularShaderSystem.UI.CodeViewElement.LineCount.html",
    "title": "Property LineCount | Modular Shader System Documentation",
    "keywords": "Property LineCount LineCount Declaration public int LineCount { get; } Property Value Type Description Int32"
  },
  "api/VRLabs.ModularShaderSystem.UI.CodeViewElement.Text.html": {
    "href": "api/VRLabs.ModularShaderSystem.UI.CodeViewElement.Text.html",
    "title": "Property Text | Modular Shader System Documentation",
    "keywords": "Property Text Text Declaration public string Text { get; set; } Property Value Type Description String"
  },
  "api/VRLabs.ModularShaderSystem.UI.DefaultTextureValue.html": {
    "href": "api/VRLabs.ModularShaderSystem.UI.DefaultTextureValue.html",
    "title": "Enum DefaultTextureValue | Modular Shader System Documentation",
    "keywords": "Enum DefaultTextureValue Default values for texture properties Namespace : VRLabs.ModularShaderSystem.UI Syntax public enum DefaultTextureValue Fields Name Description Black Bump Gray White"
  },
  "api/VRLabs.ModularShaderSystem.UI.EnablePropertyDrawer.CreatePropertyGUI.html": {
    "href": "api/VRLabs.ModularShaderSystem.UI.EnablePropertyDrawer.CreatePropertyGUI.html",
    "title": "Method CreatePropertyGUI | Modular Shader System Documentation",
    "keywords": "Method CreatePropertyGUI CreatePropertyGUI(SerializedProperty) Declaration public override VisualElement CreatePropertyGUI(SerializedProperty property) Parameters Type Name Description SerializedProperty property Returns Type Description VisualElement Overrides PropertyDrawer.CreatePropertyGUI(SerializedProperty)"
  },
  "api/VRLabs.ModularShaderSystem.UI.EnablePropertyDrawer.html": {
    "href": "api/VRLabs.ModularShaderSystem.UI.EnablePropertyDrawer.html",
    "title": "Class EnablePropertyDrawer | Modular Shader System Documentation",
    "keywords": "Class EnablePropertyDrawer Inspector drawer for EnableProperty . Inheritance Object GUIDrawer PropertyDrawer EnablePropertyDrawer Namespace : VRLabs.ModularShaderSystem.UI Syntax [CustomPropertyDrawer(typeof(EnableProperty))] public class EnablePropertyDrawer : PropertyDrawer Methods Name Description CreatePropertyGUI(SerializedProperty)"
  },
  "api/VRLabs.ModularShaderSystem.UI.FunctionPropertyDrawer.CreatePropertyGUI.html": {
    "href": "api/VRLabs.ModularShaderSystem.UI.FunctionPropertyDrawer.CreatePropertyGUI.html",
    "title": "Method CreatePropertyGUI | Modular Shader System Documentation",
    "keywords": "Method CreatePropertyGUI CreatePropertyGUI(SerializedProperty) Declaration public override VisualElement CreatePropertyGUI(SerializedProperty property) Parameters Type Name Description SerializedProperty property Returns Type Description VisualElement Overrides PropertyDrawer.CreatePropertyGUI(SerializedProperty)"
  },
  "api/VRLabs.ModularShaderSystem.UI.FunctionPropertyDrawer.html": {
    "href": "api/VRLabs.ModularShaderSystem.UI.FunctionPropertyDrawer.html",
    "title": "Class FunctionPropertyDrawer | Modular Shader System Documentation",
    "keywords": "Class FunctionPropertyDrawer Inspector drawer for ShaderFunction . Inheritance Object GUIDrawer PropertyDrawer FunctionPropertyDrawer Namespace : VRLabs.ModularShaderSystem.UI Syntax [CustomPropertyDrawer(typeof(ShaderFunction))] public class FunctionPropertyDrawer : PropertyDrawer Methods Name Description CreatePropertyGUI(SerializedProperty)"
  },
  "api/VRLabs.ModularShaderSystem.UI.html": {
    "href": "api/VRLabs.ModularShaderSystem.UI.html",
    "title": "Namespace VRLabs.ModularShaderSystem.UI | Modular Shader System Documentation",
    "keywords": "Namespace VRLabs.ModularShaderSystem.UI Classes CodeViewElement VisualElement used to show a piece of code EnablePropertyDrawer Inspector drawer for EnableProperty . FunctionPropertyDrawer Inspector drawer for ShaderFunction . InspectorList Visual element used to show a list from a Serialized property containing a list InspectorList.UxmlFactory InspectorList.UxmlTraits InspectorListItem Item for InspectorList LabelField Field containing a label with a title. ModularShaderEditor Inspector for the ModularShader asset. ModuleInspectorList ModuleInspectorList.UxmlFactory ModuleInspectorList.UxmlTraits ModuleTemplatePropertyDrawer Inspector drawer for ModuleTemplate . PropertyAttributeAttribute PropertyAttributeDrawer Inspector drawer for Variable . ShaderModuleEditor Inspector for the ShaderModule asset. ShaderPropertyDrawer Inspector drawer for Property . TemplateAssetEditor Inspector for the TemplateAsset asset TextPopup Editor window that shows a code element. should be shown with \"EditorWindow.ShowAsDropDown\". VariableField Field showing a Variable in a single line. VariablePropertyDrawer Inspector drawer for Variable . Interfaces IInspectorList Interface for an inspector list used for drag reorder. Enums DefaultTextureValue Default values for texture properties"
  },
  "api/VRLabs.ModularShaderSystem.UI.IInspectorList.DeHighlightDrops.html": {
    "href": "api/VRLabs.ModularShaderSystem.UI.IInspectorList.DeHighlightDrops.html",
    "title": "Method DeHighlightDrops | Modular Shader System Documentation",
    "keywords": "Method DeHighlightDrops DeHighlightDrops() Declaration void DeHighlightDrops()"
  },
  "api/VRLabs.ModularShaderSystem.UI.IInspectorList.draggedElement.html": {
    "href": "api/VRLabs.ModularShaderSystem.UI.IInspectorList.draggedElement.html",
    "title": "Property draggedElement | Modular Shader System Documentation",
    "keywords": "Property draggedElement draggedElement Declaration InspectorListItem draggedElement { get; set; } Property Value Type Description InspectorListItem"
  },
  "api/VRLabs.ModularShaderSystem.UI.IInspectorList.HighlightDrops.html": {
    "href": "api/VRLabs.ModularShaderSystem.UI.IInspectorList.HighlightDrops.html",
    "title": "Method HighlightDrops | Modular Shader System Documentation",
    "keywords": "Method HighlightDrops HighlightDrops() Declaration void HighlightDrops()"
  },
  "api/VRLabs.ModularShaderSystem.UI.IInspectorList.html": {
    "href": "api/VRLabs.ModularShaderSystem.UI.IInspectorList.html",
    "title": "Interface IInspectorList | Modular Shader System Documentation",
    "keywords": "Interface IInspectorList Interface for an inspector list used for drag reorder. Namespace : VRLabs.ModularShaderSystem.UI Syntax public interface IInspectorList Properties Name Description draggedElement Methods Name Description DeHighlightDrops() HighlightDrops()"
  },
  "api/VRLabs.ModularShaderSystem.UI.InspectorList._highlightDrops.html": {
    "href": "api/VRLabs.ModularShaderSystem.UI.InspectorList._highlightDrops.html",
    "title": "Field _highlightDrops | Modular Shader System Documentation",
    "keywords": "Field _highlightDrops Namespace : VRLabs.ModularShaderSystem.UI Syntax public bool _highlightDrops Returns Boolean"
  },
  "api/VRLabs.ModularShaderSystem.UI.InspectorList.AddItem.html": {
    "href": "api/VRLabs.ModularShaderSystem.UI.InspectorList.AddItem.html",
    "title": "Method AddItem | Modular Shader System Documentation",
    "keywords": "Method AddItem AddItem() Declaration public void AddItem()"
  },
  "api/VRLabs.ModularShaderSystem.UI.InspectorList.-ctor.html": {
    "href": "api/VRLabs.ModularShaderSystem.UI.InspectorList.-ctor.html",
    "title": "Constructor InspectorList | Modular Shader System Documentation",
    "keywords": "Constructor InspectorList InspectorList() Declaration public InspectorList()"
  },
  "api/VRLabs.ModularShaderSystem.UI.InspectorList.DeHighlightDrops.html": {
    "href": "api/VRLabs.ModularShaderSystem.UI.InspectorList.DeHighlightDrops.html",
    "title": "Method DeHighlightDrops | Modular Shader System Documentation",
    "keywords": "Method DeHighlightDrops DeHighlightDrops() Declaration public void DeHighlightDrops() Implements IInspectorList.DeHighlightDrops()"
  },
  "api/VRLabs.ModularShaderSystem.UI.InspectorList.draggedElement.html": {
    "href": "api/VRLabs.ModularShaderSystem.UI.InspectorList.draggedElement.html",
    "title": "Property draggedElement | Modular Shader System Documentation",
    "keywords": "Property draggedElement draggedElement Declaration public InspectorListItem draggedElement { get; set; } Property Value Type Description InspectorListItem Implements IInspectorList.draggedElement"
  },
  "api/VRLabs.ModularShaderSystem.UI.InspectorList.HandleEvent.html": {
    "href": "api/VRLabs.ModularShaderSystem.UI.InspectorList.HandleEvent.html",
    "title": "Method HandleEvent | Modular Shader System Documentation",
    "keywords": "Method HandleEvent HandleEvent(EventBase) Declaration public override void HandleEvent(EventBase evt) Parameters Type Name Description EventBase evt Overrides CallbackEventHandler.HandleEvent(EventBase)"
  },
  "api/VRLabs.ModularShaderSystem.UI.InspectorList.HighlightDrops.html": {
    "href": "api/VRLabs.ModularShaderSystem.UI.InspectorList.HighlightDrops.html",
    "title": "Method HighlightDrops | Modular Shader System Documentation",
    "keywords": "Method HighlightDrops HighlightDrops() Declaration public void HighlightDrops() Implements IInspectorList.HighlightDrops()"
  },
  "api/VRLabs.ModularShaderSystem.UI.InspectorList.html": {
    "href": "api/VRLabs.ModularShaderSystem.UI.InspectorList.html",
    "title": "Class InspectorList | Modular Shader System Documentation",
    "keywords": "Class InspectorList Visual element used to show a list from a Serialized property containing a list Inheritance Object CallbackEventHandler Focusable VisualElement BindableElement InspectorList Implements IEventHandler ITransform ITransitionAnimations IExperimentalFeatures IVisualElementScheduler IResolvedStyle IBindable IInspectorList Namespace : VRLabs.ModularShaderSystem.UI Syntax public class InspectorList : BindableElement, IEventHandler, ITransform, ITransitionAnimations, IExperimentalFeatures, IVisualElementScheduler, IResolvedStyle, IBindable, IInspectorList Constructors Name Description InspectorList() Fields Name Description _highlightDrops Properties Name Description draggedElement Methods Name Description AddItem() DeHighlightDrops() HandleEvent(EventBase) HighlightDrops() MoveDownItem(Int32) MoveUpItem(Int32) RemoveItem(Int32) SetFoldingState(Boolean) UpdateList()"
  },
  "api/VRLabs.ModularShaderSystem.UI.InspectorList.MoveDownItem.html": {
    "href": "api/VRLabs.ModularShaderSystem.UI.InspectorList.MoveDownItem.html",
    "title": "Method MoveDownItem | Modular Shader System Documentation",
    "keywords": "Method MoveDownItem MoveDownItem(Int32) Declaration public void MoveDownItem(int index) Parameters Type Name Description Int32 index"
  },
  "api/VRLabs.ModularShaderSystem.UI.InspectorList.MoveUpItem.html": {
    "href": "api/VRLabs.ModularShaderSystem.UI.InspectorList.MoveUpItem.html",
    "title": "Method MoveUpItem | Modular Shader System Documentation",
    "keywords": "Method MoveUpItem MoveUpItem(Int32) Declaration public void MoveUpItem(int index) Parameters Type Name Description Int32 index"
  },
  "api/VRLabs.ModularShaderSystem.UI.InspectorList.RemoveItem.html": {
    "href": "api/VRLabs.ModularShaderSystem.UI.InspectorList.RemoveItem.html",
    "title": "Method RemoveItem | Modular Shader System Documentation",
    "keywords": "Method RemoveItem RemoveItem(Int32) Declaration public void RemoveItem(int index) Parameters Type Name Description Int32 index"
  },
  "api/VRLabs.ModularShaderSystem.UI.InspectorList.SetFoldingState.html": {
    "href": "api/VRLabs.ModularShaderSystem.UI.InspectorList.SetFoldingState.html",
    "title": "Method SetFoldingState | Modular Shader System Documentation",
    "keywords": "Method SetFoldingState SetFoldingState(Boolean) Declaration public void SetFoldingState(bool open) Parameters Type Name Description Boolean open"
  },
  "api/VRLabs.ModularShaderSystem.UI.InspectorList.UpdateList.html": {
    "href": "api/VRLabs.ModularShaderSystem.UI.InspectorList.UpdateList.html",
    "title": "Method UpdateList | Modular Shader System Documentation",
    "keywords": "Method UpdateList UpdateList() Declaration public void UpdateList()"
  },
  "api/VRLabs.ModularShaderSystem.UI.InspectorList.UxmlFactory.html": {
    "href": "api/VRLabs.ModularShaderSystem.UI.InspectorList.UxmlFactory.html",
    "title": "Class InspectorList.UxmlFactory | Modular Shader System Documentation",
    "keywords": "Class InspectorList.UxmlFactory Inheritance Object UxmlFactory < InspectorList , InspectorList.UxmlTraits > InspectorList.UxmlFactory Implements IUxmlFactory Namespace : VRLabs.ModularShaderSystem.UI Syntax public class UxmlFactory : UxmlFactory<InspectorList, InspectorList.UxmlTraits>, IUxmlFactory"
  },
  "api/VRLabs.ModularShaderSystem.UI.InspectorList.UxmlTraits.html": {
    "href": "api/VRLabs.ModularShaderSystem.UI.InspectorList.UxmlTraits.html",
    "title": "Class InspectorList.UxmlTraits | Modular Shader System Documentation",
    "keywords": "Class InspectorList.UxmlTraits Inheritance Object UxmlTraits VisualElement.UxmlTraits BindableElement.UxmlTraits InspectorList.UxmlTraits Namespace : VRLabs.ModularShaderSystem.UI Syntax public class UxmlTraits : BindableElement.UxmlTraits Methods Name Description Init(VisualElement, IUxmlAttributes, CreationContext)"
  },
  "api/VRLabs.ModularShaderSystem.UI.InspectorList.UxmlTraits.Init.html": {
    "href": "api/VRLabs.ModularShaderSystem.UI.InspectorList.UxmlTraits.Init.html",
    "title": "Method Init | Modular Shader System Documentation",
    "keywords": "Method Init Init(VisualElement, IUxmlAttributes, CreationContext) Declaration public override void Init(VisualElement ve, IUxmlAttributes bag, CreationContext cc) Parameters Type Name Description VisualElement ve IUxmlAttributes bag CreationContext cc Overrides BindableElement.UxmlTraits.Init(VisualElement, IUxmlAttributes, CreationContext)"
  },
  "api/VRLabs.ModularShaderSystem.UI.InspectorListItem.-ctor.html": {
    "href": "api/VRLabs.ModularShaderSystem.UI.InspectorListItem.-ctor.html",
    "title": "Constructor InspectorListItem | Modular Shader System Documentation",
    "keywords": "Constructor InspectorListItem InspectorListItem(IInspectorList, VisualElement, SerializedProperty, Int32, Boolean) Declaration public InspectorListItem(IInspectorList list, VisualElement element, SerializedProperty array, int index, bool showButtonsText) Parameters Type Name Description IInspectorList list VisualElement element SerializedProperty array Int32 index Boolean showButtonsText"
  },
  "api/VRLabs.ModularShaderSystem.UI.InspectorListItem.downButton.html": {
    "href": "api/VRLabs.ModularShaderSystem.UI.InspectorListItem.downButton.html",
    "title": "Field downButton | Modular Shader System Documentation",
    "keywords": "Field downButton Namespace : VRLabs.ModularShaderSystem.UI Syntax public Button downButton Returns Button"
  },
  "api/VRLabs.ModularShaderSystem.UI.InspectorListItem.dragArea.html": {
    "href": "api/VRLabs.ModularShaderSystem.UI.InspectorListItem.dragArea.html",
    "title": "Field dragArea | Modular Shader System Documentation",
    "keywords": "Field dragArea Namespace : VRLabs.ModularShaderSystem.UI Syntax public VisualElement dragArea Returns VisualElement"
  },
  "api/VRLabs.ModularShaderSystem.UI.InspectorListItem.html": {
    "href": "api/VRLabs.ModularShaderSystem.UI.InspectorListItem.html",
    "title": "Class InspectorListItem | Modular Shader System Documentation",
    "keywords": "Class InspectorListItem Item for InspectorList Inheritance Object CallbackEventHandler Focusable VisualElement InspectorListItem Implements IEventHandler ITransform ITransitionAnimations IExperimentalFeatures IVisualElementScheduler IResolvedStyle Namespace : VRLabs.ModularShaderSystem.UI Syntax public class InspectorListItem : VisualElement, IEventHandler, ITransform, ITransitionAnimations, IExperimentalFeatures, IVisualElementScheduler, IResolvedStyle Constructors Name Description InspectorListItem(IInspectorList, VisualElement, SerializedProperty, Int32, Boolean) Fields Name Description downButton dragArea index removeButton startPosition upButton"
  },
  "api/VRLabs.ModularShaderSystem.UI.InspectorListItem.index.html": {
    "href": "api/VRLabs.ModularShaderSystem.UI.InspectorListItem.index.html",
    "title": "Field index | Modular Shader System Documentation",
    "keywords": "Field index Namespace : VRLabs.ModularShaderSystem.UI Syntax public int index Returns Int32"
  },
  "api/VRLabs.ModularShaderSystem.UI.InspectorListItem.removeButton.html": {
    "href": "api/VRLabs.ModularShaderSystem.UI.InspectorListItem.removeButton.html",
    "title": "Field removeButton | Modular Shader System Documentation",
    "keywords": "Field removeButton Namespace : VRLabs.ModularShaderSystem.UI Syntax public Button removeButton Returns Button"
  },
  "api/VRLabs.ModularShaderSystem.UI.InspectorListItem.startPosition.html": {
    "href": "api/VRLabs.ModularShaderSystem.UI.InspectorListItem.startPosition.html",
    "title": "Field startPosition | Modular Shader System Documentation",
    "keywords": "Field startPosition Namespace : VRLabs.ModularShaderSystem.UI Syntax public Vector2 startPosition Returns Vector2"
  },
  "api/VRLabs.ModularShaderSystem.UI.InspectorListItem.upButton.html": {
    "href": "api/VRLabs.ModularShaderSystem.UI.InspectorListItem.upButton.html",
    "title": "Field upButton | Modular Shader System Documentation",
    "keywords": "Field upButton Namespace : VRLabs.ModularShaderSystem.UI Syntax public Button upButton Returns Button"
  },
  "api/VRLabs.ModularShaderSystem.UI.LabelField.-ctor.html": {
    "href": "api/VRLabs.ModularShaderSystem.UI.LabelField.-ctor.html",
    "title": "Constructor LabelField | Modular Shader System Documentation",
    "keywords": "Constructor LabelField LabelField(String, String) Declaration public LabelField(string label, string value) Parameters Type Name Description String label String value"
  },
  "api/VRLabs.ModularShaderSystem.UI.LabelField.html": {
    "href": "api/VRLabs.ModularShaderSystem.UI.LabelField.html",
    "title": "Class LabelField | Modular Shader System Documentation",
    "keywords": "Class LabelField Field containing a label with a title. Inheritance Object CallbackEventHandler Focusable VisualElement LabelField Implements IEventHandler ITransform ITransitionAnimations IExperimentalFeatures IVisualElementScheduler IResolvedStyle Namespace : VRLabs.ModularShaderSystem.UI Syntax public class LabelField : VisualElement, IEventHandler, ITransform, ITransitionAnimations, IExperimentalFeatures, IVisualElementScheduler, IResolvedStyle Constructors Name Description LabelField(String, String) Properties Name Description Label Value"
  },
  "api/VRLabs.ModularShaderSystem.UI.LabelField.Label.html": {
    "href": "api/VRLabs.ModularShaderSystem.UI.LabelField.Label.html",
    "title": "Property Label | Modular Shader System Documentation",
    "keywords": "Property Label Label Declaration public string Label { get; set; } Property Value Type Description String"
  },
  "api/VRLabs.ModularShaderSystem.UI.LabelField.Value.html": {
    "href": "api/VRLabs.ModularShaderSystem.UI.LabelField.Value.html",
    "title": "Property Value | Modular Shader System Documentation",
    "keywords": "Property Value Value Declaration public string Value { get; set; } Property Value Type Description String"
  },
  "api/VRLabs.ModularShaderSystem.UI.ModularShaderEditor.CreateInspectorGUI.html": {
    "href": "api/VRLabs.ModularShaderSystem.UI.ModularShaderEditor.CreateInspectorGUI.html",
    "title": "Method CreateInspectorGUI | Modular Shader System Documentation",
    "keywords": "Method CreateInspectorGUI CreateInspectorGUI() Declaration public override VisualElement CreateInspectorGUI() Returns Type Description VisualElement Overrides Editor.CreateInspectorGUI()"
  },
  "api/VRLabs.ModularShaderSystem.UI.ModularShaderEditor.html": {
    "href": "api/VRLabs.ModularShaderSystem.UI.ModularShaderEditor.html",
    "title": "Class ModularShaderEditor | Modular Shader System Documentation",
    "keywords": "Class ModularShaderEditor Inspector for the ModularShader asset. Inheritance Object Object ScriptableObject Editor ModularShaderEditor Namespace : VRLabs.ModularShaderSystem.UI Syntax [CustomEditor(typeof(ModularShader))] public class ModularShaderEditor : Editor, IPreviewable, IToolModeOwner Methods Name Description CreateInspectorGUI()"
  },
  "api/VRLabs.ModularShaderSystem.UI.ModuleInspectorList._highlightDrops.html": {
    "href": "api/VRLabs.ModularShaderSystem.UI.ModuleInspectorList._highlightDrops.html",
    "title": "Field _highlightDrops | Modular Shader System Documentation",
    "keywords": "Field _highlightDrops Namespace : VRLabs.ModularShaderSystem.UI Syntax public bool _highlightDrops Returns Boolean"
  },
  "api/VRLabs.ModularShaderSystem.UI.ModuleInspectorList.AddItem.html": {
    "href": "api/VRLabs.ModularShaderSystem.UI.ModuleInspectorList.AddItem.html",
    "title": "Method AddItem | Modular Shader System Documentation",
    "keywords": "Method AddItem AddItem() Declaration public void AddItem()"
  },
  "api/VRLabs.ModularShaderSystem.UI.ModuleInspectorList.-ctor.html": {
    "href": "api/VRLabs.ModularShaderSystem.UI.ModuleInspectorList.-ctor.html",
    "title": "Constructor ModuleInspectorList | Modular Shader System Documentation",
    "keywords": "Constructor ModuleInspectorList ModuleInspectorList() Declaration public ModuleInspectorList()"
  },
  "api/VRLabs.ModularShaderSystem.UI.ModuleInspectorList.DeHighlightDrops.html": {
    "href": "api/VRLabs.ModularShaderSystem.UI.ModuleInspectorList.DeHighlightDrops.html",
    "title": "Method DeHighlightDrops | Modular Shader System Documentation",
    "keywords": "Method DeHighlightDrops DeHighlightDrops() Declaration public void DeHighlightDrops() Implements IInspectorList.DeHighlightDrops()"
  },
  "api/VRLabs.ModularShaderSystem.UI.ModuleInspectorList.draggedElement.html": {
    "href": "api/VRLabs.ModularShaderSystem.UI.ModuleInspectorList.draggedElement.html",
    "title": "Property draggedElement | Modular Shader System Documentation",
    "keywords": "Property draggedElement draggedElement Declaration public InspectorListItem draggedElement { get; set; } Property Value Type Description InspectorListItem Implements IInspectorList.draggedElement"
  },
  "api/VRLabs.ModularShaderSystem.UI.ModuleInspectorList.HandleEvent.html": {
    "href": "api/VRLabs.ModularShaderSystem.UI.ModuleInspectorList.HandleEvent.html",
    "title": "Method HandleEvent | Modular Shader System Documentation",
    "keywords": "Method HandleEvent HandleEvent(EventBase) Declaration public override void HandleEvent(EventBase evt) Parameters Type Name Description EventBase evt Overrides CallbackEventHandler.HandleEvent(EventBase)"
  },
  "api/VRLabs.ModularShaderSystem.UI.ModuleInspectorList.HighlightDrops.html": {
    "href": "api/VRLabs.ModularShaderSystem.UI.ModuleInspectorList.HighlightDrops.html",
    "title": "Method HighlightDrops | Modular Shader System Documentation",
    "keywords": "Method HighlightDrops HighlightDrops() Declaration public void HighlightDrops() Implements IInspectorList.HighlightDrops()"
  },
  "api/VRLabs.ModularShaderSystem.UI.ModuleInspectorList.html": {
    "href": "api/VRLabs.ModularShaderSystem.UI.ModuleInspectorList.html",
    "title": "Class ModuleInspectorList | Modular Shader System Documentation",
    "keywords": "Class ModuleInspectorList Inheritance Object CallbackEventHandler Focusable VisualElement BindableElement ModuleInspectorList Implements IEventHandler ITransform ITransitionAnimations IExperimentalFeatures IVisualElementScheduler IResolvedStyle IBindable IInspectorList Namespace : VRLabs.ModularShaderSystem.UI Syntax public class ModuleInspectorList : BindableElement, IEventHandler, ITransform, ITransitionAnimations, IExperimentalFeatures, IVisualElementScheduler, IResolvedStyle, IBindable, IInspectorList Constructors Name Description ModuleInspectorList() Fields Name Description _highlightDrops Properties Name Description draggedElement Methods Name Description AddItem() DeHighlightDrops() HandleEvent(EventBase) HighlightDrops() MoveDownItem(Int32) MoveUpItem(Int32) RemoveItem(Int32) SetFoldingState(Boolean) UpdateList()"
  },
  "api/VRLabs.ModularShaderSystem.UI.ModuleInspectorList.MoveDownItem.html": {
    "href": "api/VRLabs.ModularShaderSystem.UI.ModuleInspectorList.MoveDownItem.html",
    "title": "Method MoveDownItem | Modular Shader System Documentation",
    "keywords": "Method MoveDownItem MoveDownItem(Int32) Declaration public void MoveDownItem(int index) Parameters Type Name Description Int32 index"
  },
  "api/VRLabs.ModularShaderSystem.UI.ModuleInspectorList.MoveUpItem.html": {
    "href": "api/VRLabs.ModularShaderSystem.UI.ModuleInspectorList.MoveUpItem.html",
    "title": "Method MoveUpItem | Modular Shader System Documentation",
    "keywords": "Method MoveUpItem MoveUpItem(Int32) Declaration public void MoveUpItem(int index) Parameters Type Name Description Int32 index"
  },
  "api/VRLabs.ModularShaderSystem.UI.ModuleInspectorList.RemoveItem.html": {
    "href": "api/VRLabs.ModularShaderSystem.UI.ModuleInspectorList.RemoveItem.html",
    "title": "Method RemoveItem | Modular Shader System Documentation",
    "keywords": "Method RemoveItem RemoveItem(Int32) Declaration public void RemoveItem(int index) Parameters Type Name Description Int32 index"
  },
  "api/VRLabs.ModularShaderSystem.UI.ModuleInspectorList.SetFoldingState.html": {
    "href": "api/VRLabs.ModularShaderSystem.UI.ModuleInspectorList.SetFoldingState.html",
    "title": "Method SetFoldingState | Modular Shader System Documentation",
    "keywords": "Method SetFoldingState SetFoldingState(Boolean) Declaration public void SetFoldingState(bool open) Parameters Type Name Description Boolean open"
  },
  "api/VRLabs.ModularShaderSystem.UI.ModuleInspectorList.UpdateList.html": {
    "href": "api/VRLabs.ModularShaderSystem.UI.ModuleInspectorList.UpdateList.html",
    "title": "Method UpdateList | Modular Shader System Documentation",
    "keywords": "Method UpdateList UpdateList() Declaration public void UpdateList()"
  },
  "api/VRLabs.ModularShaderSystem.UI.ModuleInspectorList.UxmlFactory.html": {
    "href": "api/VRLabs.ModularShaderSystem.UI.ModuleInspectorList.UxmlFactory.html",
    "title": "Class ModuleInspectorList.UxmlFactory | Modular Shader System Documentation",
    "keywords": "Class ModuleInspectorList.UxmlFactory Inheritance Object UxmlFactory < ModuleInspectorList , ModuleInspectorList.UxmlTraits > ModuleInspectorList.UxmlFactory Implements IUxmlFactory Namespace : VRLabs.ModularShaderSystem.UI Syntax public class UxmlFactory : UxmlFactory<ModuleInspectorList, ModuleInspectorList.UxmlTraits>, IUxmlFactory"
  },
  "api/VRLabs.ModularShaderSystem.UI.ModuleInspectorList.UxmlTraits.html": {
    "href": "api/VRLabs.ModularShaderSystem.UI.ModuleInspectorList.UxmlTraits.html",
    "title": "Class ModuleInspectorList.UxmlTraits | Modular Shader System Documentation",
    "keywords": "Class ModuleInspectorList.UxmlTraits Inheritance Object UxmlTraits VisualElement.UxmlTraits BindableElement.UxmlTraits ModuleInspectorList.UxmlTraits Namespace : VRLabs.ModularShaderSystem.UI Syntax public class UxmlTraits : BindableElement.UxmlTraits Methods Name Description Init(VisualElement, IUxmlAttributes, CreationContext)"
  },
  "api/VRLabs.ModularShaderSystem.UI.ModuleInspectorList.UxmlTraits.Init.html": {
    "href": "api/VRLabs.ModularShaderSystem.UI.ModuleInspectorList.UxmlTraits.Init.html",
    "title": "Method Init | Modular Shader System Documentation",
    "keywords": "Method Init Init(VisualElement, IUxmlAttributes, CreationContext) Declaration public override void Init(VisualElement ve, IUxmlAttributes bag, CreationContext cc) Parameters Type Name Description VisualElement ve IUxmlAttributes bag CreationContext cc Overrides BindableElement.UxmlTraits.Init(VisualElement, IUxmlAttributes, CreationContext)"
  },
  "api/VRLabs.ModularShaderSystem.UI.ModuleTemplatePropertyDrawer.CreatePropertyGUI.html": {
    "href": "api/VRLabs.ModularShaderSystem.UI.ModuleTemplatePropertyDrawer.CreatePropertyGUI.html",
    "title": "Method CreatePropertyGUI | Modular Shader System Documentation",
    "keywords": "Method CreatePropertyGUI CreatePropertyGUI(SerializedProperty) Declaration public override VisualElement CreatePropertyGUI(SerializedProperty property) Parameters Type Name Description SerializedProperty property Returns Type Description VisualElement Overrides PropertyDrawer.CreatePropertyGUI(SerializedProperty)"
  },
  "api/VRLabs.ModularShaderSystem.UI.ModuleTemplatePropertyDrawer.html": {
    "href": "api/VRLabs.ModularShaderSystem.UI.ModuleTemplatePropertyDrawer.html",
    "title": "Class ModuleTemplatePropertyDrawer | Modular Shader System Documentation",
    "keywords": "Class ModuleTemplatePropertyDrawer Inspector drawer for ModuleTemplate . Inheritance Object GUIDrawer PropertyDrawer ModuleTemplatePropertyDrawer Namespace : VRLabs.ModularShaderSystem.UI Syntax [CustomPropertyDrawer(typeof(ModuleTemplate))] public class ModuleTemplatePropertyDrawer : PropertyDrawer Methods Name Description CreatePropertyGUI(SerializedProperty)"
  },
  "api/VRLabs.ModularShaderSystem.UI.PropertyAttributeAttribute.html": {
    "href": "api/VRLabs.ModularShaderSystem.UI.PropertyAttributeAttribute.html",
    "title": "Class PropertyAttributeAttribute | Modular Shader System Documentation",
    "keywords": "Class PropertyAttributeAttribute Inheritance Object Attribute PropertyAttribute PropertyAttributeAttribute Implements _Attribute Namespace : VRLabs.ModularShaderSystem.UI Syntax public class PropertyAttributeAttribute : PropertyAttribute, _Attribute"
  },
  "api/VRLabs.ModularShaderSystem.UI.PropertyAttributeDrawer.CreatePropertyGUI.html": {
    "href": "api/VRLabs.ModularShaderSystem.UI.PropertyAttributeDrawer.CreatePropertyGUI.html",
    "title": "Method CreatePropertyGUI | Modular Shader System Documentation",
    "keywords": "Method CreatePropertyGUI CreatePropertyGUI(SerializedProperty) Declaration public override VisualElement CreatePropertyGUI(SerializedProperty property) Parameters Type Name Description SerializedProperty property Returns Type Description VisualElement Overrides PropertyDrawer.CreatePropertyGUI(SerializedProperty)"
  },
  "api/VRLabs.ModularShaderSystem.UI.PropertyAttributeDrawer.html": {
    "href": "api/VRLabs.ModularShaderSystem.UI.PropertyAttributeDrawer.html",
    "title": "Class PropertyAttributeDrawer | Modular Shader System Documentation",
    "keywords": "Class PropertyAttributeDrawer Inspector drawer for Variable . Inheritance Object GUIDrawer PropertyDrawer PropertyAttributeDrawer Namespace : VRLabs.ModularShaderSystem.UI Syntax [CustomPropertyDrawer(typeof(PropertyAttributeAttribute))] public class PropertyAttributeDrawer : PropertyDrawer Methods Name Description CreatePropertyGUI(SerializedProperty)"
  },
  "api/VRLabs.ModularShaderSystem.UI.ShaderModuleEditor.CreateInspectorGUI.html": {
    "href": "api/VRLabs.ModularShaderSystem.UI.ShaderModuleEditor.CreateInspectorGUI.html",
    "title": "Method CreateInspectorGUI | Modular Shader System Documentation",
    "keywords": "Method CreateInspectorGUI CreateInspectorGUI() Declaration public override VisualElement CreateInspectorGUI() Returns Type Description VisualElement Overrides Editor.CreateInspectorGUI()"
  },
  "api/VRLabs.ModularShaderSystem.UI.ShaderModuleEditor.html": {
    "href": "api/VRLabs.ModularShaderSystem.UI.ShaderModuleEditor.html",
    "title": "Class ShaderModuleEditor | Modular Shader System Documentation",
    "keywords": "Class ShaderModuleEditor Inspector for the ShaderModule asset. Inheritance Object Object ScriptableObject Editor ShaderModuleEditor Namespace : VRLabs.ModularShaderSystem.UI Syntax [CustomEditor(typeof(ShaderModule))] public class ShaderModuleEditor : Editor, IPreviewable, IToolModeOwner Methods Name Description CreateInspectorGUI()"
  },
  "api/VRLabs.ModularShaderSystem.UI.ShaderPropertyDrawer.CreatePropertyGUI.html": {
    "href": "api/VRLabs.ModularShaderSystem.UI.ShaderPropertyDrawer.CreatePropertyGUI.html",
    "title": "Method CreatePropertyGUI | Modular Shader System Documentation",
    "keywords": "Method CreatePropertyGUI CreatePropertyGUI(SerializedProperty) Declaration public override VisualElement CreatePropertyGUI(SerializedProperty property) Parameters Type Name Description SerializedProperty property Returns Type Description VisualElement Overrides PropertyDrawer.CreatePropertyGUI(SerializedProperty)"
  },
  "api/VRLabs.ModularShaderSystem.UI.ShaderPropertyDrawer.html": {
    "href": "api/VRLabs.ModularShaderSystem.UI.ShaderPropertyDrawer.html",
    "title": "Class ShaderPropertyDrawer | Modular Shader System Documentation",
    "keywords": "Class ShaderPropertyDrawer Inspector drawer for Property . Inheritance Object GUIDrawer PropertyDrawer ShaderPropertyDrawer Namespace : VRLabs.ModularShaderSystem.UI Syntax [CustomPropertyDrawer(typeof(Property))] public class ShaderPropertyDrawer : PropertyDrawer Methods Name Description CreatePropertyGUI(SerializedProperty)"
  },
  "api/VRLabs.ModularShaderSystem.UI.TemplateAssetEditor.CreateInspectorGUI.html": {
    "href": "api/VRLabs.ModularShaderSystem.UI.TemplateAssetEditor.CreateInspectorGUI.html",
    "title": "Method CreateInspectorGUI | Modular Shader System Documentation",
    "keywords": "Method CreateInspectorGUI CreateInspectorGUI() Declaration public override VisualElement CreateInspectorGUI() Returns Type Description VisualElement Overrides Editor.CreateInspectorGUI()"
  },
  "api/VRLabs.ModularShaderSystem.UI.TemplateAssetEditor.html": {
    "href": "api/VRLabs.ModularShaderSystem.UI.TemplateAssetEditor.html",
    "title": "Class TemplateAssetEditor | Modular Shader System Documentation",
    "keywords": "Class TemplateAssetEditor Inspector for the TemplateAsset asset Inheritance Object Object ScriptableObject Editor TemplateAssetEditor Namespace : VRLabs.ModularShaderSystem.UI Syntax [CustomEditor(typeof(TemplateAsset))] public class TemplateAssetEditor : Editor, IPreviewable, IToolModeOwner Methods Name Description CreateInspectorGUI()"
  },
  "api/VRLabs.ModularShaderSystem.UI.TextPopup.html": {
    "href": "api/VRLabs.ModularShaderSystem.UI.TextPopup.html",
    "title": "Class TextPopup | Modular Shader System Documentation",
    "keywords": "Class TextPopup Editor window that shows a code element. should be shown with \"EditorWindow.ShowAsDropDown\". Inheritance Object Object ScriptableObject EditorWindow TextPopup Namespace : VRLabs.ModularShaderSystem.UI Syntax public class TextPopup : EditorWindow Fields Name Description Text"
  },
  "api/VRLabs.ModularShaderSystem.UI.TextPopup.Text.html": {
    "href": "api/VRLabs.ModularShaderSystem.UI.TextPopup.Text.html",
    "title": "Field Text | Modular Shader System Documentation",
    "keywords": "Field Text Namespace : VRLabs.ModularShaderSystem.UI Syntax public string Text Returns String"
  },
  "api/VRLabs.ModularShaderSystem.UI.VariableField.-ctor.html": {
    "href": "api/VRLabs.ModularShaderSystem.UI.VariableField.-ctor.html",
    "title": "Constructor VariableField | Modular Shader System Documentation",
    "keywords": "Constructor VariableField VariableField(Variable) Declaration public VariableField(Variable variable) Parameters Type Name Description Variable variable"
  },
  "api/VRLabs.ModularShaderSystem.UI.VariableField.html": {
    "href": "api/VRLabs.ModularShaderSystem.UI.VariableField.html",
    "title": "Class VariableField | Modular Shader System Documentation",
    "keywords": "Class VariableField Field showing a Variable in a single line. Inheritance Object CallbackEventHandler Focusable VisualElement VariableField Implements IEventHandler ITransform ITransitionAnimations IExperimentalFeatures IVisualElementScheduler IResolvedStyle Namespace : VRLabs.ModularShaderSystem.UI Syntax public class VariableField : VisualElement, IEventHandler, ITransform, ITransitionAnimations, IExperimentalFeatures, IVisualElementScheduler, IResolvedStyle Constructors Name Description VariableField(Variable) Properties Name Description Variable"
  },
  "api/VRLabs.ModularShaderSystem.UI.VariableField.Variable.html": {
    "href": "api/VRLabs.ModularShaderSystem.UI.VariableField.Variable.html",
    "title": "Property Variable | Modular Shader System Documentation",
    "keywords": "Property Variable Variable Declaration public Variable Variable { get; set; } Property Value Type Description Variable"
  },
  "api/VRLabs.ModularShaderSystem.UI.VariablePropertyDrawer.CreatePropertyGUI.html": {
    "href": "api/VRLabs.ModularShaderSystem.UI.VariablePropertyDrawer.CreatePropertyGUI.html",
    "title": "Method CreatePropertyGUI | Modular Shader System Documentation",
    "keywords": "Method CreatePropertyGUI CreatePropertyGUI(SerializedProperty) Declaration public override VisualElement CreatePropertyGUI(SerializedProperty property) Parameters Type Name Description SerializedProperty property Returns Type Description VisualElement Overrides PropertyDrawer.CreatePropertyGUI(SerializedProperty)"
  },
  "api/VRLabs.ModularShaderSystem.UI.VariablePropertyDrawer.html": {
    "href": "api/VRLabs.ModularShaderSystem.UI.VariablePropertyDrawer.html",
    "title": "Class VariablePropertyDrawer | Modular Shader System Documentation",
    "keywords": "Class VariablePropertyDrawer Inspector drawer for Variable . Inheritance Object GUIDrawer PropertyDrawer VariablePropertyDrawer Namespace : VRLabs.ModularShaderSystem.UI Syntax [CustomPropertyDrawer(typeof(Variable))] public class VariablePropertyDrawer : PropertyDrawer Methods Name Description CreatePropertyGUI(SerializedProperty)"
  },
  "api/VRLabs.ModularShaderSystem.Variable.CustomType.html": {
    "href": "api/VRLabs.ModularShaderSystem.Variable.CustomType.html",
    "title": "Field CustomType | Modular Shader System Documentation",
    "keywords": "Field CustomType Namespace : VRLabs.ModularShaderSystem Syntax public string CustomType Returns String"
  },
  "api/VRLabs.ModularShaderSystem.Variable.Equals.html": {
    "href": "api/VRLabs.ModularShaderSystem.Variable.Equals.html",
    "title": "Method Equals | Modular Shader System Documentation",
    "keywords": "Method Equals Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean Overrides Object.Equals(Object) Equals(Variable) Declaration public bool Equals(Variable other) Parameters Type Name Description Variable other Returns Type Description Boolean Implements IEquatable<T>.Equals(T)"
  },
  "api/VRLabs.ModularShaderSystem.Variable.GetDefinition.html": {
    "href": "api/VRLabs.ModularShaderSystem.Variable.GetDefinition.html",
    "title": "Method GetDefinition | Modular Shader System Documentation",
    "keywords": "Method GetDefinition GetDefinition() Gets a string definition of the variable. Declaration public string GetDefinition() Returns Type Description String a string containing the variable definition."
  },
  "api/VRLabs.ModularShaderSystem.Variable.GetHashCode.html": {
    "href": "api/VRLabs.ModularShaderSystem.Variable.GetHashCode.html",
    "title": "Method GetHashCode | Modular Shader System Documentation",
    "keywords": "Method GetHashCode GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 Overrides Object.GetHashCode()"
  },
  "api/VRLabs.ModularShaderSystem.Variable.html": {
    "href": "api/VRLabs.ModularShaderSystem.Variable.html",
    "title": "Class Variable | Modular Shader System Documentation",
    "keywords": "Class Variable Object defining a shader variable. It's used mainly for defining used variables in a module's function. Inheritance Object Variable Implements IEquatable < Variable > Namespace : VRLabs.ModularShaderSystem Syntax [Serializable] public class Variable : IEquatable<Variable> Fields Name Description CustomType Name Type Methods Name Description Equals(Object) Equals(Variable) GetDefinition() Gets a string definition of the variable. GetHashCode() Operators Name Description Equality(Variable, Variable) Inequality(Variable, Variable)"
  },
  "api/VRLabs.ModularShaderSystem.Variable.Name.html": {
    "href": "api/VRLabs.ModularShaderSystem.Variable.Name.html",
    "title": "Field Name | Modular Shader System Documentation",
    "keywords": "Field Name Namespace : VRLabs.ModularShaderSystem Syntax public string Name Returns String"
  },
  "api/VRLabs.ModularShaderSystem.Variable.op_Equality.html": {
    "href": "api/VRLabs.ModularShaderSystem.Variable.op_Equality.html",
    "title": "Operator Equality | Modular Shader System Documentation",
    "keywords": "Operator Equality Equality(Variable, Variable) Declaration public static bool operator ==(Variable left, Variable right) Parameters Type Name Description Variable left Variable right Returns Type Description Boolean"
  },
  "api/VRLabs.ModularShaderSystem.Variable.op_Inequality.html": {
    "href": "api/VRLabs.ModularShaderSystem.Variable.op_Inequality.html",
    "title": "Operator Inequality | Modular Shader System Documentation",
    "keywords": "Operator Inequality Inequality(Variable, Variable) Declaration public static bool operator !=(Variable left, Variable right) Parameters Type Name Description Variable left Variable right Returns Type Description Boolean"
  },
  "api/VRLabs.ModularShaderSystem.Variable.Type.html": {
    "href": "api/VRLabs.ModularShaderSystem.Variable.Type.html",
    "title": "Field Type | Modular Shader System Documentation",
    "keywords": "Field Type Namespace : VRLabs.ModularShaderSystem Syntax public VariableType Type Returns VariableType"
  },
  "api/VRLabs.ModularShaderSystem.VariableType.html": {
    "href": "api/VRLabs.ModularShaderSystem.VariableType.html",
    "title": "Enum VariableType | Modular Shader System Documentation",
    "keywords": "Enum VariableType Possible types of variables. Namespace : VRLabs.ModularShaderSystem Syntax public enum VariableType Fields Name Description Custom Float Float2 Float3 Float4 Half Half2 Half3 Half4 Sampler2D Sampler3D SamplerCUBE Texture2D Texture2DArray Texture2DMS Texture3D TextureCube TextureCubeArray UnityTex2D UnityTex2DArray UnityTex2DArrayNoSampler UnityTex2DNoSampler UnityTex3D UnityTex3DNoSampler UnityTexCube UnityTexCubeArray UnityTexCubeArrayNoSampler UnityTexCubeNoSampler"
  },
  "guides/AdvancedTopics/EmbeddingLibrary.html": {
    "href": "guides/AdvancedTopics/EmbeddingLibrary.html",
    "title": "Embedding The Library | Modular Shader System Documentation",
    "keywords": "Embedding The Library Embedding the library is the process of making a functional copy of the library for your exclusive use, making you able to export a unity package of your modular shader without worrying about the end user having to download the modular shader system by themselves, and also gives you control over what version of the modular shader system the shader is shipped with. If you're planning to make a shader to publish it's important to do this as fist step, since there are going to be some differences applied to the embedded library compared to the base one. Luckily for you there's an editor window dedicated to this, and can be found in VRLabs > Modular Shader > Tools > Embed Library . Embed Library Window The window contains some fields that are filled with the default values. Most of these values need to be changed based on your needs. Namespace: this will be the namespace of the embedded library, it has to differ from VRLabs since this one is already there, and it would cause compilation errors. The end namespace will always be *YourInput*.ModularShaderSystem (a preview is visible in the window) Default variable keyword: is the keyword used by default when no keywords are provided for variables. You can change it to whatever you want, or keep it like that. Default code keyword: is the keyword used by default when no keywords are provided for function code implementation. You can change it to whatever you want, or keep it like that. Default properties keyword: is the keyword used as an entry point for templates that target the property block when that option is enabled. You can change it to whatever you want, or keep it like that. Resource folder: it will be the name used for the resource folder of the library, it has to be different from the default value to avoid having collisions with the default library resources, since otherwise when those resources are used the default library ones may be loaded instead if both the embedded and original library are in the project, which could cause issues if the 2 libraries are of different versions with breaking changes between the 2 of them. Template extension: extension for the template file. It has to be different from the default value, to avoid collisions with the scripted importer of the 2 versions. Collection extension: extension for the template collection file. It has to be different from the default value, to avoid collisions with the scripted importer of the 2 versions. Editor window menu path: path to the editor windows in the menu, has to be different from the default one to avoid collisions with the base library, which would end up to being able to only have the options for 1 of the 2 libraries. Create asset menu path: path to the create asset menu in the menu, has to be different from the default one to avoid collisions with the base library, which would end up to being able to only have the options for 1 of the 2 libraries. Important You should keep an eye to what public shaders using the system use for these options, since you also have to not collide with them. After setting all those options for the first time, it's a good idea to save them to a file, so that the next times you have to update the embedded library you can just load the options from the file. Now it's time to embed the library by clicking Embed . It will prompt you to select a folder to where to put the library. The folder must be a folder called Editor since everything needs to be an editor script. Once done the editor will copy the library with the modifications declared and save it under a folder called ModularShaderSystem inside the selected editor folder. From here you can use the embedded library directly to make your own shader. This has also the advantage that since you now have your own file extensions for templates and collections, they won't get mixed up with other's people modular shader templates."
  },
  "guides/AdvancedTopics/MigratingAssets.html": {
    "href": "guides/AdvancedTopics/MigratingAssets.html",
    "title": "Migrating Assets | Modular Shader System Documentation",
    "keywords": "Migrating Assets If you embed the library for your specific project, you're quickly going to notice that all shaders, modules and templates you're made are still dependent on the original Modular Shader System installation, and not your newly embedded one. You could theoretically just remake the modules and shaders, and changing the extensions of the templates and collections, but it is quite annoying to do that, especially considering that you're going to have to reassign all asset references. For this reason there's a tool included that lets you import and export assets from the library to a generic format and back, and can be found in VRLabs > Modular Shader > Tools > Migrator . Migrator The migrator is a tool divided into 2 tabs: Export and Import : The export section will let you select the assets you want to migrate, and by pressing the Save button. you can save them into a file. On the other hand the import section will let you to read and import the mentioned file, restoring the previously selected modules in the same path under the library the migrator window belongs to. You will always import all the assets contained into the migration files Important Import and export are always dependent on which library said window is from. VRLabs > Modular Shader > Tools > Migrator is where the default one is, meanwhile your embedded version depends on the embed settings. So to convert a modular shader from base library to your embedded library you have to open the default library migrator, export the assets you want, and then open the migrator of your embedded version and import the file from there. Warning Beware that if you have default texture overrides in some properties, you have to complete the migration process within the same editor session, otherwise the references to those textures will be lost. This is also a good reason to not use the migrator as a \"quick share\" tool"
  },
  "guides/AdvancedTopics/ModularShaderDive.html": {
    "href": "guides/AdvancedTopics/ModularShaderDive.html",
    "title": "Modular Shader Generator Deep Dive | Modular Shader System Documentation",
    "keywords": "Modular Shader Generator Deep Dive The modular shader generator is fairly simple to use, you just call the GenerateShader method, pass in the destination folder path, the modular shader, and you're done. But it may be useful to know what happens underneath and talk about the generation steps. First of all, the GenerateShader is a wrapper that sets up one or more ShaderContext objects, and these objects are what actually generate the shader. This separation is done so that the generator is unified in all use cases, for example in the library it's used for both generating the shader and generating optimised shaders. GenerateShader method In the case of the GenerateShader method, it first retrieves and reloads all the used template assets, then it evaluates all the possible variants combinations the modular shader has (as a reminder, variants are those templates that to be able to have the module toggled on and off, need to have the code actually removed, ending up with multiple shader files), after that it generates the PropertyBlock string, which contains all properties declared in all modules (if you have the shader setup to use templates for properties, only the ones in the dedicated template in the modular shader asset is included here, the rest will be handled later with the other templates). The PropertyBlock string is generated outside of the shader context here cause they will all share the same properties, so you only need to generate it once. Note in an ideal world reloading all template assets needed should not be done since you should be able to just take the reference from the modular shader and shader module assets, but in some specific situations (specifically when you first import unitypackages containing a modular shader, up until editor restart) that returns empty assets instead of our templates, so we just reload them for the generation process Now for each variant combination a ShaderContext is generated, by passing all its relevant informations. Now that we have a list of contexts to run, we will just process them all in parallel, since everything that a context does is manipulating strings, we aren't limited to do it inside the main thread. This speeds up a lot the generation of shaders that have a lot of variant combinations. After all the contexts are done, we tell unity that we are starting to edit assets, write down files with the result of each context, and then tell unity we finished editing, so that it can import the newly generated shaders. To finish it off, we load all the newly generated shaders and add a reference to them in the modular shader asset, this way the modular shader always contains a reference to the last shaders that were generated with it. The ShaderContext As we previously said, a ShaderContext takes care of generating a single shader file using the informations it has been given by calling its GenerateShader method. First it generates the name for both the file and the shader path in the material's shader selector, after that it generates the property section of the shader by using the provided property block or by generating its own if it's empty (in this case it makes the assumption that it's doing it for optimised shaders and does not include module's Enable properties). Adding templates Then it's time to generate the SubShader block by applying the templates. They get listed from modules and then reordered by queue (this should keep the templates with the same queue ordered by position of their relative modules). Then for each template there's a check to see if the template is a toggleable template that doesn't need a variant, in which case the template code gets enclosed by an if check (in optimised shaders this would never happen since the module would not be even in the list of used modules for the context generation). After that it checks for the presence of any internal keyword , and each found one gets replaced with a runtime generated one that is dependent on the module id and original internal keyword. This is to assure that internal keywords that are in multiple modules don't actually get used by different modules from the one it was intended for. Note the instanced internal keywords are stored in a dictionary where the key is a combination of module id and original internal keyword, so that it can be easily retrieved when we search an internal keyword for a specific template in a module. Now it's time to add the template to the main code by finding the indexes of the selected keywords (or instanced internal keywords), and inserting the template string (with the mentioned modifications) in each of these indexes, from the last one to the first one. Note We go from last to first index because if we went the other way around after the first index is used the others would not be valid, since the keywords positions have shifted indexes by the amount of characters equivalent to the lenght of the inserted template. We could have just taken that into account and also shifter our indexes after each iteration, but it's just simpler to start from the last and go backwards. Once all templates have been dealt with, all the instanced internal keywords get removed, since they're not going to be used anymore. Adding functions Now it's time to add all the functions declared in modules, which is a bit more involved process since there are multiple things to keep track of. Fist we list all the functions that have to be added, then we start by adding all the variables in their respective keywords. This is done by looping each function, looking for which variables it declares, check which keywords they're supposed to go in, and then adding them to the respective list (these lists are contained in a dictionary where the key is the keyword they should go in). iterating all functions for their variables, for each list a string with the variable declarations is generated (duplicates of variables get removed here), and then each string is added to the shader code with the same logic templates did (minus the internal keywords that are not here anymore). Now that variables are dealt with, it's time for the functions themselves. Their order depends first on where they declare to go (keyword or other functions), then by their queue. Due to that, functions that go to keywords are the first to be looked at, since they are the root of the call chain. Therefore we look at all keywords that are being used by functions, and for each keyword we list all functions that go there, and order them by queue. Just like templates, we check if the function needs to be able to be disabled and in that case we enclose the call with an if check, and then append the string to the call sequence. Before cycling to the next function in the list, we need to check if the function has other functions that declare to be appended right after it. This is pretty much the same process done with these top level functions, but using the function name instead of a keyword, so the entire process can be repeated recursively. And after that the next function in the list is evaluated and the process repeats. At the end of the call sequence evaluation of each keyword, the entire call sequence string gets appended to each keywords, with the same logic already used for templates and variables. During the evaluation process functions also get reordered into a list where the order is dependent on when a function has been used by the sequence, and this is used now to write down the actual function code implementation stored in template assets. For each function in the reordered list its code template string is taken and added to the relative keyword (in case of no keywords declared, the default DEFAULT_CODE keyword is used). Note the code strings are stored in a dictionary of StringBuilders first, and then added to the main code by keywords later on, so that the final insertion to the keywords is done only once per keyword. During this process is also made sure that a code implementation template is not added more than once per keyword, to avoid code duplication that would make the shader fail to compile. Final steps Now that functions have been taken of, there's some last things to take care of. First is to add the defined CustomEditor so that is used the inspector that has been defined in the modular shader asset, then a custom PostGeneration action is called. This action can be passed to the shader context to have custom code run at this step, this could be useful in case someone needs to do some edits to the shader code before it is finalized. Tip You can still look for keywords at this stage. After that all the keywords used up to now get removed from the final shader code, since they are not needed anymore. And everything ends with a final code cleanup where the shader code gets indented correctly (for the most part) and line terminators get normalized."
  },
  "guides/GettingStarted.html": {
    "href": "guides/GettingStarted.html",
    "title": "Getting started | Modular Shader System Documentation",
    "keywords": "Getting Started First of all, we need to import the unity package with the asset, if you haven't downloaded yet go here and grab the latest version. Once everything is imported let's start creating our first modular shader! Creating the Modular Shader Everything starts with a Modular shader asset. This Asset contains all the basic information about the shader. Create a new asset file by selecting Assets > Create > VRLabs > Modular Shader > Modular Shader (alternative you can bring up the Assets menu by right clicking in the project tab). Warning All assets specific for the Modular Shader System like Modular Shader, Shader module and Template assets should always go inside an Editor folder, since they're used only in editor to generate the shaders. Now fill out the basic informations with the proper data (for more details about it, check this page ). After that, it's time to fill out some settings, let's start with the shader path. The shader path is just what you would fill in in the first line of the shader file and that defines the path of the shader when searching in the shader selector of the material. After that there's the Custom editor value. If you're using a custom inspector you would fill it out with the Namespace.ClassName of the shader inspector you're going to use. In this example we'll keep it empty to let the shader use the default inspector. Now, let's get into the meat and let's make the base skeleton for our shader. This skeleton will be in the template asset that will be placed in the shader template field. Create the new template file by selecting Assets > Create > VRLabs > Modular Shader > Template , open the file in any text editor and paste the following code: ZTest[_ZTest] ZWrite[_ZWrite] Cull[_CullMode] Pass { Tags { \"LightMode\" = \"ForwardBase\" } CGPROGRAM #pragma target 3.0 #pragma vertex Vertex #pragma fragment Fragment #include \"UnityStandardUtils.cginc\" struct VertexData { float4 vertex : POSITION; float2 uv : TEXCOORD0; float3 normal : NORMAL; }; struct FragmentData { float4 pos : SV_POSITION; float3 normal : NORMAL; float2 uv : TEXCOORD0; float3 worldPos : TEXCOORD1; }; FragmentData FragData; float4 FinalColor; #K#DEFAULT_VARIABLES #K#DEFAULT_CODE FragmentData Vertex (VertexData v) { FragmentData i; UNITY_INITIALIZE_OUTPUT(FragmentData, i); #K#VERTEX_FUNCTION return i; } float4 Fragment (FragmentData i) : SV_TARGET { FragData = i; FinalColor = float4(0,0,0,0); #K#FRAGMENT_FUNCTION return FinalColor; } ENDCG } In this template we set a couple of keywords for hooking up code for vertex and fragment functions, as well as function implementations and properties declarations. To get more details about keywords in modular shader system, check out this page (we really encourage you to check it right now, as we're gonna talk about them more here). After that just put the template into the shader template field. Now try to generate the shader to see what the system does (you will be prompted to select in which folder to put the generated shader). Shader \"Example/ExampleShader\" { Properties { } SubShader { ZTest[_ZTest] ZWrite[_ZWrite] Cull[_CullMode] Pass { Tags { \"LightMode\" = \"ForwardBase\" } CGPROGRAM #pragma target 3.0 #pragma vertex Vertex #pragma fragment Fragment #include \"UnityStandardUtils.cginc\" struct VertexData { float4 vertex : POSITION; float2 uv : TEXCOORD0; float3 normal : NORMAL; }; struct FragmentData { float4 pos : SV_POSITION; float3 normal : NORMAL; float2 uv : TEXCOORD0; float3 worldPos : TEXCOORD1; }; FragmentData FragData; float4 FinalColor; FragmentData Vertex (VertexData v) { FragmentData i; UNITY_INITIALIZE_OUTPUT(FragmentData, i); return i; } float4 Fragment (FragmentData i) : SV_TARGET { FragData = i; FinalColor = float4(0,0,0,0); return FinalColor; } ENDCG } } } Main notable thing: all keywords defined have disappeared. This is because keywords defined are only used to generate the final shader, once that is done they get remove to avoid shader compilation error that would happen otherwise. Other than that you can see that the shader has the correct name and does not implement a custom inspector since we did not set that field. Also it currently uses properties ZTest, ZWrite and Cull that are not yet defined, let's fix that by filling out the parameters info. Now if we try to generate the shader again (if you reselect the same folder you will override the shader) you will see the shader now also has properties generated. Shader \"Example/ExampleShader\" { Properties { [Enum(UnityEngine.Rendering.CompareFunction)] _ZTest(\"Depth test\", Float) = 4 _ZWrite(\"Depth write\", Float) = 0 [Enum(UnityEngine.Rendering.CullMode)] _Cull(\"Cull Mode\", Float) = 2 } SubShader { ZTest[_ZTest] ZWrite[_ZWrite] Cull[_CullMode] Pass { Tags { \"LightMode\" = \"ForwardBase\" } CGPROGRAM #pragma target 3.0 #pragma vertex Vertex #pragma fragment Fragment #include \"UnityStandardUtils.cginc\" struct VertexData { float4 vertex : POSITION; float2 uv : TEXCOORD0; float3 normal : NORMAL; }; struct FragmentData { float4 pos : SV_POSITION; float3 normal : NORMAL; float2 uv : TEXCOORD0; float3 worldPos : TEXCOORD1; }; FragmentData FragData; float4 FinalColor; FragmentData Vertex (VertexData v) { FragmentData i; UNITY_INITIALIZE_OUTPUT(FragmentData, i); return i; } float4 Fragment (FragmentData i) : SV_TARGET { FragData = i; FinalColor = float4(0,0,0,0); return FinalColor; } ENDCG } } } Perfect, now the shader has all the properties it uses. But it still doesn't output much since both the vertex and fragment shaders don't really anything at the moment. Now it's the time to make a module that will give some functionality to this shader. Note Theoretically you could create a fully working shader just in the main template, and just leave the keywords as entry points for additional features. The main downside for that is that the main hooks have to be inside the main template somewhere, meaning that all the relevant code (like the vertex and fragment function) will have to be there and not enclosed inside some cginc file, since the system doesn't really crawl into includes when it generates the shader, and therefore can't really know if inside one of them there's some keyword. Using cginc file to put your shader code is not advised with the modular shader system, we instead promote the usage of templates in modules to obtain a similar result. (you are still able to use default includes just fine) Creating a Module Time to create a module to give life to this shader, first create the module asset file by selecting Assets > Create > VRLabs > Modular Shader > Shader Module . The informations area of the asset is similar to the modular shader assets, but with some key differences: The id needs to be filled in since it's going to be used by the system to check for duplicate modules, incompatibilities, and dependencies. There's a list of dependencies. There's a list of incompatibilities. In our case we won't need to add any dependency or incompatibility, so we will just fill everything else with the proper information. Now time for the interesting bits, first of all, we need to make the vertex shader set the proper output. This is a good time to add a template and hook it to the VERTEX_FUNCTION keyword. First let's create a new template to contain the vertex function implementation: i.pos = UnityObjectToClipPos(v.vertex); i.normal = UnityObjectToWorldNormal(v.normal); i.worldPos = mul(unity_ObjectToWorld, v.vertex); i.uv = v.uv; And after that add a new template in the list and set the asset slot with the newly created template asset, and add some other data. The queue value is used to decide the order in which the templates are used to generate the shader. This is very important since a template is placed inside every keyword found at the moment the template is placed in, meaning that if templates that are added in a later stage have that same keywords, the template won't be added to those cause they're not there yet. The order in which templates are evaluated and added is from lower queue to higher queue ones, if 2 templates are on the same queue, the first one will be based on the order of the relative modules in the shader, and in case 2 templates are in the same module and have the same queue, the one higher in the list goes first. The generate variant toggle is used to define if the system has to generate different shaders to have the module this template is be enabled or disabled (we will talk more about enabling and disabling modules in this page ), this module will always be enabled so this setting is not used and should be left untoggled. In our case even if the module was able to be enabled and disabled, this toggle would still be left unchecked, since the code in this template is inside a function and can be enabled and disabled by doing an conditional check, so there's no need to create multiple shaders. The keywords list contains all the keywords this template will be hooked to, in our case it will be added only on the VERTEX_FUNCTION keyword. Nice, now let's test it by adding the module in the modules list of the modular shader and generate the shader again. Shader \"Example/ExampleShader\" { Properties { [Enum(UnityEngine.Rendering.CompareFunction)] _ZTest(\"Depth test\", Float) = 4 _ZWrite(\"Depth write\", Float) = 0 [Enum(UnityEngine.Rendering.CullMode)] _Cull(\"Cull Mode\", Float) = 2 } SubShader { ZTest[_ZTest] ZWrite[_ZWrite] Cull[_CullMode] Pass { Tags { \"LightMode\" = \"ForwardBase\" } CGPROGRAM #pragma target 3.0 #pragma vertex Vertex #pragma fragment Fragment #include \"UnityStandardUtils.cginc\" struct VertexData { float4 vertex : POSITION; float2 uv : TEXCOORD0; float3 normal : NORMAL; }; struct FragmentData { float4 pos : SV_POSITION; float3 normal : NORMAL; float2 uv : TEXCOORD0; float3 worldPos : TEXCOORD1; }; FragmentData FragData; float4 FinalColor; FragmentData Vertex (VertexData v) { FragmentData i; UNITY_INITIALIZE_OUTPUT(FragmentData, i); i.pos = UnityObjectToClipPos(v.vertex); i.normal = UnityObjectToWorldNormal(v.normal); i.worldPos = mul(unity_ObjectToWorld, v.vertex); i.uv = v.uv; return i; } float4 Fragment (FragmentData i) : SV_TARGET { FragData = i; FinalColor = float4(0,0,0,0); return FinalColor; } ENDCG } } } Now the shader outputs something! It's pitch black, but don't worry, we're going to give it some more color soon, by adding a function to the fragment function. But first, we need a color property so that we can set a color from the inspector, so let's add it to the properties list of this module. Now time to create a function. Let's start that by creating another template asset (yes, functions need template assets as well, to get the function implementation). void ApplyColor() { FinalColor = _MyColor; } Template assets used for functions always need to have a void function with no parameters, in this case ApplyColor . Now that we have the asset, let's fill the function data The name has to be the same as the name of the void function with no parameters mentioned before. the Append After field contains the hook for the function. Unlike just templates this hook can be either keywords or other function declared in this or other modules. For this reason unlike other fields if you want to target a keyword here you have to keep the #K# prefix. The Queue field works the same as in templates, with the difference being that everything is in the context of the same Append After . The Used Variables list, just like the title suggests, contains all the variables that are going to be used in this function. in our case the only variable we need to put is the _MyColor variable (since the property is a Color property, it translated to a float4 in shader). Warning While we do use the FinalColor variable in the function, you should not put it in the variables list because it is already declared by the template itself. in the variables list of functions you should never put variables that for some reason are already available to be used in that place of the shader. The Variable Keywords and Code Keywords lists are used to tell where the function template code and the variables declarations should be placed. By default if the lists are empty the generator will try to put them in some default keywords, respectively being DEFAULT_VARIABLES and DEFAULT_CODE . In our case those keywords are exactly where we need them to be, so we leave the lists empty. Now, let's generate the shader again and see the result. Shader \"Example/ExampleShader\" { Properties { [Enum(UnityEngine.Rendering.CompareFunction)] _ZTest(\"Depth test\", Float) = 4 _ZWrite(\"Depth write\", Float) = 0 [Enum(UnityEngine.Rendering.CullMode)] _Cull(\"Cull Mode\", Float) = 2 _MyColor(\"My Color\", Color) = (1, 1, 1, 1) } SubShader { ZTest[_ZTest] ZWrite[_ZWrite] Cull[_CullMode] Pass { Tags { \"LightMode\" = \"ForwardBase\" } CGPROGRAM #pragma target 3.0 #pragma vertex Vertex #pragma fragment Fragment #include \"UnityStandardUtils.cginc\" struct VertexData { float4 vertex : POSITION; float2 uv : TEXCOORD0; float3 normal : NORMAL; }; struct FragmentData { float4 pos : SV_POSITION; float3 normal : NORMAL; float2 uv : TEXCOORD0; float3 worldPos : TEXCOORD1; }; FragmentData FragData; float4 FinalColor; float4 _MyColor; void ApplyColor() { FinalColor = _MyColor; } FragmentData Vertex (VertexData v) { FragmentData i; UNITY_INITIALIZE_OUTPUT(FragmentData, i); i.pos = UnityObjectToClipPos(v.vertex); i.normal = UnityObjectToWorldNormal(v.normal); i.worldPos = mul(unity_ObjectToWorld, v.vertex); i.uv = v.uv; return i; } float4 Fragment (FragmentData i) : SV_TARGET { FragData = i; FinalColor = float4(0,0,0,0); ApplyColor(); return FinalColor; } ENDCG } } } Now the shader is a fully functional shader that outputs the color we select with the property! If you check the code you can see it added the _MyColor property, and placed its variable declaration and function definition in the place of the standard keywords, and created call to said function in the fragment shader. From here you can add templates and features to this module to add features, or make a separate module for other features, the possibilities are endless. Templates vs Functions Not the big question rises: when do you use templates and when do you use functions? don't they do the same thing by stitching code around? Well, depends, they both do more or less the same thing, but in slightly different ways. Templates are just a dumb \"place code here now\", so they're conceptually really simple and you can theoretically generate an entire shader with just that concept alone (some big VRChat shader developer is doing just that...). But being simple also means having to manually deal with some issues like \"is this function available in this bit of code?\" \"do i have to define the variable here or if i do it i'll get an error cause it's already defined?\". Functions on the other hand are a bit more complex to setup since they require you to tell them used variables, where to put them, where to put the code etc., but this also gives the system more power to handle some stuff, like variables being available without making duplicated. Another big advantage is the possibility to use other functions as hook points for your functions, which means that the more functions are used, the more hooks are available to add more functions, giving you great flexibility, especially in big shader projects. Also the debugging tools available for viewing functions are inherently better due the bigger amount of data available, which makes way easier to add functionality to someone else's modular shader with a custom module without too much prior knowledge of the shader design. Of course functions also have some disadvantages outside of the longer initial setup. The main issue is that due to how they work, they can only be added to keywords inside a function implementation (like the fragment function in the example above). Our initial intent with this subdivision was to have templates becoming the base skeleton of the final shader, with hook points inside the main functions to start adding modules with your own functions to add features."
  },
  "guides/index.html": {
    "href": "guides/index.html",
    "title": "Welcome to the General Guides Section | Modular Shader System Documentation",
    "keywords": "Welcome to the General Guides Section Here you will find general guides on how to use the Modular Shader System. If you're a first time user you may want how to get started here"
  },
  "guides/ModularShaderComponents/Keywords.html": {
    "href": "guides/ModularShaderComponents/Keywords.html",
    "title": "Keywords | Modular Shader System Documentation",
    "keywords": "Keywords Keywords are a specific piece of text placed all around templates, and are used as hook points to place other templates, function calls, variables, etc. They should not be confused with shader keywords , as these keywords are only used by the modular shader system generation process, and generated shaders will not have any of these keywords in them. A keyword is composed by #K# followed by a name like EXAMPLE_KEYWORD , with no other text in that line. // this is valid ...code... #K#NICE_KEYWORD ...code... //this is not valid ...code... #K#NICE_KEYWORD ...code... ...code... //this is also not valid ...code... ...code... #K#NICE_KEYWORD ...code... There's also a variation with #KI# in place of #K# , in this case the keyword is considered local meaning that it is only usable from templates within the same module. Also functions don't have access to local keywords, they're for module templates only. When referencing keywords inside shader module assets, you usually do not include the #K# prefix to identify the keyword, with the exception of the Append After value of a function definition, where the prefix is needed to identify the value as a keyword instead of a function call."
  },
  "guides/ModularShaderComponents/ModularShader.html": {
    "href": "guides/ModularShaderComponents/ModularShader.html",
    "title": "Modular Shader | Modular Shader System Documentation",
    "keywords": "Modular Shader This Asset contains all the basic information about the shader, divided in the following categories: Base Informations: this part is mainly informational, but could be used by systems made to work with the modular shader system. Settings: data here will be used to generate the shader. You can create a modular shader asset by selecting the menu Assets > Create > VRLabs > Modular Shader > Modular Shader . Basic Informations Info about the shader, not really used by the modular shader system, but available for third party implementations. Id: Identifier for the shader, should stay unique. Normally it should have a namespace like structure like Author.Name.Subname , but anything goes. Name: User friendly name for the modular shader. Author: Author of the modular shader. Version: Version of the modular shader. Description: A short description of the modular shader. Settings Settings of the shader, which will change how the shader gets generated. Shader template: The shader template is just shader code that will go inside the main Subshader block. This will be the base of the shader and where tha main hooks will be. These hooks are called Keywords (not to be confused with shader keywords) and they're always defined by starting the line with #K# (the entire line should be just the keyword). Note The modular shader system currently only supports one Subshader block. Note We talk more in specific about Keywords in this page . Shader Path: It will be shader path of this modular shader when searching in the material settings. Custom Editor: Custom editor the shader will use. Note Being a modular shader, you may end up having it changing the properties available, so you should probably account for that in your custom inspector Properties: The shader properties that you're going to have. These properties wil always be included in the generated shader, but they may not be the only properties available, since each module can also have properties. Properties from templates: If for some reason you want to have more control on how the properties are declared, you check this toggle and you will have available a keyword called SHADER_PROPERTIES from which you can point templates to in modules. You also can set a base template for setting properties that are always going to be available, just like you would if you set them in the properties section. Warning It is preferable to have properties in the properties list compared to have them inside a template, but you're free to take the approach you want. Base Modules list: One of the most important part of the settings, the Base modules list, contains the modules that are going to be used by the shader. These modules are what will compose the final generated shader. Note The basic modules is not the full list of modules, there's also another list of modules that are not listed by the inspector, but that's meant to be used by third party systems that want to automatically manage modules."
  },
  "guides/ModularShaderComponents/ShaderModule.html": {
    "href": "guides/ModularShaderComponents/ShaderModule.html",
    "title": "Shader Module | Modular Shader System Documentation",
    "keywords": "Shader Modules A module is a component that can be added and removed from a modular shader. Like the modular shader asset it has a Base Information and Settings sections, but unlike in the modular shader, you actually need to set at least some of the Base Information settings, since they're used for checking module compatibility inside a modular shader. You can create a shader module asset by selecting the menu Assets > Create > VRLabs > Modular Shader > Shader Module . Basic Informations Id: Id of the module. Like the Modular Shader one, but it is used to check duplicates, incompatible modules and required modules inside a modular shader. You really should stick to a specific naming convention here. Name: User friendly name for the shader module. Author: Author of the shader module. Version: Version of the shader module. Description: A short description of the shader module. Module Dependencies: List of dependencies this module has, you should have the id of the modules this module needs in order to work. Incompatible With: List of modules that are incompatible with this module, works the same as module dependencies but for incompatibility instead. Settings Enabled: This is a special int shader property that will define if the module is enabled or not. When this area is filled the module will have the ability to be turned on and off entirely. This works by having the generated shader containing conditional statements for function calls and templates of this module, unless the template needs a variant , in that case the system just generates multiple versions of the shader based on the combinations of the variants turned on and off. Eventual optimized shaders will have disabled modules completely removed from the shader code, making it a good way to optimise out unused features once the material settings are of your liking. Note The library has an API to generate optimised shaders, but that's not used anywhere by default, so if you need the feature you need to create your own editor tool to generate optimised shaders. Properties: Acts just like the properties in the modular shader asset. Templates: A list of templates the module has. In here you have the possibility to set the template assets, and select which keywords this template code is going to placed into. Warning The keyword has to omit the #K# , so put the template inside the keyword #K#MY_KEYWORD you should write MY_KEYWORD . This behavior with keywords is the same everywhere except where specifically noted. The queue value also determines when this placement of the code in the shader, which can drastically change the result. lower numbers means the operation is done before templates with higher numbers. The Generate variant toggle defines if this template does not support being inside an if statement due to it being placed in areas of the shader where that would be a syntax error (basically everywhere except inside some functions, like the vertex or fragment functions). When it's checked, the system will generate multiple versions of the shader, one with this code in there, and one without. Multiple variants will cause the generator to generate an exponential amount of shaders, due to the need to check for all possible cases. Functions: The more complicated part of the module. It's a bigger abstraction compared to templates, and needs more data to be filled in order to work. But this also gives the system more infos to play with, which comes really useful when using the debugging tools offered by the Modular Shader System. Each function is defined by: A name. A template containing the function definition. An Append After string. A Queue value. A list of variables used by the function. A list of keywords for variables. A list of keywords for the function code. Name It's the name of the function that has to be called. Template It's the template containing the code of the function, as well as other dependent code that the function needs. It should have a void function with no parameters called the same way of the Name defined before, also it should avoid defining any variable, since those should be given to the variables list. This function will be called in the point defined by the Append After . Append After This property defines where this function call is placed. 2 types of values are valid here: The name of another declared function. A keyword that is placed inside a function. When using another declared function, you just type the name of said function, when using a keyword instead type the full keyword name, with the #K# included since the system has to know you want to place it after a keyword and not after a function call. Queue This works similarly to how templates Queue work, where low numbers will be written in the shader before higher ones. The main difference is that this queue value is valid only in the context of the same Append After value. This is due to the fact that each function call under the same Append After will be placed right after said function, and before whatever function was about to be placed after that one. You can try to play with it and check the Function Timeline in the Modular Shader Debugger to see the order of the functions calls. Variables In this list you define all the variables that are going to be used by this function and that are not available by default from some template. You should declare a variable here even if another function placed above already defines it. the system will only create the variable once upon generation, but this way has the knowledge that both functions use it. The variable values will depend if other functions before this one used it and set it, or it has never been used. So this is the main way you can pass results from a function to another. Note Remember to write down variables that derive from a shader property as well, because by default the system will not assume that all properties are used inside the shader. Tip You should keep in mind that the variable may have not been used by any function until this function uses it. If you need this variable to have some value that is defined by another function in another specific module, you should make sure this function is called after, and also to set this module is dependent on. If you just need to have the variable be defined and just act based on its value, then just be sure that the function can handle a default value on said variable. Variable Keywords This is a list of keywords where all the variables used by this function will be declared to, it not already there. Ideally this keyword is placed in an area before all functions implementations, so that the functions can access those variables. If empty the variables will automatically go after the default DEFAULT_VARIABLES keyword (the keyword has to be defined somewhere in the templates, or these variables will not be defined anywhere). Function Keywords Same as the variable keywords, but for placing the code inside the templates given to the function. If empty the template code will automatically go after the default DEFAULT_CODE keyword (the keyword has to be defined somewhere in the templates, or the code will not be placed anywhere)."
  },
  "guides/ModularShaderComponents/TemplateAssets.html": {
    "href": "guides/ModularShaderComponents/TemplateAssets.html",
    "title": "Template Assets | Modular Shader System Documentation",
    "keywords": "Template Assets A template asset is an asset that contains shader code. Its purpose depends on where this template asset is used, for example if it's used for a function definition, it will be used for the function declaration, if it's used for the templates section of a module, it's going to just be placed as code under that keyword. You can create a template asset by selecting the menu Assets > Create > VRLabs > Modular Shader > Template . The asset doesn't have an editable inspector, but you can edit the file itself in any text editor."
  },
  "guides/ModularShaderComponents/TemplateCollectionAssets.html": {
    "href": "guides/ModularShaderComponents/TemplateCollectionAssets.html",
    "title": "Template Collection Assets | Modular Shader System Documentation",
    "keywords": "Template Collection Assets This asset is a collection of multiple templates under a single file. It's not directly used in its entirety in any place in the library, you can use any single template inside this collection like it was its own asset. Like the template asset it is just a text file where you can write shader code, but unlike a template asset you need to start each part of code with a #T#TEMPLATE_NAME to tell the asset everything after it is part of this specific template. You can have multiple template keywords like the above, and every new one ends the previous template and starts the new one. The template name will be the name of that template keyword. You can create a template collection asset by selecting the menu Assets > Create > VRLabs > Modular Shader > Template Collection ."
  },
  "guides/ModularShaderDebugger/FunctionTimeline.html": {
    "href": "guides/ModularShaderDebugger/FunctionTimeline.html",
    "title": "Template Graph | Modular Shader System Documentation",
    "keywords": "Function Timeline The function timeline is a default tab of the Modular Shader Debugger that shows the functions flow inside a modular shader, divided by root keyword. The is composed of the following areas: The timeline in the central area Selected function information Module information of the selected function Function's template code view Timeline The main timeline shows the order in which each function will be placed inside the selected root keyword. The order reflects the order in which the functions will be called in the shader, from left to right. If multiple function elements have some overlap it means that there is a direct dependency between them, with the smaller one usually being the one that has the AppendAfter value set to the bigger one, this information can be shown by looking at the function's information after selecting the element. You can select which timeline to show by selecting the root you want to see in the dropdown above the timeline. Timeline element A single element contains the name of the function on the left, and it's queue on the right (the queue is always relative to its parent AppendAfter ) The selected element will have a cyan border, while elements with a yellow borders indicate a function that contains the variable selected in the Selected Function information area. Selected function information This area shows informations relative to the function, such as the name, queue, and where it's appended. It also shows its variables and in which keywords variables and implementation are put on. Selecting a variable will show which other functions in the timeline that use the same variable, giving you the possibility to check where it's used and for what. Function's module base info This area shows some basic informations about the module where the selected function is defines, and give you a quick way to select the module asset for further inspection if needed. Function code template This area shows the template containing the implementation of the selected function."
  },
  "guides/ModularShaderDebugger/ModularShaderDebugger.html": {
    "href": "guides/ModularShaderDebugger/ModularShaderDebugger.html",
    "title": "Modular Shader Debugger | Modular Shader System Documentation",
    "keywords": "Modular Shader Debugger The Modular Shader Debugger is a tool used to display various informations about a selected modular shader that is useful when you're in the process of creating a module for said shader. The window is composed by a top bar containing a field for the selected modular shader, and a button to reload the selected shader, in case the modular shader or one if its modules has been updated. The rest of the window is composed by a tab row that by default contains 2 selectable tabs, the Template Graph and the Function Timeline . The window can be extended by inheriting IModularShaderDebuggerTab . Custom tabs can be useful to show specific informations you may need to show in your custom modular shader project."
  },
  "guides/ModularShaderDebugger/TemplateGraph.html": {
    "href": "guides/ModularShaderDebugger/TemplateGraph.html",
    "title": "Template Graph | Modular Shader System Documentation",
    "keywords": "Template Graph The template graph is a default tab of the Modular Shader Debugger that aims at providing a general view of how the templates are going to be linked together when generating the shader. The template tree starts from the left with a root node representing the main template defined in the modular shader asset (and another one to define the root of templates used for properties when the Properties from templates toggle of the modular shader is on). From then templates are parsed like they would during shader generation and their relative nodes appended and connected with the keyword they defined. If a templated declares to be attached to multiple keywords, this is reflected in the graph by having multiple nodes attached, each to its keyword. This process may end up not showing some templates that are declared in the asset, if that happens it usually is indicative of errors in some settings of those templates, since they would never be used when generating the shader to begin with. This way the graph is representative of the structure of the generated shader. Template Node The template node is divided in 3 sections: the top bar, the used keyword on the left, and the declared keywords on the right. There can be exceptions where either the left of right area is missing due to the node being the root (in the former case) or a template that doesn't declare keywords (the latter case). The top bar includes 3 elements: The template name The module it comes from (in the form of the id of the module) Its queue value (on the right) The left area will always contain the keyword that is used to place this template (with the exception of root nodes that don't have this area). The right area contains all the keywords contained, regardless of if they're used for other templates or not. Internal keywords are indicated with an (i) at the end. Right clicking the node will give you a popup menu with the option of showing off the content of the template, so you can quickly check what the template does."
  },
  "guides/ThirdPartyModule.html": {
    "href": "guides/ThirdPartyModule.html",
    "title": "Create a Module for Third Parties | Modular Shader System Documentation",
    "keywords": "Create a Module for Third Parties Up until now we assumed that you've been working on your own modular shader where you know what each piece does and how it's designed already. But if you're making a module to add a specific functionality to someone else's shader, you won't have the luxury of knowing exactly how it works, unless the creator of that shader made ample documentation for it. Luckily we have the means to get at least enough informations to try and add some functionality of our own. In this example we will use the modular shader built in Getting Started as a reference modular shader, but we will act like we didn't make it and we know nothing about it. The Modular Shader Debugger Before starting doing anything, we probably need to look on the modular shader first. We could open the modular shader and shader module assets, but there's a better way to get a quick look: the Modular Shader Debugger. Go to the menu VRLabs > Modular Shader > Modular Shader Debugger . A window will open with an object field and 2 (or more) tabs. put the modular shader you want to look a into that field. Template Graph This first tab, called Template Graph is a node graph where all the template hierarchy is shown. From here you can look at all the templates the modular shader uses with its current module setup. Each node is a template, and on the left side it shows the keyword used to add it, while the right side contains all the keywords it declares. Each connection indicates that the template on the right of the connection has been placed inside the the template on the left of the connection, by the keyword indicated by the port. Our case is fairly simple, it's just the base template and an extra template. Note In the case a template had multiple keywords to be placed on, in the graph there would be a number of copies of said template for each different keyword. So if for example the template had been defined to be placed in both the VERTEX_FUNCTION and FRAGMENT_FUNCTION keywords we would have seen 2 different notes indicating the same template. This is because the template graph is solving the template tree like it the shader generator would, so multiple uses of a template in different keywords will be instanced multiple times (multiple instances on the same keyword in different places of the same parent template are not duplicated). Since it solves the template tree like the shader generator, it will also not include templates that are in the assets but are set up wrong and wouldn't end up inside the final shader, like templates with the queue set up wrong or similar. The tree is an image of what is actually used in the final result By right clicking a node you have the possibility to preview its code and get a quick idea on what it does. We have a general idea about the templates used by this modular shader, let's now go and look at the functions it may use. Function Timeline The Function Timeline is a busier tab where you can see the order of the functions being called from a root keyword. you can select which keyword to select from the dropdown in the top, and clicking any function will show up its informations, as well as info about the module it is declared on and the template it uses. In our case we only have one function in the FRAGMENT_FUNCTION keyword. We can see that there's a _MyColor variable, and that there's a FinalColor variable being used in the implementation, despite not being in the variables list. The author of this shader has either forgot to include FinalColor in the list or the variable is already statically defined in a template. By looking at the templates we can see that the FRAGMENT_FUNCTION keyword is only on the base template, let's check the code quickly and see what's going on there. Bingo! The FinalColor variable is here, and is initialized with 0, means that it's handled by the templates and we can use it as we please in our modules without declaring its usage. Now we have a rough idea of how the area we want to hook in works, and we can start build our own module. Create the module So, we've already done this before, so let's go through this quickly. We want to create a module that adds a texture to the output of the material, tinted by the already available color. So we create the asset, fill in the informations, add a property for our texture, and add a function that uses said texture to multiply the final color with it. void ApplyTexture() { FinalColor *= UNITY_SAMPLE_TEX2D(_MyTexture, TRANSFORM_TEX(FragData.uv, _MyTexture)); } Now just add the module to the modular shader and generate the shader. If everything went well, you can now use the newly generated shader with the texture slot. Toggle The Module Texture samples can be expensive, and we don't want to use it always, so we want to do a toggle for it. We could do it manually in the function code, but since the texture sample is everything the shader does to begin with, we can just toggle the entire module on and off. This is fairly simple to do with the modular shader system, since each module can define an Enabled property, which will become a float property used to check if the module should be enabled or not. Let's fill the data in and regenerate the shader. We can now toggle on and off the texture without doing anything extra. This is due to the generator encapsulating the function call into an if statement to check if the value of toggle property is the value we've given to to the module as a condition. While generally branching in shaders is a bad idea, the compiler generally optimises where he can, and on top of this, if the shader you added the module in came with some editor scripts that use the capability of the generator to generate shaders optimized for their current material settings, whenever you disable the module and then run said script, the entire module code will not be included in the generated shader at all. Note The modular shader system doesn't come with a 1 click script that optimizes the material for you, instead comes with an api to let you do that in your own setup, We decided to go this way cause we think it gives more flexibility to shader creators to integrate the library in their own workflow."
  },
  "index.html": {
    "href": "index.html",
    "title": "Modular Shader System | Modular Shader System Documentation",
    "keywords": ""
  },
  "Next/api/index.html": {
    "href": "Next/api/index.html",
    "title": "Welcome to the API Section | Modular Shader System Documentation",
    "keywords": "Welcome to the API Section Here you will find the documentation of each publicly available classes within the API."
  },
  "Next/api/VRLabs.ModularShaderSystem.Debug.FunctionTimeline.-ctor.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.Debug.FunctionTimeline.-ctor.html",
    "title": "Constructor FunctionTimeline | Modular Shader System Documentation",
    "keywords": "Constructor FunctionTimeline FunctionTimeline() Declaration public FunctionTimeline()"
  },
  "Next/api/VRLabs.ModularShaderSystem.Debug.FunctionTimeline.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.Debug.FunctionTimeline.html",
    "title": "Class FunctionTimeline | Modular Shader System Documentation",
    "keywords": "Class FunctionTimeline Modular Shader Debugger tab used to show the functions flow in the modular shader Inheritance Object FunctionTimeline Implements IModularShaderDebuggerTab Namespace : VRLabs.ModularShaderSystem.Debug Syntax public class FunctionTimeline : IModularShaderDebuggerTab Constructors Name Description FunctionTimeline() Properties Name Description TabContainer TabName Methods Name Description UpdateTab(ModularShader)"
  },
  "Next/api/VRLabs.ModularShaderSystem.Debug.FunctionTimeline.TabContainer.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.Debug.FunctionTimeline.TabContainer.html",
    "title": "Property TabContainer | Modular Shader System Documentation",
    "keywords": "Property TabContainer TabContainer Declaration public VisualElement TabContainer { get; set; } Property Value Type Description VisualElement Implements IModularShaderDebuggerTab.TabContainer"
  },
  "Next/api/VRLabs.ModularShaderSystem.Debug.FunctionTimeline.TabName.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.Debug.FunctionTimeline.TabName.html",
    "title": "Property TabName | Modular Shader System Documentation",
    "keywords": "Property TabName TabName Declaration public string TabName { get; set; } Property Value Type Description String Implements IModularShaderDebuggerTab.TabName"
  },
  "Next/api/VRLabs.ModularShaderSystem.Debug.FunctionTimeline.UpdateTab.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.Debug.FunctionTimeline.UpdateTab.html",
    "title": "Method UpdateTab | Modular Shader System Documentation",
    "keywords": "Method UpdateTab UpdateTab(ModularShader) Declaration public void UpdateTab(ModularShader shader) Parameters Type Name Description ModularShader shader Implements IModularShaderDebuggerTab.UpdateTab(ModularShader)"
  },
  "Next/api/VRLabs.ModularShaderSystem.Debug.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.Debug.html",
    "title": "Namespace VRLabs.ModularShaderSystem.Debug | Modular Shader System Documentation",
    "keywords": "Namespace VRLabs.ModularShaderSystem.Debug Classes FunctionTimeline Modular Shader Debugger tab used to show the functions flow in the modular shader ModularShaderDebugger Debugger Window for modular shaders. In here you can check various data visualization for your modular shader. TemplateGraph Modular Shader Debugger tab used show the current template tree of the modular shader. Interfaces IModularShaderDebuggerTab Interface indicating a tab for the Modular Shader Debugger."
  },
  "Next/api/VRLabs.ModularShaderSystem.Debug.IModularShaderDebuggerTab.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.Debug.IModularShaderDebuggerTab.html",
    "title": "Interface IModularShaderDebuggerTab | Modular Shader System Documentation",
    "keywords": "Interface IModularShaderDebuggerTab Interface indicating a tab for the Modular Shader Debugger. Namespace : VRLabs.ModularShaderSystem.Debug Syntax public interface IModularShaderDebuggerTab Remarks By implementing this interface in a custom class you can add a tab on the ModularShaderDebugger with your own debug tools. This can be useful in cases where you have specific implementations you want to track in your modular shader. Properties Name Description TabContainer VisualElement that will be visualized in the tab. Your ui goes here. Remember to initialize it in your constructor. TabName Name of the tab. Methods Name Description UpdateTab(ModularShader) Function called when updating the shader field (or refreshing). Changes in the data of your ui should go here"
  },
  "Next/api/VRLabs.ModularShaderSystem.Debug.IModularShaderDebuggerTab.TabContainer.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.Debug.IModularShaderDebuggerTab.TabContainer.html",
    "title": "Property TabContainer | Modular Shader System Documentation",
    "keywords": "Property TabContainer TabContainer VisualElement that will be visualized in the tab. Your ui goes here. Remember to initialize it in your constructor. Declaration VisualElement TabContainer { get; set; } Property Value Type Description VisualElement"
  },
  "Next/api/VRLabs.ModularShaderSystem.Debug.IModularShaderDebuggerTab.TabName.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.Debug.IModularShaderDebuggerTab.TabName.html",
    "title": "Property TabName | Modular Shader System Documentation",
    "keywords": "Property TabName TabName Name of the tab. Declaration string TabName { get; set; } Property Value Type Description String"
  },
  "Next/api/VRLabs.ModularShaderSystem.Debug.IModularShaderDebuggerTab.UpdateTab.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.Debug.IModularShaderDebuggerTab.UpdateTab.html",
    "title": "Method UpdateTab | Modular Shader System Documentation",
    "keywords": "Method UpdateTab UpdateTab(ModularShader) Function called when updating the shader field (or refreshing). Changes in the data of your ui should go here Declaration void UpdateTab(ModularShader shader) Parameters Type Name Description ModularShader shader New shader being shown in the debugger"
  },
  "Next/api/VRLabs.ModularShaderSystem.Debug.ModularShaderDebugger.CreateGUI.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.Debug.ModularShaderDebugger.CreateGUI.html",
    "title": "Method CreateGUI | Modular Shader System Documentation",
    "keywords": "Method CreateGUI CreateGUI() Declaration public void CreateGUI()"
  },
  "Next/api/VRLabs.ModularShaderSystem.Debug.ModularShaderDebugger.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.Debug.ModularShaderDebugger.html",
    "title": "Class ModularShaderDebugger | Modular Shader System Documentation",
    "keywords": "Class ModularShaderDebugger Debugger Window for modular shaders. In here you can check various data visualization for your modular shader. Inheritance Object Object ScriptableObject EditorWindow ModularShaderDebugger Namespace : VRLabs.ModularShaderSystem.Debug Syntax public class ModularShaderDebugger : EditorWindow Remarks When creating and editing modules you may need to get some information (example: template dependency) without checking manually each module asset. This window can help you get said information rapidly. It can also be expanded with custom tabs for your own needs by implementing the IModularShaderDebuggerTab interface. Methods Name Description CreateGUI() ShowExample()"
  },
  "Next/api/VRLabs.ModularShaderSystem.Debug.ModularShaderDebugger.ShowExample.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.Debug.ModularShaderDebugger.ShowExample.html",
    "title": "Method ShowExample | Modular Shader System Documentation",
    "keywords": "Method ShowExample ShowExample() Declaration [MenuItem(\"VRLabs/Modular Shader/Modular Shader Debugger\", priority = 5)] public static void ShowExample()"
  },
  "Next/api/VRLabs.ModularShaderSystem.Debug.TemplateGraph.-ctor.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.Debug.TemplateGraph.-ctor.html",
    "title": "Constructor TemplateGraph | Modular Shader System Documentation",
    "keywords": "Constructor TemplateGraph TemplateGraph() Declaration public TemplateGraph()"
  },
  "Next/api/VRLabs.ModularShaderSystem.Debug.TemplateGraph.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.Debug.TemplateGraph.html",
    "title": "Class TemplateGraph | Modular Shader System Documentation",
    "keywords": "Class TemplateGraph Modular Shader Debugger tab used show the current template tree of the modular shader. Inheritance Object TemplateGraph Implements IModularShaderDebuggerTab Namespace : VRLabs.ModularShaderSystem.Debug Syntax public class TemplateGraph : IModularShaderDebuggerTab Constructors Name Description TemplateGraph() Properties Name Description TabContainer TabName Methods Name Description UpdateTab(ModularShader)"
  },
  "Next/api/VRLabs.ModularShaderSystem.Debug.TemplateGraph.TabContainer.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.Debug.TemplateGraph.TabContainer.html",
    "title": "Property TabContainer | Modular Shader System Documentation",
    "keywords": "Property TabContainer TabContainer Declaration public VisualElement TabContainer { get; set; } Property Value Type Description VisualElement Implements IModularShaderDebuggerTab.TabContainer"
  },
  "Next/api/VRLabs.ModularShaderSystem.Debug.TemplateGraph.TabName.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.Debug.TemplateGraph.TabName.html",
    "title": "Property TabName | Modular Shader System Documentation",
    "keywords": "Property TabName TabName Declaration public string TabName { get; set; } Property Value Type Description String Implements IModularShaderDebuggerTab.TabName"
  },
  "Next/api/VRLabs.ModularShaderSystem.Debug.TemplateGraph.UpdateTab.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.Debug.TemplateGraph.UpdateTab.html",
    "title": "Method UpdateTab | Modular Shader System Documentation",
    "keywords": "Method UpdateTab UpdateTab(ModularShader) Declaration public void UpdateTab(ModularShader shader) Parameters Type Name Description ModularShader shader Implements IModularShaderDebuggerTab.UpdateTab(ModularShader)"
  },
  "Next/api/VRLabs.ModularShaderSystem.EnableProperty.-ctor.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.EnableProperty.-ctor.html",
    "title": "Constructor EnableProperty | Modular Shader System Documentation",
    "keywords": "Constructor EnableProperty EnableProperty(String, String, Int32) Main constructor. Declaration public EnableProperty(string name, string displayName, int enableValue) Parameters Type Name Description String name name of the property. String displayName Display name of the property. Int32 enableValue Value to enable the module that uses this enable property. EnableProperty(String, Int32) Simpler constructor where the name and display name are the same. Declaration public EnableProperty(string name, int enableValue) Parameters Type Name Description String name Name of the property, used also as display name. Int32 enableValue Value to enable the module that uses this enable property."
  },
  "Next/api/VRLabs.ModularShaderSystem.EnableProperty.EnableValue.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.EnableProperty.EnableValue.html",
    "title": "Field EnableValue | Modular Shader System Documentation",
    "keywords": "Field EnableValue Value to enable the module that uses this enable property. Namespace : VRLabs.ModularShaderSystem Syntax public int EnableValue Returns Int32"
  },
  "Next/api/VRLabs.ModularShaderSystem.EnableProperty.Equals.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.EnableProperty.Equals.html",
    "title": "Method Equals | Modular Shader System Documentation",
    "keywords": "Method Equals Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean Overrides Property.Equals(Object)"
  },
  "Next/api/VRLabs.ModularShaderSystem.EnableProperty.GetHashCode.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.EnableProperty.GetHashCode.html",
    "title": "Method GetHashCode | Modular Shader System Documentation",
    "keywords": "Method GetHashCode GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 Overrides Property.GetHashCode()"
  },
  "Next/api/VRLabs.ModularShaderSystem.EnableProperty.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.EnableProperty.html",
    "title": "Class EnableProperty | Modular Shader System Documentation",
    "keywords": "Class EnableProperty Property used to define if a module should be enabled or not. Inheritance Object Property EnableProperty Implements IEquatable < Property > IEquatable < EnableProperty > Namespace : VRLabs.ModularShaderSystem Syntax [Serializable] public class EnableProperty : Property, IEquatable<Property>, IEquatable<EnableProperty> Constructors Name Description EnableProperty(String, Int32) Simpler constructor where the name and display name are the same. EnableProperty(String, String, Int32) Main constructor. Fields Name Description EnableValue Value to enable the module that uses this enable property. Methods Name Description Equals(Object) GetHashCode() ToVariable() Convert the property to its variable implementation. Operators Name Description Equality(EnableProperty, EnableProperty) Inequality(EnableProperty, EnableProperty) Explicit Interface Implementations Name Description IEquatable<EnableProperty>.Equals(EnableProperty)"
  },
  "Next/api/VRLabs.ModularShaderSystem.EnableProperty.op_Equality.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.EnableProperty.op_Equality.html",
    "title": "Operator Equality | Modular Shader System Documentation",
    "keywords": "Operator Equality Equality(EnableProperty, EnableProperty) Declaration public static bool operator ==(EnableProperty left, EnableProperty right) Parameters Type Name Description EnableProperty left EnableProperty right Returns Type Description Boolean"
  },
  "Next/api/VRLabs.ModularShaderSystem.EnableProperty.op_Inequality.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.EnableProperty.op_Inequality.html",
    "title": "Operator Inequality | Modular Shader System Documentation",
    "keywords": "Operator Inequality Inequality(EnableProperty, EnableProperty) Declaration public static bool operator !=(EnableProperty left, EnableProperty right) Parameters Type Name Description EnableProperty left EnableProperty right Returns Type Description Boolean"
  },
  "Next/api/VRLabs.ModularShaderSystem.EnableProperty.System-IEquatable-VRLabs-ModularShaderSystem-EnableProperty--Equals.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.EnableProperty.System-IEquatable-VRLabs-ModularShaderSystem-EnableProperty--Equals.html",
    "title": "Method IEquatable<EnableProperty>.Equals | Modular Shader System Documentation",
    "keywords": "Method IEquatable<EnableProperty>.Equals IEquatable<EnableProperty>.Equals(EnableProperty) Declaration bool IEquatable<EnableProperty>.Equals(EnableProperty other) Parameters Type Name Description EnableProperty other Returns Type Description Boolean Implements IEquatable<T>.Equals(T)"
  },
  "Next/api/VRLabs.ModularShaderSystem.EnableProperty.ToVariable.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.EnableProperty.ToVariable.html",
    "title": "Method ToVariable | Modular Shader System Documentation",
    "keywords": "Method ToVariable ToVariable() Convert the property to its variable implementation. Declaration public override Variable ToVariable() Returns Type Description Variable Shader variable referring to this property. Overrides Property.ToVariable()"
  },
  "Next/api/VRLabs.ModularShaderSystem.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.html",
    "title": "Namespace VRLabs.ModularShaderSystem | Modular Shader System Documentation",
    "keywords": "Namespace VRLabs.ModularShaderSystem Classes EnableProperty Property used to define if a module should be enabled or not. MigratedAssets MigratedCollection MigratedItemElement<T> MigratedModularShader MigratedModuleTemplate MigratedShaderFunction MigratedShaderModule MigratedTemplate Migrator ModularShader The main asset used for the modular shader system, containing informations to generate a shader from modules declared here. ModuleTemplate Object indicating a template contained in a module that indicate what asset to use, in which keywords to add it to, and when to add it. MSSConstants Constants used across the library. Property Shader property information. ShaderFunction Function information for a shader module. ShaderGenerator ShaderGenerator.ShaderContext ShaderModule Asset containing a module to add features to a shader. ShaderStringBuilderExtensions Static class that adds extension methods for the StringBuilder, used mainly in the shader generator for writing down the shader file TemplateAsset Asset containing shader code that is used around the modular shader system. TemplateAssetImporter Scripted importer for the template asset TemplateCollectionAsset Asset containing multiple templates separated by special keywords. TemplateColletionAssetImporter Scripted importer for the template collection. Variable Object defining a shader variable. It's used mainly for defining used variables in a module's function. Enums PropertyType Typed of shader properties. VariableType Possible types of variables."
  },
  "Next/api/VRLabs.ModularShaderSystem.MigratedAssets.-ctor.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.MigratedAssets.-ctor.html",
    "title": "Constructor MigratedAssets | Modular Shader System Documentation",
    "keywords": "Constructor MigratedAssets MigratedAssets() Declaration public MigratedAssets()"
  },
  "Next/api/VRLabs.ModularShaderSystem.MigratedAssets.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.MigratedAssets.html",
    "title": "Class MigratedAssets | Modular Shader System Documentation",
    "keywords": "Class MigratedAssets Inheritance Object MigratedAssets Namespace : VRLabs.ModularShaderSystem Syntax [Serializable] public class MigratedAssets Constructors Name Description MigratedAssets() Fields Name Description modularShaders shaderModules templateCollections templates"
  },
  "Next/api/VRLabs.ModularShaderSystem.MigratedAssets.modularShaders.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.MigratedAssets.modularShaders.html",
    "title": "Field modularShaders | Modular Shader System Documentation",
    "keywords": "Field modularShaders Namespace : VRLabs.ModularShaderSystem Syntax public List<MigratedModularShader> modularShaders Returns List < MigratedModularShader >"
  },
  "Next/api/VRLabs.ModularShaderSystem.MigratedAssets.shaderModules.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.MigratedAssets.shaderModules.html",
    "title": "Field shaderModules | Modular Shader System Documentation",
    "keywords": "Field shaderModules Namespace : VRLabs.ModularShaderSystem Syntax public List<MigratedShaderModule> shaderModules Returns List < MigratedShaderModule >"
  },
  "Next/api/VRLabs.ModularShaderSystem.MigratedAssets.templateCollections.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.MigratedAssets.templateCollections.html",
    "title": "Field templateCollections | Modular Shader System Documentation",
    "keywords": "Field templateCollections Namespace : VRLabs.ModularShaderSystem Syntax public List<MigratedCollection> templateCollections Returns List < MigratedCollection >"
  },
  "Next/api/VRLabs.ModularShaderSystem.MigratedAssets.templates.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.MigratedAssets.templates.html",
    "title": "Field templates | Modular Shader System Documentation",
    "keywords": "Field templates Namespace : VRLabs.ModularShaderSystem Syntax public List<MigratedTemplate> templates Returns List < MigratedTemplate >"
  },
  "Next/api/VRLabs.ModularShaderSystem.MigratedCollection.content.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.MigratedCollection.content.html",
    "title": "Field content | Modular Shader System Documentation",
    "keywords": "Field content Namespace : VRLabs.ModularShaderSystem Syntax public string content Returns String"
  },
  "Next/api/VRLabs.ModularShaderSystem.MigratedCollection.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.MigratedCollection.html",
    "title": "Class MigratedCollection | Modular Shader System Documentation",
    "keywords": "Class MigratedCollection Inheritance Object MigratedCollection Namespace : VRLabs.ModularShaderSystem Syntax [Serializable] public class MigratedCollection Fields Name Description content id path"
  },
  "Next/api/VRLabs.ModularShaderSystem.MigratedCollection.id.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.MigratedCollection.id.html",
    "title": "Field id | Modular Shader System Documentation",
    "keywords": "Field id Namespace : VRLabs.ModularShaderSystem Syntax public long id Returns Int64"
  },
  "Next/api/VRLabs.ModularShaderSystem.MigratedCollection.path.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.MigratedCollection.path.html",
    "title": "Field path | Modular Shader System Documentation",
    "keywords": "Field path Namespace : VRLabs.ModularShaderSystem Syntax public string path Returns String"
  },
  "Next/api/VRLabs.ModularShaderSystem.MigratedItemElement-1.-ctor.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.MigratedItemElement-1.-ctor.html",
    "title": "Constructor MigratedItemElement | Modular Shader System Documentation",
    "keywords": "Constructor MigratedItemElement MigratedItemElement(Migrator, T, String) Declaration public MigratedItemElement(Migrator window, T toggledItem, string name) Parameters Type Name Description Migrator window T toggledItem String name"
  },
  "Next/api/VRLabs.ModularShaderSystem.MigratedItemElement-1.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.MigratedItemElement-1.html",
    "title": "Class MigratedItemElement<T> | Modular Shader System Documentation",
    "keywords": "Class MigratedItemElement<T> Inheritance Object CallbackEventHandler Focusable VisualElement MigratedItemElement<T> Implements IEventHandler ITransform ITransitionAnimations IExperimentalFeatures IVisualElementScheduler IResolvedStyle Namespace : VRLabs.ModularShaderSystem Syntax public class MigratedItemElement<T> : VisualElement, IEventHandler, ITransform, ITransitionAnimations, IExperimentalFeatures, IVisualElementScheduler, IResolvedStyle Type Parameters T Constructors Name Description MigratedItemElement(Migrator, T, String) Fields Name Description ToggledItem Properties Name Description IsSelected"
  },
  "Next/api/VRLabs.ModularShaderSystem.MigratedItemElement-1.IsSelected.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.MigratedItemElement-1.IsSelected.html",
    "title": "Property IsSelected | Modular Shader System Documentation",
    "keywords": "Property IsSelected IsSelected Declaration public bool IsSelected { get; set; } Property Value Type Description Boolean"
  },
  "Next/api/VRLabs.ModularShaderSystem.MigratedItemElement-1.ToggledItem.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.MigratedItemElement-1.ToggledItem.html",
    "title": "Field ToggledItem | Modular Shader System Documentation",
    "keywords": "Field ToggledItem Namespace : VRLabs.ModularShaderSystem Syntax public T ToggledItem Returns T"
  },
  "Next/api/VRLabs.ModularShaderSystem.MigratedModularShader.additionalModules.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.MigratedModularShader.additionalModules.html",
    "title": "Field additionalModules | Modular Shader System Documentation",
    "keywords": "Field additionalModules Namespace : VRLabs.ModularShaderSystem Syntax public List<long> additionalModules Returns List < Int64 >"
  },
  "Next/api/VRLabs.ModularShaderSystem.MigratedModularShader.additionalSerializedData.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.MigratedModularShader.additionalSerializedData.html",
    "title": "Field additionalSerializedData | Modular Shader System Documentation",
    "keywords": "Field additionalSerializedData Namespace : VRLabs.ModularShaderSystem Syntax public string additionalSerializedData Returns String"
  },
  "Next/api/VRLabs.ModularShaderSystem.MigratedModularShader.author.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.MigratedModularShader.author.html",
    "title": "Field author | Modular Shader System Documentation",
    "keywords": "Field author Namespace : VRLabs.ModularShaderSystem Syntax public string author Returns String"
  },
  "Next/api/VRLabs.ModularShaderSystem.MigratedModularShader.baseModules.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.MigratedModularShader.baseModules.html",
    "title": "Field baseModules | Modular Shader System Documentation",
    "keywords": "Field baseModules Namespace : VRLabs.ModularShaderSystem Syntax public List<long> baseModules Returns List < Int64 >"
  },
  "Next/api/VRLabs.ModularShaderSystem.MigratedModularShader.customEditor.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.MigratedModularShader.customEditor.html",
    "title": "Field customEditor | Modular Shader System Documentation",
    "keywords": "Field customEditor Namespace : VRLabs.ModularShaderSystem Syntax public string customEditor Returns String"
  },
  "Next/api/VRLabs.ModularShaderSystem.MigratedModularShader.description.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.MigratedModularShader.description.html",
    "title": "Field description | Modular Shader System Documentation",
    "keywords": "Field description Namespace : VRLabs.ModularShaderSystem Syntax public string description Returns String"
  },
  "Next/api/VRLabs.ModularShaderSystem.MigratedModularShader.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.MigratedModularShader.html",
    "title": "Class MigratedModularShader | Modular Shader System Documentation",
    "keywords": "Class MigratedModularShader Inheritance Object MigratedModularShader Namespace : VRLabs.ModularShaderSystem Syntax [Serializable] public class MigratedModularShader Fields Name Description additionalModules additionalSerializedData author baseModules customEditor description id lastGeneratedShaders lockBaseModules name path properties propertiesCollectionSubId propertiesTemplateReference shaderCollectionSubId shaderId shaderPath shaderTemplateReference useTemplatesForProperties version"
  },
  "Next/api/VRLabs.ModularShaderSystem.MigratedModularShader.id.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.MigratedModularShader.id.html",
    "title": "Field id | Modular Shader System Documentation",
    "keywords": "Field id Namespace : VRLabs.ModularShaderSystem Syntax public long id Returns Int64"
  },
  "Next/api/VRLabs.ModularShaderSystem.MigratedModularShader.lastGeneratedShaders.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.MigratedModularShader.lastGeneratedShaders.html",
    "title": "Field lastGeneratedShaders | Modular Shader System Documentation",
    "keywords": "Field lastGeneratedShaders Namespace : VRLabs.ModularShaderSystem Syntax public List<Shader> lastGeneratedShaders Returns List < Shader >"
  },
  "Next/api/VRLabs.ModularShaderSystem.MigratedModularShader.lockBaseModules.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.MigratedModularShader.lockBaseModules.html",
    "title": "Field lockBaseModules | Modular Shader System Documentation",
    "keywords": "Field lockBaseModules Namespace : VRLabs.ModularShaderSystem Syntax public bool lockBaseModules Returns Boolean"
  },
  "Next/api/VRLabs.ModularShaderSystem.MigratedModularShader.name.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.MigratedModularShader.name.html",
    "title": "Field name | Modular Shader System Documentation",
    "keywords": "Field name Namespace : VRLabs.ModularShaderSystem Syntax public string name Returns String"
  },
  "Next/api/VRLabs.ModularShaderSystem.MigratedModularShader.path.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.MigratedModularShader.path.html",
    "title": "Field path | Modular Shader System Documentation",
    "keywords": "Field path Namespace : VRLabs.ModularShaderSystem Syntax public string path Returns String"
  },
  "Next/api/VRLabs.ModularShaderSystem.MigratedModularShader.properties.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.MigratedModularShader.properties.html",
    "title": "Field properties | Modular Shader System Documentation",
    "keywords": "Field properties Namespace : VRLabs.ModularShaderSystem Syntax public List<Property> properties Returns List < Property >"
  },
  "Next/api/VRLabs.ModularShaderSystem.MigratedModularShader.propertiesCollectionSubId.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.MigratedModularShader.propertiesCollectionSubId.html",
    "title": "Field propertiesCollectionSubId | Modular Shader System Documentation",
    "keywords": "Field propertiesCollectionSubId Namespace : VRLabs.ModularShaderSystem Syntax public string propertiesCollectionSubId Returns String"
  },
  "Next/api/VRLabs.ModularShaderSystem.MigratedModularShader.propertiesTemplateReference.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.MigratedModularShader.propertiesTemplateReference.html",
    "title": "Field propertiesTemplateReference | Modular Shader System Documentation",
    "keywords": "Field propertiesTemplateReference Namespace : VRLabs.ModularShaderSystem Syntax public long propertiesTemplateReference Returns Int64"
  },
  "Next/api/VRLabs.ModularShaderSystem.MigratedModularShader.shaderCollectionSubId.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.MigratedModularShader.shaderCollectionSubId.html",
    "title": "Field shaderCollectionSubId | Modular Shader System Documentation",
    "keywords": "Field shaderCollectionSubId Namespace : VRLabs.ModularShaderSystem Syntax public string shaderCollectionSubId Returns String"
  },
  "Next/api/VRLabs.ModularShaderSystem.MigratedModularShader.shaderId.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.MigratedModularShader.shaderId.html",
    "title": "Field shaderId | Modular Shader System Documentation",
    "keywords": "Field shaderId Namespace : VRLabs.ModularShaderSystem Syntax public string shaderId Returns String"
  },
  "Next/api/VRLabs.ModularShaderSystem.MigratedModularShader.shaderPath.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.MigratedModularShader.shaderPath.html",
    "title": "Field shaderPath | Modular Shader System Documentation",
    "keywords": "Field shaderPath Namespace : VRLabs.ModularShaderSystem Syntax public string shaderPath Returns String"
  },
  "Next/api/VRLabs.ModularShaderSystem.MigratedModularShader.shaderTemplateReference.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.MigratedModularShader.shaderTemplateReference.html",
    "title": "Field shaderTemplateReference | Modular Shader System Documentation",
    "keywords": "Field shaderTemplateReference Namespace : VRLabs.ModularShaderSystem Syntax public long shaderTemplateReference Returns Int64"
  },
  "Next/api/VRLabs.ModularShaderSystem.MigratedModularShader.useTemplatesForProperties.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.MigratedModularShader.useTemplatesForProperties.html",
    "title": "Field useTemplatesForProperties | Modular Shader System Documentation",
    "keywords": "Field useTemplatesForProperties Namespace : VRLabs.ModularShaderSystem Syntax public bool useTemplatesForProperties Returns Boolean"
  },
  "Next/api/VRLabs.ModularShaderSystem.MigratedModularShader.version.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.MigratedModularShader.version.html",
    "title": "Field version | Modular Shader System Documentation",
    "keywords": "Field version Namespace : VRLabs.ModularShaderSystem Syntax public string version Returns String"
  },
  "Next/api/VRLabs.ModularShaderSystem.MigratedModuleTemplate.collectionSubId.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.MigratedModuleTemplate.collectionSubId.html",
    "title": "Field collectionSubId | Modular Shader System Documentation",
    "keywords": "Field collectionSubId Namespace : VRLabs.ModularShaderSystem Syntax public string collectionSubId Returns String"
  },
  "Next/api/VRLabs.ModularShaderSystem.MigratedModuleTemplate.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.MigratedModuleTemplate.html",
    "title": "Class MigratedModuleTemplate | Modular Shader System Documentation",
    "keywords": "Class MigratedModuleTemplate Inheritance Object MigratedModuleTemplate Namespace : VRLabs.ModularShaderSystem Syntax [Serializable] public class MigratedModuleTemplate Fields Name Description collectionSubId keywords needsVariant queue templateReference"
  },
  "Next/api/VRLabs.ModularShaderSystem.MigratedModuleTemplate.keywords.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.MigratedModuleTemplate.keywords.html",
    "title": "Field keywords | Modular Shader System Documentation",
    "keywords": "Field keywords Namespace : VRLabs.ModularShaderSystem Syntax public List<string> keywords Returns List < String >"
  },
  "Next/api/VRLabs.ModularShaderSystem.MigratedModuleTemplate.needsVariant.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.MigratedModuleTemplate.needsVariant.html",
    "title": "Field needsVariant | Modular Shader System Documentation",
    "keywords": "Field needsVariant Namespace : VRLabs.ModularShaderSystem Syntax public bool needsVariant Returns Boolean"
  },
  "Next/api/VRLabs.ModularShaderSystem.MigratedModuleTemplate.queue.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.MigratedModuleTemplate.queue.html",
    "title": "Field queue | Modular Shader System Documentation",
    "keywords": "Field queue Namespace : VRLabs.ModularShaderSystem Syntax public int queue Returns Int32"
  },
  "Next/api/VRLabs.ModularShaderSystem.MigratedModuleTemplate.templateReference.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.MigratedModuleTemplate.templateReference.html",
    "title": "Field templateReference | Modular Shader System Documentation",
    "keywords": "Field templateReference Namespace : VRLabs.ModularShaderSystem Syntax public long templateReference Returns Int64"
  },
  "Next/api/VRLabs.ModularShaderSystem.MigratedShaderFunction.appendAfter.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.MigratedShaderFunction.appendAfter.html",
    "title": "Field appendAfter | Modular Shader System Documentation",
    "keywords": "Field appendAfter Namespace : VRLabs.ModularShaderSystem Syntax public string appendAfter Returns String"
  },
  "Next/api/VRLabs.ModularShaderSystem.MigratedShaderFunction.codeKeywords.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.MigratedShaderFunction.codeKeywords.html",
    "title": "Field codeKeywords | Modular Shader System Documentation",
    "keywords": "Field codeKeywords Namespace : VRLabs.ModularShaderSystem Syntax public List<string> codeKeywords Returns List < String >"
  },
  "Next/api/VRLabs.ModularShaderSystem.MigratedShaderFunction.collectionSubId.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.MigratedShaderFunction.collectionSubId.html",
    "title": "Field collectionSubId | Modular Shader System Documentation",
    "keywords": "Field collectionSubId Namespace : VRLabs.ModularShaderSystem Syntax public string collectionSubId Returns String"
  },
  "Next/api/VRLabs.ModularShaderSystem.MigratedShaderFunction.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.MigratedShaderFunction.html",
    "title": "Class MigratedShaderFunction | Modular Shader System Documentation",
    "keywords": "Class MigratedShaderFunction Inheritance Object MigratedShaderFunction Namespace : VRLabs.ModularShaderSystem Syntax [Serializable] public class MigratedShaderFunction Fields Name Description appendAfter codeKeywords collectionSubId name queue templateReference usedVariables variableKeywords"
  },
  "Next/api/VRLabs.ModularShaderSystem.MigratedShaderFunction.name.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.MigratedShaderFunction.name.html",
    "title": "Field name | Modular Shader System Documentation",
    "keywords": "Field name Namespace : VRLabs.ModularShaderSystem Syntax public string name Returns String"
  },
  "Next/api/VRLabs.ModularShaderSystem.MigratedShaderFunction.queue.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.MigratedShaderFunction.queue.html",
    "title": "Field queue | Modular Shader System Documentation",
    "keywords": "Field queue Namespace : VRLabs.ModularShaderSystem Syntax public short queue Returns Int16"
  },
  "Next/api/VRLabs.ModularShaderSystem.MigratedShaderFunction.templateReference.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.MigratedShaderFunction.templateReference.html",
    "title": "Field templateReference | Modular Shader System Documentation",
    "keywords": "Field templateReference Namespace : VRLabs.ModularShaderSystem Syntax public long templateReference Returns Int64"
  },
  "Next/api/VRLabs.ModularShaderSystem.MigratedShaderFunction.usedVariables.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.MigratedShaderFunction.usedVariables.html",
    "title": "Field usedVariables | Modular Shader System Documentation",
    "keywords": "Field usedVariables Namespace : VRLabs.ModularShaderSystem Syntax public List<Variable> usedVariables Returns List < Variable >"
  },
  "Next/api/VRLabs.ModularShaderSystem.MigratedShaderFunction.variableKeywords.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.MigratedShaderFunction.variableKeywords.html",
    "title": "Field variableKeywords | Modular Shader System Documentation",
    "keywords": "Field variableKeywords Namespace : VRLabs.ModularShaderSystem Syntax public List<string> variableKeywords Returns List < String >"
  },
  "Next/api/VRLabs.ModularShaderSystem.MigratedShaderModule.additionalSerializedData.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.MigratedShaderModule.additionalSerializedData.html",
    "title": "Field additionalSerializedData | Modular Shader System Documentation",
    "keywords": "Field additionalSerializedData Namespace : VRLabs.ModularShaderSystem Syntax public string additionalSerializedData Returns String"
  },
  "Next/api/VRLabs.ModularShaderSystem.MigratedShaderModule.author.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.MigratedShaderModule.author.html",
    "title": "Field author | Modular Shader System Documentation",
    "keywords": "Field author Namespace : VRLabs.ModularShaderSystem Syntax public string author Returns String"
  },
  "Next/api/VRLabs.ModularShaderSystem.MigratedShaderModule.description.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.MigratedShaderModule.description.html",
    "title": "Field description | Modular Shader System Documentation",
    "keywords": "Field description Namespace : VRLabs.ModularShaderSystem Syntax public string description Returns String"
  },
  "Next/api/VRLabs.ModularShaderSystem.MigratedShaderModule.enableProperties.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.MigratedShaderModule.enableProperties.html",
    "title": "Field enableProperties | Modular Shader System Documentation",
    "keywords": "Field enableProperties Namespace : VRLabs.ModularShaderSystem Syntax public List<EnableProperty> enableProperties Returns List < EnableProperty >"
  },
  "Next/api/VRLabs.ModularShaderSystem.MigratedShaderModule.functions.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.MigratedShaderModule.functions.html",
    "title": "Field functions | Modular Shader System Documentation",
    "keywords": "Field functions Namespace : VRLabs.ModularShaderSystem Syntax public List<MigratedShaderFunction> functions Returns List < MigratedShaderFunction >"
  },
  "Next/api/VRLabs.ModularShaderSystem.MigratedShaderModule.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.MigratedShaderModule.html",
    "title": "Class MigratedShaderModule | Modular Shader System Documentation",
    "keywords": "Class MigratedShaderModule Inheritance Object MigratedShaderModule Namespace : VRLabs.ModularShaderSystem Syntax [Serializable] public class MigratedShaderModule Fields Name Description additionalSerializedData author description enableProperties functions id incompatibleWith moduleDependencies moduleId name path properties templates version"
  },
  "Next/api/VRLabs.ModularShaderSystem.MigratedShaderModule.id.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.MigratedShaderModule.id.html",
    "title": "Field id | Modular Shader System Documentation",
    "keywords": "Field id Namespace : VRLabs.ModularShaderSystem Syntax public long id Returns Int64"
  },
  "Next/api/VRLabs.ModularShaderSystem.MigratedShaderModule.incompatibleWith.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.MigratedShaderModule.incompatibleWith.html",
    "title": "Field incompatibleWith | Modular Shader System Documentation",
    "keywords": "Field incompatibleWith Namespace : VRLabs.ModularShaderSystem Syntax public List<string> incompatibleWith Returns List < String >"
  },
  "Next/api/VRLabs.ModularShaderSystem.MigratedShaderModule.moduleDependencies.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.MigratedShaderModule.moduleDependencies.html",
    "title": "Field moduleDependencies | Modular Shader System Documentation",
    "keywords": "Field moduleDependencies Namespace : VRLabs.ModularShaderSystem Syntax public List<string> moduleDependencies Returns List < String >"
  },
  "Next/api/VRLabs.ModularShaderSystem.MigratedShaderModule.moduleId.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.MigratedShaderModule.moduleId.html",
    "title": "Field moduleId | Modular Shader System Documentation",
    "keywords": "Field moduleId Namespace : VRLabs.ModularShaderSystem Syntax public string moduleId Returns String"
  },
  "Next/api/VRLabs.ModularShaderSystem.MigratedShaderModule.name.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.MigratedShaderModule.name.html",
    "title": "Field name | Modular Shader System Documentation",
    "keywords": "Field name Namespace : VRLabs.ModularShaderSystem Syntax public string name Returns String"
  },
  "Next/api/VRLabs.ModularShaderSystem.MigratedShaderModule.path.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.MigratedShaderModule.path.html",
    "title": "Field path | Modular Shader System Documentation",
    "keywords": "Field path Namespace : VRLabs.ModularShaderSystem Syntax public string path Returns String"
  },
  "Next/api/VRLabs.ModularShaderSystem.MigratedShaderModule.properties.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.MigratedShaderModule.properties.html",
    "title": "Field properties | Modular Shader System Documentation",
    "keywords": "Field properties Namespace : VRLabs.ModularShaderSystem Syntax public List<Property> properties Returns List < Property >"
  },
  "Next/api/VRLabs.ModularShaderSystem.MigratedShaderModule.templates.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.MigratedShaderModule.templates.html",
    "title": "Field templates | Modular Shader System Documentation",
    "keywords": "Field templates Namespace : VRLabs.ModularShaderSystem Syntax public List<MigratedModuleTemplate> templates Returns List < MigratedModuleTemplate >"
  },
  "Next/api/VRLabs.ModularShaderSystem.MigratedShaderModule.version.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.MigratedShaderModule.version.html",
    "title": "Field version | Modular Shader System Documentation",
    "keywords": "Field version Namespace : VRLabs.ModularShaderSystem Syntax public string version Returns String"
  },
  "Next/api/VRLabs.ModularShaderSystem.MigratedTemplate.content.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.MigratedTemplate.content.html",
    "title": "Field content | Modular Shader System Documentation",
    "keywords": "Field content Namespace : VRLabs.ModularShaderSystem Syntax public string content Returns String"
  },
  "Next/api/VRLabs.ModularShaderSystem.MigratedTemplate.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.MigratedTemplate.html",
    "title": "Class MigratedTemplate | Modular Shader System Documentation",
    "keywords": "Class MigratedTemplate Inheritance Object MigratedTemplate Namespace : VRLabs.ModularShaderSystem Syntax [Serializable] public class MigratedTemplate Fields Name Description content id path"
  },
  "Next/api/VRLabs.ModularShaderSystem.MigratedTemplate.id.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.MigratedTemplate.id.html",
    "title": "Field id | Modular Shader System Documentation",
    "keywords": "Field id Namespace : VRLabs.ModularShaderSystem Syntax public long id Returns Int64"
  },
  "Next/api/VRLabs.ModularShaderSystem.MigratedTemplate.path.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.MigratedTemplate.path.html",
    "title": "Field path | Modular Shader System Documentation",
    "keywords": "Field path Namespace : VRLabs.ModularShaderSystem Syntax public string path Returns String"
  },
  "Next/api/VRLabs.ModularShaderSystem.Migrator.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.Migrator.html",
    "title": "Class Migrator | Modular Shader System Documentation",
    "keywords": "Class Migrator Inheritance Object Object ScriptableObject EditorWindow Migrator Namespace : VRLabs.ModularShaderSystem Syntax public class Migrator : EditorWindow"
  },
  "Next/api/VRLabs.ModularShaderSystem.ModularShader.AdditionalModules.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.ModularShader.AdditionalModules.html",
    "title": "Field AdditionalModules | Modular Shader System Documentation",
    "keywords": "Field AdditionalModules List of additional modules. Namespace : VRLabs.ModularShaderSystem Syntax [HideInInspector] public List<ShaderModule> AdditionalModules Returns List < ShaderModule > Remarks Unlike base modules, additional modules are not shown in the ui, and the list is intended to be used mainly by custom scripts."
  },
  "Next/api/VRLabs.ModularShaderSystem.ModularShader.AdditionalSerializedData.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.ModularShader.AdditionalSerializedData.html",
    "title": "Field AdditionalSerializedData | Modular Shader System Documentation",
    "keywords": "Field AdditionalSerializedData string that can contain whatever you want, it is originally intended to contain serialized data that you may need for your own custom system based on the modular shader system. Namespace : VRLabs.ModularShaderSystem Syntax [HideInInspector] public string AdditionalSerializedData Returns String"
  },
  "Next/api/VRLabs.ModularShaderSystem.ModularShader.Author.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.ModularShader.Author.html",
    "title": "Field Author | Modular Shader System Documentation",
    "keywords": "Field Author Author of the modular shader. Namespace : VRLabs.ModularShaderSystem Syntax public string Author Returns String"
  },
  "Next/api/VRLabs.ModularShaderSystem.ModularShader.BaseModules.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.ModularShader.BaseModules.html",
    "title": "Field BaseModules | Modular Shader System Documentation",
    "keywords": "Field BaseModules List of base modules. Namespace : VRLabs.ModularShaderSystem Syntax public List<ShaderModule> BaseModules Returns List < ShaderModule >"
  },
  "Next/api/VRLabs.ModularShaderSystem.ModularShader.CustomEditor.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.ModularShader.CustomEditor.html",
    "title": "Field CustomEditor | Modular Shader System Documentation",
    "keywords": "Field CustomEditor Custom editor definition. Namespace : VRLabs.ModularShaderSystem Syntax public string CustomEditor Returns String"
  },
  "Next/api/VRLabs.ModularShaderSystem.ModularShader.Description.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.ModularShader.Description.html",
    "title": "Field Description | Modular Shader System Documentation",
    "keywords": "Field Description Description of the modular shader. Namespace : VRLabs.ModularShaderSystem Syntax public string Description Returns String"
  },
  "Next/api/VRLabs.ModularShaderSystem.ModularShader.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.ModularShader.html",
    "title": "Class ModularShader | Modular Shader System Documentation",
    "keywords": "Class ModularShader The main asset used for the modular shader system, containing informations to generate a shader from modules declared here. Inheritance Object Object ScriptableObject ModularShader Namespace : VRLabs.ModularShaderSystem Syntax [CreateAssetMenu(fileName = \"ModularShader\", menuName = \"VRLabs/Modular Shader/Modular Shader\", order = 0)] public class ModularShader : ScriptableObject Fields Name Description AdditionalModules List of additional modules. AdditionalSerializedData string that can contain whatever you want, it is originally intended to contain serialized data that you may need for your own custom system based on the modular shader system. Author Author of the modular shader. BaseModules List of base modules. CustomEditor Custom editor definition. Description Description of the modular shader. Id Id of the modular shader. LastGeneratedShaders List of shaders that have been last generated by this modular shader. Useful to backtrack from which modular shader a specific shader comes. LockBaseModules Boolean to disable the base modules list edit. Can be edited by either scripts or the debug inspector. Name Name of the modular shader. Properties List of properties defined. ShaderPath Path for the shader in the shader selector. ShaderPropertiesTemplate Template asset for defining properties. ShaderTemplate Main template asset for the shader. UseTemplatesForProperties Toggle to define if the modular shader can use templates to declare properties. Version Version of the modular shader."
  },
  "Next/api/VRLabs.ModularShaderSystem.ModularShader.Id.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.ModularShader.Id.html",
    "title": "Field Id | Modular Shader System Documentation",
    "keywords": "Field Id Id of the modular shader. Namespace : VRLabs.ModularShaderSystem Syntax public string Id Returns String"
  },
  "Next/api/VRLabs.ModularShaderSystem.ModularShader.LastGeneratedShaders.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.ModularShader.LastGeneratedShaders.html",
    "title": "Field LastGeneratedShaders | Modular Shader System Documentation",
    "keywords": "Field LastGeneratedShaders List of shaders that have been last generated by this modular shader. Useful to backtrack from which modular shader a specific shader comes. Namespace : VRLabs.ModularShaderSystem Syntax public List<Shader> LastGeneratedShaders Returns List < Shader > Remarks This list is not visible in the inspector, but can be accessed by scripts."
  },
  "Next/api/VRLabs.ModularShaderSystem.ModularShader.LockBaseModules.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.ModularShader.LockBaseModules.html",
    "title": "Field LockBaseModules | Modular Shader System Documentation",
    "keywords": "Field LockBaseModules Boolean to disable the base modules list edit. Can be edited by either scripts or the debug inspector. Namespace : VRLabs.ModularShaderSystem Syntax public bool LockBaseModules Returns Boolean"
  },
  "Next/api/VRLabs.ModularShaderSystem.ModularShader.Name.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.ModularShader.Name.html",
    "title": "Field Name | Modular Shader System Documentation",
    "keywords": "Field Name Name of the modular shader. Namespace : VRLabs.ModularShaderSystem Syntax public string Name Returns String"
  },
  "Next/api/VRLabs.ModularShaderSystem.ModularShader.Properties.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.ModularShader.Properties.html",
    "title": "Field Properties | Modular Shader System Documentation",
    "keywords": "Field Properties List of properties defined. Namespace : VRLabs.ModularShaderSystem Syntax public List<Property> Properties Returns List < Property >"
  },
  "Next/api/VRLabs.ModularShaderSystem.ModularShader.ShaderPath.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.ModularShader.ShaderPath.html",
    "title": "Field ShaderPath | Modular Shader System Documentation",
    "keywords": "Field ShaderPath Path for the shader in the shader selector. Namespace : VRLabs.ModularShaderSystem Syntax public string ShaderPath Returns String"
  },
  "Next/api/VRLabs.ModularShaderSystem.ModularShader.ShaderPropertiesTemplate.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.ModularShader.ShaderPropertiesTemplate.html",
    "title": "Field ShaderPropertiesTemplate | Modular Shader System Documentation",
    "keywords": "Field ShaderPropertiesTemplate Template asset for defining properties. Namespace : VRLabs.ModularShaderSystem Syntax public TemplateAsset ShaderPropertiesTemplate Returns TemplateAsset"
  },
  "Next/api/VRLabs.ModularShaderSystem.ModularShader.ShaderTemplate.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.ModularShader.ShaderTemplate.html",
    "title": "Field ShaderTemplate | Modular Shader System Documentation",
    "keywords": "Field ShaderTemplate Main template asset for the shader. Namespace : VRLabs.ModularShaderSystem Syntax public TemplateAsset ShaderTemplate Returns TemplateAsset"
  },
  "Next/api/VRLabs.ModularShaderSystem.ModularShader.UseTemplatesForProperties.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.ModularShader.UseTemplatesForProperties.html",
    "title": "Field UseTemplatesForProperties | Modular Shader System Documentation",
    "keywords": "Field UseTemplatesForProperties Toggle to define if the modular shader can use templates to declare properties. Namespace : VRLabs.ModularShaderSystem Syntax public bool UseTemplatesForProperties Returns Boolean"
  },
  "Next/api/VRLabs.ModularShaderSystem.ModularShader.Version.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.ModularShader.Version.html",
    "title": "Field Version | Modular Shader System Documentation",
    "keywords": "Field Version Version of the modular shader. Namespace : VRLabs.ModularShaderSystem Syntax public string Version Returns String"
  },
  "Next/api/VRLabs.ModularShaderSystem.ModuleTemplate.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.ModuleTemplate.html",
    "title": "Class ModuleTemplate | Modular Shader System Documentation",
    "keywords": "Class ModuleTemplate Object indicating a template contained in a module that indicate what asset to use, in which keywords to add it to, and when to add it. Inheritance Object ModuleTemplate Namespace : VRLabs.ModularShaderSystem Syntax [Serializable] public class ModuleTemplate Fields Name Description Keywords List of keyword hooks NeedsVariant Boolean indicating if the template needs to generate it's own versions of the shader to toggle on and off the content of it. Queue Queue indicating when the template is processed by the generator. Template Template asset to use"
  },
  "Next/api/VRLabs.ModularShaderSystem.ModuleTemplate.Keywords.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.ModuleTemplate.Keywords.html",
    "title": "Field Keywords | Modular Shader System Documentation",
    "keywords": "Field Keywords List of keyword hooks Namespace : VRLabs.ModularShaderSystem Syntax [FormerlySerializedAs(\"Keyword\")] public List<string> Keywords Returns List < String >"
  },
  "Next/api/VRLabs.ModularShaderSystem.ModuleTemplate.NeedsVariant.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.ModuleTemplate.NeedsVariant.html",
    "title": "Field NeedsVariant | Modular Shader System Documentation",
    "keywords": "Field NeedsVariant Boolean indicating if the template needs to generate it's own versions of the shader to toggle on and off the content of it. Namespace : VRLabs.ModularShaderSystem Syntax [FormerlySerializedAs(\"IsCGOnly\")] public bool NeedsVariant Returns Boolean"
  },
  "Next/api/VRLabs.ModularShaderSystem.ModuleTemplate.Queue.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.ModuleTemplate.Queue.html",
    "title": "Field Queue | Modular Shader System Documentation",
    "keywords": "Field Queue Queue indicating when the template is processed by the generator. Namespace : VRLabs.ModularShaderSystem Syntax public int Queue Returns Int32"
  },
  "Next/api/VRLabs.ModularShaderSystem.ModuleTemplate.Template.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.ModuleTemplate.Template.html",
    "title": "Field Template | Modular Shader System Documentation",
    "keywords": "Field Template Template asset to use Namespace : VRLabs.ModularShaderSystem Syntax public TemplateAsset Template Returns TemplateAsset"
  },
  "Next/api/VRLabs.ModularShaderSystem.MSSConstants.CREATE_PATH.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.MSSConstants.CREATE_PATH.html",
    "title": "Field CREATE_PATH | Modular Shader System Documentation",
    "keywords": "Field CREATE_PATH Default path in the create menu to place all options related to asset creation (new templates, template collections, modules, modular shaders). Namespace : VRLabs.ModularShaderSystem Syntax public const string CREATE_PATH = \"VRLabs/Modular Shader\" Returns String"
  },
  "Next/api/VRLabs.ModularShaderSystem.MSSConstants.DEFAULT_CODE_KEYWORD.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.MSSConstants.DEFAULT_CODE_KEYWORD.html",
    "title": "Field DEFAULT_CODE_KEYWORD | Modular Shader System Documentation",
    "keywords": "Field DEFAULT_CODE_KEYWORD Default Keyword used for placing code templates, all modules that do not define custom keywords to place code templates will use this one. Namespace : VRLabs.ModularShaderSystem Syntax public const string DEFAULT_CODE_KEYWORD = \"DEFAULT_CODE\" Returns String"
  },
  "Next/api/VRLabs.ModularShaderSystem.MSSConstants.DEFAULT_VARIABLES_KEYWORD.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.MSSConstants.DEFAULT_VARIABLES_KEYWORD.html",
    "title": "Field DEFAULT_VARIABLES_KEYWORD | Modular Shader System Documentation",
    "keywords": "Field DEFAULT_VARIABLES_KEYWORD Default Keyword used for placing variables, all modules that do not define custom keywords to place variables will use this one. Namespace : VRLabs.ModularShaderSystem Syntax public const string DEFAULT_VARIABLES_KEYWORD = \"DEFAULT_VARIABLES\" Returns String"
  },
  "Next/api/VRLabs.ModularShaderSystem.MSSConstants.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.MSSConstants.html",
    "title": "Class MSSConstants | Modular Shader System Documentation",
    "keywords": "Class MSSConstants Constants used across the library. Inheritance Object MSSConstants Namespace : VRLabs.ModularShaderSystem Syntax public static class MSSConstants Remarks These constants are the default one used, when you embed the library you have the option to change these defaults to whatever you want Fields Name Description CREATE_PATH Default path in the create menu to place all options related to asset creation (new templates, template collections, modules, modular shaders). DEFAULT_CODE_KEYWORD Default Keyword used for placing code templates, all modules that do not define custom keywords to place code templates will use this one. DEFAULT_VARIABLES_KEYWORD Default Keyword used for placing variables, all modules that do not define custom keywords to place variables will use this one. RESOURCES_FOLDER Default name of the subfolder of the Resources folder containing all the resources needed for the library. TEMPLATE_COLLECTION_EXTENSION Default extension for template collections. TEMPLATE_EXTENSION Default extension for templates. TEMPLATE_PROPERTIES_KEYWORD Default Keyword used for placing properties from templates. WINDOW_PATH Default path in the menu to place all windows menu options."
  },
  "Next/api/VRLabs.ModularShaderSystem.MSSConstants.RESOURCES_FOLDER.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.MSSConstants.RESOURCES_FOLDER.html",
    "title": "Field RESOURCES_FOLDER | Modular Shader System Documentation",
    "keywords": "Field RESOURCES_FOLDER Default name of the subfolder of the Resources folder containing all the resources needed for the library. Namespace : VRLabs.ModularShaderSystem Syntax public const string RESOURCES_FOLDER = \"MSS\" Returns String Remarks A custom folder name is needed to differentiate different installed versions of the libraries from multiple shaders, you HAVE to use a different name when embedding the library to your shader project, or else conflicts may arise whenever someone who already has the official library will also download your shader, especially when the 2 versions don't match up."
  },
  "Next/api/VRLabs.ModularShaderSystem.MSSConstants.TEMPLATE_COLLECTION_EXTENSION.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.MSSConstants.TEMPLATE_COLLECTION_EXTENSION.html",
    "title": "Field TEMPLATE_COLLECTION_EXTENSION | Modular Shader System Documentation",
    "keywords": "Field TEMPLATE_COLLECTION_EXTENSION Default extension for template collections. Namespace : VRLabs.ModularShaderSystem Syntax public const string TEMPLATE_COLLECTION_EXTENSION = \"stemplatecollection\" Returns String"
  },
  "Next/api/VRLabs.ModularShaderSystem.MSSConstants.TEMPLATE_EXTENSION.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.MSSConstants.TEMPLATE_EXTENSION.html",
    "title": "Field TEMPLATE_EXTENSION | Modular Shader System Documentation",
    "keywords": "Field TEMPLATE_EXTENSION Default extension for templates. Namespace : VRLabs.ModularShaderSystem Syntax public const string TEMPLATE_EXTENSION = \"stemplate\" Returns String"
  },
  "Next/api/VRLabs.ModularShaderSystem.MSSConstants.TEMPLATE_PROPERTIES_KEYWORD.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.MSSConstants.TEMPLATE_PROPERTIES_KEYWORD.html",
    "title": "Field TEMPLATE_PROPERTIES_KEYWORD | Modular Shader System Documentation",
    "keywords": "Field TEMPLATE_PROPERTIES_KEYWORD Default Keyword used for placing properties from templates. Namespace : VRLabs.ModularShaderSystem Syntax public const string TEMPLATE_PROPERTIES_KEYWORD = \"SHADER_PROPERTIES\" Returns String"
  },
  "Next/api/VRLabs.ModularShaderSystem.MSSConstants.WINDOW_PATH.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.MSSConstants.WINDOW_PATH.html",
    "title": "Field WINDOW_PATH | Modular Shader System Documentation",
    "keywords": "Field WINDOW_PATH Default path in the menu to place all windows menu options. Namespace : VRLabs.ModularShaderSystem Syntax public const string WINDOW_PATH = \"VRLabs/Modular Shader\" Returns String"
  },
  "Next/api/VRLabs.ModularShaderSystem.Property.Attributes.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.Property.Attributes.html",
    "title": "Field Attributes | Modular Shader System Documentation",
    "keywords": "Field Attributes List of attributes for the shader property. Namespace : VRLabs.ModularShaderSystem Syntax public List<string> Attributes Returns List < String >"
  },
  "Next/api/VRLabs.ModularShaderSystem.Property.DefaultTextureAsset.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.Property.DefaultTextureAsset.html",
    "title": "Field DefaultTextureAsset | Modular Shader System Documentation",
    "keywords": "Field DefaultTextureAsset Default texture asset assigned to the property if it's a Texture2D or Texture3D; Namespace : VRLabs.ModularShaderSystem Syntax public Texture DefaultTextureAsset Returns Texture"
  },
  "Next/api/VRLabs.ModularShaderSystem.Property.DefaultValue.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.Property.DefaultValue.html",
    "title": "Field DefaultValue | Modular Shader System Documentation",
    "keywords": "Field DefaultValue Default value of the shader property. Namespace : VRLabs.ModularShaderSystem Syntax public string DefaultValue Returns String"
  },
  "Next/api/VRLabs.ModularShaderSystem.Property.DisplayName.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.Property.DisplayName.html",
    "title": "Field DisplayName | Modular Shader System Documentation",
    "keywords": "Field DisplayName Display name of the shader property. Namespace : VRLabs.ModularShaderSystem Syntax public string DisplayName Returns String"
  },
  "Next/api/VRLabs.ModularShaderSystem.Property.Equals.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.Property.Equals.html",
    "title": "Method Equals | Modular Shader System Documentation",
    "keywords": "Method Equals Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean Overrides Object.Equals(Object)"
  },
  "Next/api/VRLabs.ModularShaderSystem.Property.GetHashCode.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.Property.GetHashCode.html",
    "title": "Method GetHashCode | Modular Shader System Documentation",
    "keywords": "Method GetHashCode GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 Overrides Object.GetHashCode()"
  },
  "Next/api/VRLabs.ModularShaderSystem.Property.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.Property.html",
    "title": "Class Property | Modular Shader System Documentation",
    "keywords": "Class Property Shader property information. Inheritance Object Property EnableProperty Implements IEquatable < Property > Namespace : VRLabs.ModularShaderSystem Syntax [Serializable] public class Property : IEquatable<Property> Fields Name Description Attributes List of attributes for the shader property. DefaultTextureAsset Default texture asset assigned to the property if it's a Texture2D or Texture3D; DefaultValue Default value of the shader property. DisplayName Display name of the shader property. Name Name of the shader property. Type Type of the shader property. Methods Name Description Equals(Object) GetHashCode() ToVariable() Convert the property to a shader variable. Operators Name Description Equality(Property, Property) Inequality(Property, Property) Explicit Interface Implementations Name Description IEquatable<Property>.Equals(Property)"
  },
  "Next/api/VRLabs.ModularShaderSystem.Property.Name.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.Property.Name.html",
    "title": "Field Name | Modular Shader System Documentation",
    "keywords": "Field Name Name of the shader property. Namespace : VRLabs.ModularShaderSystem Syntax public string Name Returns String"
  },
  "Next/api/VRLabs.ModularShaderSystem.Property.op_Equality.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.Property.op_Equality.html",
    "title": "Operator Equality | Modular Shader System Documentation",
    "keywords": "Operator Equality Equality(Property, Property) Declaration public static bool operator ==(Property left, Property right) Parameters Type Name Description Property left Property right Returns Type Description Boolean"
  },
  "Next/api/VRLabs.ModularShaderSystem.Property.op_Inequality.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.Property.op_Inequality.html",
    "title": "Operator Inequality | Modular Shader System Documentation",
    "keywords": "Operator Inequality Inequality(Property, Property) Declaration public static bool operator !=(Property left, Property right) Parameters Type Name Description Property left Property right Returns Type Description Boolean"
  },
  "Next/api/VRLabs.ModularShaderSystem.Property.System-IEquatable-VRLabs-ModularShaderSystem-Property--Equals.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.Property.System-IEquatable-VRLabs-ModularShaderSystem-Property--Equals.html",
    "title": "Method IEquatable<Property>.Equals | Modular Shader System Documentation",
    "keywords": "Method IEquatable<Property>.Equals IEquatable<Property>.Equals(Property) Declaration bool IEquatable<Property>.Equals(Property other) Parameters Type Name Description Property other Returns Type Description Boolean Implements IEquatable<T>.Equals(T)"
  },
  "Next/api/VRLabs.ModularShaderSystem.Property.ToVariable.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.Property.ToVariable.html",
    "title": "Method ToVariable | Modular Shader System Documentation",
    "keywords": "Method ToVariable ToVariable() Convert the property to a shader variable. Declaration public virtual Variable ToVariable() Returns Type Description Variable A variable representing the the property in shader code."
  },
  "Next/api/VRLabs.ModularShaderSystem.Property.Type.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.Property.Type.html",
    "title": "Field Type | Modular Shader System Documentation",
    "keywords": "Field Type Type of the shader property. Namespace : VRLabs.ModularShaderSystem Syntax public string Type Returns String"
  },
  "Next/api/VRLabs.ModularShaderSystem.PropertyType.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.PropertyType.html",
    "title": "Enum PropertyType | Modular Shader System Documentation",
    "keywords": "Enum PropertyType Typed of shader properties. Namespace : VRLabs.ModularShaderSystem Syntax public enum PropertyType Fields Name Description Color Cube CubeArray Float Int Range Texture2D Texture2DArray Texture3D Vector"
  },
  "Next/api/VRLabs.ModularShaderSystem.ShaderFunction.AppendAfter.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.ShaderFunction.AppendAfter.html",
    "title": "Field AppendAfter | Modular Shader System Documentation",
    "keywords": "Field AppendAfter Function or keyword this function appends after. Namespace : VRLabs.ModularShaderSystem Syntax public string AppendAfter Returns String"
  },
  "Next/api/VRLabs.ModularShaderSystem.ShaderFunction.CodeKeywords.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.ShaderFunction.CodeKeywords.html",
    "title": "Field CodeKeywords | Modular Shader System Documentation",
    "keywords": "Field CodeKeywords Keywords used to place function code implementation. Namespace : VRLabs.ModularShaderSystem Syntax [FormerlySerializedAs(\"CodeSinkKeywords\")] [FormerlySerializedAs(\"CodeSinkKeyword\")] public List<string> CodeKeywords Returns List < String >"
  },
  "Next/api/VRLabs.ModularShaderSystem.ShaderFunction.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.ShaderFunction.html",
    "title": "Class ShaderFunction | Modular Shader System Documentation",
    "keywords": "Class ShaderFunction Function information for a shader module. Inheritance Object ShaderFunction Namespace : VRLabs.ModularShaderSystem Syntax [Serializable] public class ShaderFunction Fields Name Description AppendAfter Function or keyword this function appends after. CodeKeywords Keywords used to place function code implementation. Name Name of the function. Queue Order in which this function is evaluated respectively to their AppendAfter value. ShaderFunctionCode Template containing the function implementation. UsedVariables List of variables the functions uses. VariableKeywords Keywords used to place variable definitions."
  },
  "Next/api/VRLabs.ModularShaderSystem.ShaderFunction.Name.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.ShaderFunction.Name.html",
    "title": "Field Name | Modular Shader System Documentation",
    "keywords": "Field Name Name of the function. Namespace : VRLabs.ModularShaderSystem Syntax public string Name Returns String"
  },
  "Next/api/VRLabs.ModularShaderSystem.ShaderFunction.Queue.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.ShaderFunction.Queue.html",
    "title": "Field Queue | Modular Shader System Documentation",
    "keywords": "Field Queue Order in which this function is evaluated respectively to their AppendAfter value. Namespace : VRLabs.ModularShaderSystem Syntax [FormerlySerializedAs(\"Priority\")] public short Queue Returns Int16"
  },
  "Next/api/VRLabs.ModularShaderSystem.ShaderFunction.ShaderFunctionCode.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.ShaderFunction.ShaderFunctionCode.html",
    "title": "Field ShaderFunctionCode | Modular Shader System Documentation",
    "keywords": "Field ShaderFunctionCode Template containing the function implementation. Namespace : VRLabs.ModularShaderSystem Syntax public TemplateAsset ShaderFunctionCode Returns TemplateAsset"
  },
  "Next/api/VRLabs.ModularShaderSystem.ShaderFunction.UsedVariables.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.ShaderFunction.UsedVariables.html",
    "title": "Field UsedVariables | Modular Shader System Documentation",
    "keywords": "Field UsedVariables List of variables the functions uses. Namespace : VRLabs.ModularShaderSystem Syntax public List<Variable> UsedVariables Returns List < Variable >"
  },
  "Next/api/VRLabs.ModularShaderSystem.ShaderFunction.VariableKeywords.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.ShaderFunction.VariableKeywords.html",
    "title": "Field VariableKeywords | Modular Shader System Documentation",
    "keywords": "Field VariableKeywords Keywords used to place variable definitions. Namespace : VRLabs.ModularShaderSystem Syntax [FormerlySerializedAs(\"VariableSinkKeywords\")] [FormerlySerializedAs(\"VariableSinkKeyword\")] public List<string> VariableKeywords Returns List < String >"
  },
  "Next/api/VRLabs.ModularShaderSystem.ShaderGenerator.CheckShaderIssues.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.ShaderGenerator.CheckShaderIssues.html",
    "title": "Method CheckShaderIssues | Modular Shader System Documentation",
    "keywords": "Method CheckShaderIssues CheckShaderIssues(ModularShader) Checks for issues with the modular shader in its current state Declaration public static List<string> CheckShaderIssues(ModularShader shader) Parameters Type Name Description ModularShader shader Shader to check Returns Type Description List < String > A list of strings detailing all errors, or an empty list if there are no issues Remarks When you're making your own automatic generation system for your application, be sure to call this function before calling GenerateShader(String, ModularShader, Boolean) or and check for errors to be sure that there won't be issues with the generation of the shader file. CheckShaderIssues(List<ShaderModule>) Checks for issues with the given list of modules Declaration public static List<string> CheckShaderIssues(List<ShaderModule> modules) Parameters Type Name Description List < ShaderModule > modules Modules to check Returns Type Description List < String > A list of strings detailing all errors, or an empty list if there are no issues Remarks When you're making your own automatic generation system for your application, be sure to call this function before calling GenerateShader(String, ModularShader, Boolean) or and check for errors to be sure that there won't be issues with the generation of the shader file."
  },
  "Next/api/VRLabs.ModularShaderSystem.ShaderGenerator.EnqueueShadersToGenerate.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.ShaderGenerator.EnqueueShadersToGenerate.html",
    "title": "Method EnqueueShadersToGenerate | Modular Shader System Documentation",
    "keywords": "Method EnqueueShadersToGenerate EnqueueShadersToGenerate(String, ModularShader, IEnumerable<Material>, Action<StringBuilder, ShaderGenerator.ShaderContext>) Enqueues shaders to generate Declaration public static List<ShaderGenerator.ShaderContext> EnqueueShadersToGenerate(string path, ModularShader shader, IEnumerable<Material> materials, Action<StringBuilder, ShaderGenerator.ShaderContext> postGeneration = null) Parameters Type Name Description String path path for the shader files ModularShader shader Modular shader to use IEnumerable < Material > materials List of materials given Action < StringBuilder , ShaderGenerator.ShaderContext > postGeneration Actions to performs post generation and before cleanup Returns Type Description List < ShaderGenerator.ShaderContext > A list of the shaderContexts"
  },
  "Next/api/VRLabs.ModularShaderSystem.ShaderGenerator.FindActiveModules.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.ShaderGenerator.FindActiveModules.html",
    "title": "Method FindActiveModules | Modular Shader System Documentation",
    "keywords": "Method FindActiveModules FindActiveModules(ModularShader, Dictionary<String, Int32>) Find all active modules inside a specified shader. Declaration public static List<ShaderModule> FindActiveModules(ModularShader shader, Dictionary<string, int> activeEnablers) Parameters Type Name Description ModularShader shader Modular shader to check Dictionary < String , Int32 > activeEnablers Dictionary of active Property Enablers Returns Type Description List < ShaderModule > A list of active ShaderModule inside this shader"
  },
  "Next/api/VRLabs.ModularShaderSystem.ShaderGenerator.FindAllFunctions.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.ShaderGenerator.FindAllFunctions.html",
    "title": "Method FindAllFunctions | Modular Shader System Documentation",
    "keywords": "Method FindAllFunctions FindAllFunctions(ModularShader) Find all functions declared by all the modules inside a specified shader Declaration public static List<ShaderFunction> FindAllFunctions(ModularShader shader) Parameters Type Name Description ModularShader shader Modular shader to check Returns Type Description List < ShaderFunction > A list of ShaderFunction inside this shader"
  },
  "Next/api/VRLabs.ModularShaderSystem.ShaderGenerator.FindAllModules.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.ShaderGenerator.FindAllModules.html",
    "title": "Method FindAllModules | Modular Shader System Documentation",
    "keywords": "Method FindAllModules FindAllModules(ModularShader) Find all modules inside a specified shader. Declaration public static List<ShaderModule> FindAllModules(ModularShader shader) Parameters Type Name Description ModularShader shader Modular shader to check Returns Type Description List < ShaderModule > A list of ShaderModule inside this shader"
  },
  "Next/api/VRLabs.ModularShaderSystem.ShaderGenerator.FindAllProperties.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.ShaderGenerator.FindAllProperties.html",
    "title": "Method FindAllProperties | Modular Shader System Documentation",
    "keywords": "Method FindAllProperties FindAllProperties(ModularShader) Find all properties declared by the shader and its current modules Declaration public static List<Property> FindAllProperties(ModularShader shader) Parameters Type Name Description ModularShader shader Modular shader to check Returns Type Description List < Property > A list of Property contained in this shader"
  },
  "Next/api/VRLabs.ModularShaderSystem.ShaderGenerator.GenerateMinimalShader.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.ShaderGenerator.GenerateMinimalShader.html",
    "title": "Method GenerateMinimalShader | Modular Shader System Documentation",
    "keywords": "Method GenerateMinimalShader GenerateMinimalShader(String, ModularShader, IEnumerable<Material>, Action<StringBuilder, ShaderGenerator.ShaderContext>) Generates a shader for selected materials Declaration public static void GenerateMinimalShader(string path, ModularShader shader, IEnumerable<Material> materials, Action<StringBuilder, ShaderGenerator.ShaderContext> postGeneration = null) Parameters Type Name Description String path path for the shader files ModularShader shader Modular shader to use IEnumerable < Material > materials List of materials given Action < StringBuilder , ShaderGenerator.ShaderContext > postGeneration Actions to performs post generation and before cleanup"
  },
  "Next/api/VRLabs.ModularShaderSystem.ShaderGenerator.GenerateMinimalShaders.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.ShaderGenerator.GenerateMinimalShaders.html",
    "title": "Method GenerateMinimalShaders | Modular Shader System Documentation",
    "keywords": "Method GenerateMinimalShaders GenerateMinimalShaders(List<ShaderGenerator.ShaderContext>) Generates shaders from the given list of contexts Declaration public static void GenerateMinimalShaders(this List<ShaderGenerator.ShaderContext> contexts) Parameters Type Name Description List < ShaderGenerator.ShaderContext > contexts"
  },
  "Next/api/VRLabs.ModularShaderSystem.ShaderGenerator.GenerateShader.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.ShaderGenerator.GenerateShader.html",
    "title": "Method GenerateShader | Modular Shader System Documentation",
    "keywords": "Method GenerateShader GenerateShader(String, ModularShader, Boolean) Generates a shader with all shader variants Declaration public static void GenerateShader(string path, ModularShader shader, bool hideVariants = false) Parameters Type Name Description String path path of the folder to put the shader files ModularShader shader Modular shader to use Boolean hideVariants Hide variants from the shader selector on the material, showing only the shader with all variants disabled from the menu GenerateShader(String, ModularShader, Action<StringBuilder, ShaderGenerator.ShaderContext>, Boolean) Generates a shader with all shader variants, you can give a custom PostGeneration action to handle the shader result for some custom modifications (build keywords are still available at this stage) Declaration public static void GenerateShader(string path, ModularShader shader, Action<StringBuilder, ShaderGenerator.ShaderContext> postGeneration, bool hideVariants = false) Parameters Type Name Description String path path of the folder to put the shader files ModularShader shader Modular shader to use Action < StringBuilder , ShaderGenerator.ShaderContext > postGeneration Actions to performs post generation and before cleanup Boolean hideVariants Hide variants from the shader selector on the material, showing only the shader with all variants disabled from the menu"
  },
  "Next/api/VRLabs.ModularShaderSystem.ShaderGenerator.GetVariantCode.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.ShaderGenerator.GetVariantCode.html",
    "title": "Method GetVariantCode | Modular Shader System Documentation",
    "keywords": "Method GetVariantCode GetVariantCode(Dictionary<String, Int32>) Declaration public static string GetVariantCode(Dictionary<string, int> activeEnablers) Parameters Type Name Description Dictionary < String , Int32 > activeEnablers Returns Type Description String"
  },
  "Next/api/VRLabs.ModularShaderSystem.ShaderGenerator.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.ShaderGenerator.html",
    "title": "Class ShaderGenerator | Modular Shader System Documentation",
    "keywords": "Class ShaderGenerator Inheritance Object ShaderGenerator Namespace : VRLabs.ModularShaderSystem Syntax public static class ShaderGenerator Methods Name Description CheckShaderIssues(List<ShaderModule>) Checks for issues with the given list of modules CheckShaderIssues(ModularShader) Checks for issues with the modular shader in its current state EnqueueShadersToGenerate(String, ModularShader, IEnumerable<Material>, Action<StringBuilder, ShaderGenerator.ShaderContext>) Enqueues shaders to generate FindActiveModules(ModularShader, Dictionary<String, Int32>) Find all active modules inside a specified shader. FindAllFunctions(ModularShader) Find all functions declared by all the modules inside a specified shader FindAllModules(ModularShader) Find all modules inside a specified shader. FindAllProperties(ModularShader) Find all properties declared by the shader and its current modules GenerateMinimalShader(String, ModularShader, IEnumerable<Material>, Action<StringBuilder, ShaderGenerator.ShaderContext>) Generates a shader for selected materials GenerateMinimalShaders(List<ShaderGenerator.ShaderContext>) Generates shaders from the given list of contexts GenerateShader(String, ModularShader, Action<StringBuilder, ShaderGenerator.ShaderContext>, Boolean) Generates a shader with all shader variants, you can give a custom PostGeneration action to handle the shader result for some custom modifications (build keywords are still available at this stage) GenerateShader(String, ModularShader, Boolean) Generates a shader with all shader variants GetVariantCode(Dictionary<String, Int32>)"
  },
  "Next/api/VRLabs.ModularShaderSystem.ShaderGenerator.ShaderContext.ActiveEnablers.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.ShaderGenerator.ShaderContext.ActiveEnablers.html",
    "title": "Field ActiveEnablers | Modular Shader System Documentation",
    "keywords": "Field ActiveEnablers Namespace : VRLabs.ModularShaderSystem Syntax public Dictionary<string, int> ActiveEnablers Returns Dictionary < String , Int32 >"
  },
  "Next/api/VRLabs.ModularShaderSystem.ShaderGenerator.ShaderContext.AreVariantsHidden.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.ShaderGenerator.ShaderContext.AreVariantsHidden.html",
    "title": "Field AreVariantsHidden | Modular Shader System Documentation",
    "keywords": "Field AreVariantsHidden Namespace : VRLabs.ModularShaderSystem Syntax public bool AreVariantsHidden Returns Boolean"
  },
  "Next/api/VRLabs.ModularShaderSystem.ShaderGenerator.ShaderContext.FilePath.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.ShaderGenerator.ShaderContext.FilePath.html",
    "title": "Field FilePath | Modular Shader System Documentation",
    "keywords": "Field FilePath Namespace : VRLabs.ModularShaderSystem Syntax public string FilePath Returns String"
  },
  "Next/api/VRLabs.ModularShaderSystem.ShaderGenerator.ShaderContext.FreshAssets.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.ShaderGenerator.ShaderContext.FreshAssets.html",
    "title": "Field FreshAssets | Modular Shader System Documentation",
    "keywords": "Field FreshAssets Namespace : VRLabs.ModularShaderSystem Syntax public Dictionary<TemplateAsset, TemplateAsset> FreshAssets Returns Dictionary < TemplateAsset , TemplateAsset >"
  },
  "Next/api/VRLabs.ModularShaderSystem.ShaderGenerator.ShaderContext.GenerateShader.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.ShaderGenerator.ShaderContext.GenerateShader.html",
    "title": "Method GenerateShader | Modular Shader System Documentation",
    "keywords": "Method GenerateShader GenerateShader() Declaration public void GenerateShader()"
  },
  "Next/api/VRLabs.ModularShaderSystem.ShaderGenerator.ShaderContext.Guid.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.ShaderGenerator.ShaderContext.Guid.html",
    "title": "Field Guid | Modular Shader System Documentation",
    "keywords": "Field Guid Namespace : VRLabs.ModularShaderSystem Syntax public string Guid Returns String"
  },
  "Next/api/VRLabs.ModularShaderSystem.ShaderGenerator.ShaderContext.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.ShaderGenerator.ShaderContext.html",
    "title": "Class ShaderGenerator.ShaderContext | Modular Shader System Documentation",
    "keywords": "Class ShaderGenerator.ShaderContext Inheritance Object ShaderGenerator.ShaderContext Namespace : VRLabs.ModularShaderSystem Syntax public class ShaderContext Fields Name Description ActiveEnablers AreVariantsHidden FilePath FreshAssets Guid Materials OptimizedShader PostGeneration PropertiesBlock Shader ShaderFile ShaderName VariantFileName VariantName Properties Name Description Modules Methods Name Description GenerateShader()"
  },
  "Next/api/VRLabs.ModularShaderSystem.ShaderGenerator.ShaderContext.Materials.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.ShaderGenerator.ShaderContext.Materials.html",
    "title": "Field Materials | Modular Shader System Documentation",
    "keywords": "Field Materials Namespace : VRLabs.ModularShaderSystem Syntax public List<Material> Materials Returns List < Material >"
  },
  "Next/api/VRLabs.ModularShaderSystem.ShaderGenerator.ShaderContext.Modules.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.ShaderGenerator.ShaderContext.Modules.html",
    "title": "Property Modules | Modular Shader System Documentation",
    "keywords": "Property Modules Modules Declaration public List<ShaderModule> Modules { get; } Property Value Type Description List < ShaderModule >"
  },
  "Next/api/VRLabs.ModularShaderSystem.ShaderGenerator.ShaderContext.OptimizedShader.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.ShaderGenerator.ShaderContext.OptimizedShader.html",
    "title": "Field OptimizedShader | Modular Shader System Documentation",
    "keywords": "Field OptimizedShader Namespace : VRLabs.ModularShaderSystem Syntax public bool OptimizedShader Returns Boolean"
  },
  "Next/api/VRLabs.ModularShaderSystem.ShaderGenerator.ShaderContext.PostGeneration.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.ShaderGenerator.ShaderContext.PostGeneration.html",
    "title": "Field PostGeneration | Modular Shader System Documentation",
    "keywords": "Field PostGeneration Namespace : VRLabs.ModularShaderSystem Syntax public Action<StringBuilder, ShaderGenerator.ShaderContext> PostGeneration Returns Action < StringBuilder , ShaderGenerator.ShaderContext >"
  },
  "Next/api/VRLabs.ModularShaderSystem.ShaderGenerator.ShaderContext.PropertiesBlock.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.ShaderGenerator.ShaderContext.PropertiesBlock.html",
    "title": "Field PropertiesBlock | Modular Shader System Documentation",
    "keywords": "Field PropertiesBlock Namespace : VRLabs.ModularShaderSystem Syntax public string PropertiesBlock Returns String"
  },
  "Next/api/VRLabs.ModularShaderSystem.ShaderGenerator.ShaderContext.Shader.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.ShaderGenerator.ShaderContext.Shader.html",
    "title": "Field Shader | Modular Shader System Documentation",
    "keywords": "Field Shader Namespace : VRLabs.ModularShaderSystem Syntax public ModularShader Shader Returns ModularShader"
  },
  "Next/api/VRLabs.ModularShaderSystem.ShaderGenerator.ShaderContext.ShaderFile.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.ShaderGenerator.ShaderContext.ShaderFile.html",
    "title": "Field ShaderFile | Modular Shader System Documentation",
    "keywords": "Field ShaderFile Namespace : VRLabs.ModularShaderSystem Syntax public StringBuilder ShaderFile Returns StringBuilder"
  },
  "Next/api/VRLabs.ModularShaderSystem.ShaderGenerator.ShaderContext.ShaderName.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.ShaderGenerator.ShaderContext.ShaderName.html",
    "title": "Field ShaderName | Modular Shader System Documentation",
    "keywords": "Field ShaderName Namespace : VRLabs.ModularShaderSystem Syntax public string ShaderName Returns String"
  },
  "Next/api/VRLabs.ModularShaderSystem.ShaderGenerator.ShaderContext.VariantFileName.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.ShaderGenerator.ShaderContext.VariantFileName.html",
    "title": "Field VariantFileName | Modular Shader System Documentation",
    "keywords": "Field VariantFileName Namespace : VRLabs.ModularShaderSystem Syntax public string VariantFileName Returns String"
  },
  "Next/api/VRLabs.ModularShaderSystem.ShaderGenerator.ShaderContext.VariantName.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.ShaderGenerator.ShaderContext.VariantName.html",
    "title": "Field VariantName | Modular Shader System Documentation",
    "keywords": "Field VariantName Namespace : VRLabs.ModularShaderSystem Syntax public string VariantName Returns String"
  },
  "Next/api/VRLabs.ModularShaderSystem.ShaderModule.AdditionalSerializedData.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.ShaderModule.AdditionalSerializedData.html",
    "title": "Field AdditionalSerializedData | Modular Shader System Documentation",
    "keywords": "Field AdditionalSerializedData string that can contain whatever you want, it is originally intended to contain serialized data that you may need for your own custom system based on the modular shader system. Namespace : VRLabs.ModularShaderSystem Syntax [HideInInspector] public string AdditionalSerializedData Returns String"
  },
  "Next/api/VRLabs.ModularShaderSystem.ShaderModule.Author.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.ShaderModule.Author.html",
    "title": "Field Author | Modular Shader System Documentation",
    "keywords": "Field Author Author of the shader module. Namespace : VRLabs.ModularShaderSystem Syntax public string Author Returns String"
  },
  "Next/api/VRLabs.ModularShaderSystem.ShaderModule.Description.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.ShaderModule.Description.html",
    "title": "Field Description | Modular Shader System Documentation",
    "keywords": "Field Description Description of the shader model. Namespace : VRLabs.ModularShaderSystem Syntax public string Description Returns String"
  },
  "Next/api/VRLabs.ModularShaderSystem.ShaderModule.EnableProperties.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.ShaderModule.EnableProperties.html",
    "title": "Field EnableProperties | Modular Shader System Documentation",
    "keywords": "Field EnableProperties List of properties declared by the module. Namespace : VRLabs.ModularShaderSystem Syntax public List<EnableProperty> EnableProperties Returns List < EnableProperty >"
  },
  "Next/api/VRLabs.ModularShaderSystem.ShaderModule.Functions.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.ShaderModule.Functions.html",
    "title": "Field Functions | Modular Shader System Documentation",
    "keywords": "Field Functions List functions this shader module uses. Namespace : VRLabs.ModularShaderSystem Syntax public List<ShaderFunction> Functions Returns List < ShaderFunction >"
  },
  "Next/api/VRLabs.ModularShaderSystem.ShaderModule.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.ShaderModule.html",
    "title": "Class ShaderModule | Modular Shader System Documentation",
    "keywords": "Class ShaderModule Asset containing a module to add features to a shader. Inheritance Object Object ScriptableObject ShaderModule Namespace : VRLabs.ModularShaderSystem Syntax [CreateAssetMenu(fileName = \"ShaderModule\", menuName = \"VRLabs/Modular Shader/Shader Module\", order = 0)] public class ShaderModule : ScriptableObject Fields Name Description AdditionalSerializedData string that can contain whatever you want, it is originally intended to contain serialized data that you may need for your own custom system based on the modular shader system. Author Author of the shader module. Description Description of the shader model. EnableProperties List of properties declared by the module. Functions List functions this shader module uses. Id Id of the shader module. IncompatibleWith List of ids of shader modules this shader module is incompatible. ModuleDependencies List of ids of shader modules this shader module depends on. Name Name of the shader module. Properties List of properties declared by the module. Templates List of templates this shader module uses. Version Version of the shader module."
  },
  "Next/api/VRLabs.ModularShaderSystem.ShaderModule.Id.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.ShaderModule.Id.html",
    "title": "Field Id | Modular Shader System Documentation",
    "keywords": "Field Id Id of the shader module. Namespace : VRLabs.ModularShaderSystem Syntax public string Id Returns String"
  },
  "Next/api/VRLabs.ModularShaderSystem.ShaderModule.IncompatibleWith.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.ShaderModule.IncompatibleWith.html",
    "title": "Field IncompatibleWith | Modular Shader System Documentation",
    "keywords": "Field IncompatibleWith List of ids of shader modules this shader module is incompatible. Namespace : VRLabs.ModularShaderSystem Syntax public List<string> IncompatibleWith Returns List < String >"
  },
  "Next/api/VRLabs.ModularShaderSystem.ShaderModule.ModuleDependencies.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.ShaderModule.ModuleDependencies.html",
    "title": "Field ModuleDependencies | Modular Shader System Documentation",
    "keywords": "Field ModuleDependencies List of ids of shader modules this shader module depends on. Namespace : VRLabs.ModularShaderSystem Syntax public List<string> ModuleDependencies Returns List < String >"
  },
  "Next/api/VRLabs.ModularShaderSystem.ShaderModule.Name.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.ShaderModule.Name.html",
    "title": "Field Name | Modular Shader System Documentation",
    "keywords": "Field Name Name of the shader module. Namespace : VRLabs.ModularShaderSystem Syntax public string Name Returns String"
  },
  "Next/api/VRLabs.ModularShaderSystem.ShaderModule.Properties.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.ShaderModule.Properties.html",
    "title": "Field Properties | Modular Shader System Documentation",
    "keywords": "Field Properties List of properties declared by the module. Namespace : VRLabs.ModularShaderSystem Syntax public List<Property> Properties Returns List < Property >"
  },
  "Next/api/VRLabs.ModularShaderSystem.ShaderModule.Templates.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.ShaderModule.Templates.html",
    "title": "Field Templates | Modular Shader System Documentation",
    "keywords": "Field Templates List of templates this shader module uses. Namespace : VRLabs.ModularShaderSystem Syntax public List<ModuleTemplate> Templates Returns List < ModuleTemplate >"
  },
  "Next/api/VRLabs.ModularShaderSystem.ShaderModule.Version.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.ShaderModule.Version.html",
    "title": "Field Version | Modular Shader System Documentation",
    "keywords": "Field Version Version of the shader module. Namespace : VRLabs.ModularShaderSystem Syntax public string Version Returns String"
  },
  "Next/api/VRLabs.ModularShaderSystem.ShaderStringBuilderExtensions.AppendLineTabbed.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.ShaderStringBuilderExtensions.AppendLineTabbed.html",
    "title": "Method AppendLineTabbed | Modular Shader System Documentation",
    "keywords": "Method AppendLineTabbed AppendLineTabbed(StringBuilder, Int32, String) Appends a line to the StringBuilder with a specific tab level attached. Declaration public static StringBuilder AppendLineTabbed(this StringBuilder builder, int tabLevel, string value) Parameters Type Name Description StringBuilder builder Builder to use Int32 tabLevel number of tabs String value string to append Returns Type Description StringBuilder The StringBuilder used"
  },
  "Next/api/VRLabs.ModularShaderSystem.ShaderStringBuilderExtensions.AppendMultilineTabbed.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.ShaderStringBuilderExtensions.AppendMultilineTabbed.html",
    "title": "Method AppendMultilineTabbed | Modular Shader System Documentation",
    "keywords": "Method AppendMultilineTabbed AppendMultilineTabbed(StringBuilder, Int32, String) Appends mulltiple lines to the StringBuilder with a specific tab level attached. Declaration public static StringBuilder AppendMultilineTabbed(this StringBuilder builder, int tabLevel, string value) Parameters Type Name Description StringBuilder builder Builder to use Int32 tabLevel number of tabs String value multiline string to append Returns Type Description StringBuilder The StringBuilder used"
  },
  "Next/api/VRLabs.ModularShaderSystem.ShaderStringBuilderExtensions.AppendTabbed.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.ShaderStringBuilderExtensions.AppendTabbed.html",
    "title": "Method AppendTabbed | Modular Shader System Documentation",
    "keywords": "Method AppendTabbed AppendTabbed(StringBuilder, Int32, String) Appends a string to the StringBuilder with a specific tab level attached. Declaration public static StringBuilder AppendTabbed(this StringBuilder builder, int tabLevel, string value) Parameters Type Name Description StringBuilder builder Builder to use Int32 tabLevel number of tabs String value string to append Returns Type Description StringBuilder The StringBuilder used"
  },
  "Next/api/VRLabs.ModularShaderSystem.ShaderStringBuilderExtensions.Contains.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.ShaderStringBuilderExtensions.Contains.html",
    "title": "Method Contains | Modular Shader System Documentation",
    "keywords": "Method Contains Contains(StringBuilder, String) Checks if a StringBuilder contains a specific string Declaration public static bool Contains(this StringBuilder haystack, string needle) Parameters Type Name Description StringBuilder haystack The StringBuilder to use String needle The string to search Returns Type Description Boolean True it The StringBuilder contains the string, false otherwise Remarks This has been shamelessly copy pasted from here: https://stackoverflow.com/questions/12261344/fastest-search-method-in-stringbuilder"
  },
  "Next/api/VRLabs.ModularShaderSystem.ShaderStringBuilderExtensions.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.ShaderStringBuilderExtensions.html",
    "title": "Class ShaderStringBuilderExtensions | Modular Shader System Documentation",
    "keywords": "Class ShaderStringBuilderExtensions Static class that adds extension methods for the StringBuilder, used mainly in the shader generator for writing down the shader file Inheritance Object ShaderStringBuilderExtensions Namespace : VRLabs.ModularShaderSystem Syntax public static class ShaderStringBuilderExtensions Methods Name Description AppendLineTabbed(StringBuilder, Int32, String) Appends a line to the StringBuilder with a specific tab level attached. AppendMultilineTabbed(StringBuilder, Int32, String) Appends mulltiple lines to the StringBuilder with a specific tab level attached. AppendTabbed(StringBuilder, Int32, String) Appends a string to the StringBuilder with a specific tab level attached. Contains(StringBuilder, String) Checks if a StringBuilder contains a specific string IndexOf(StringBuilder, String) Get the index of the first match of a string Prepend(StringBuilder, String) Prepends a string to the StringBuilder. PrependLine(StringBuilder, String) Prepends a line to the StringBuilder. PrependLineTabbed(StringBuilder, Int32, String) Prepends a line to the StringBuilder with a specific tab level attached. PrependTabbed(StringBuilder, Int32, String) Prepends a string to the StringBuilder with a specific tab level attached."
  },
  "Next/api/VRLabs.ModularShaderSystem.ShaderStringBuilderExtensions.IndexOf.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.ShaderStringBuilderExtensions.IndexOf.html",
    "title": "Method IndexOf | Modular Shader System Documentation",
    "keywords": "Method IndexOf IndexOf(StringBuilder, String) Get the index of the first match of a string Declaration public static int IndexOf(this StringBuilder haystack, string needle) Parameters Type Name Description StringBuilder haystack The StringBuilder to use String needle The string to search Returns Type Description Int32 The index of the first match Remarks This has been shamelessly copy pasted from here: https://stackoverflow.com/questions/12261344/fastest-search-method-in-stringbuilder Exceptions Type Condition ArgumentNullException"
  },
  "Next/api/VRLabs.ModularShaderSystem.ShaderStringBuilderExtensions.Prepend.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.ShaderStringBuilderExtensions.Prepend.html",
    "title": "Method Prepend | Modular Shader System Documentation",
    "keywords": "Method Prepend Prepend(StringBuilder, String) Prepends a string to the StringBuilder. Declaration public static StringBuilder Prepend(this StringBuilder builder, string value) Parameters Type Name Description StringBuilder builder Builder to use String value string to prepend Returns Type Description StringBuilder The StringBuilder used"
  },
  "Next/api/VRLabs.ModularShaderSystem.ShaderStringBuilderExtensions.PrependLine.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.ShaderStringBuilderExtensions.PrependLine.html",
    "title": "Method PrependLine | Modular Shader System Documentation",
    "keywords": "Method PrependLine PrependLine(StringBuilder, String) Prepends a line to the StringBuilder. Declaration public static StringBuilder PrependLine(this StringBuilder builder, string value) Parameters Type Name Description StringBuilder builder Builder to use String value string to prepend Returns Type Description StringBuilder The StringBuilder used"
  },
  "Next/api/VRLabs.ModularShaderSystem.ShaderStringBuilderExtensions.PrependLineTabbed.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.ShaderStringBuilderExtensions.PrependLineTabbed.html",
    "title": "Method PrependLineTabbed | Modular Shader System Documentation",
    "keywords": "Method PrependLineTabbed PrependLineTabbed(StringBuilder, Int32, String) Prepends a line to the StringBuilder with a specific tab level attached. Declaration public static StringBuilder PrependLineTabbed(this StringBuilder builder, int tabLevel, string value) Parameters Type Name Description StringBuilder builder Builder to use Int32 tabLevel number of tabs String value string to prepend Returns Type Description StringBuilder The StringBuilder used"
  },
  "Next/api/VRLabs.ModularShaderSystem.ShaderStringBuilderExtensions.PrependTabbed.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.ShaderStringBuilderExtensions.PrependTabbed.html",
    "title": "Method PrependTabbed | Modular Shader System Documentation",
    "keywords": "Method PrependTabbed PrependTabbed(StringBuilder, Int32, String) Prepends a string to the StringBuilder with a specific tab level attached. Declaration public static StringBuilder PrependTabbed(this StringBuilder builder, int tabLevel, string value) Parameters Type Name Description StringBuilder builder Builder to use Int32 tabLevel number of tabs String value string to prepend Returns Type Description StringBuilder The StringBuilder used"
  },
  "Next/api/VRLabs.ModularShaderSystem.TemplateAsset.-ctor.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.TemplateAsset.-ctor.html",
    "title": "Constructor TemplateAsset | Modular Shader System Documentation",
    "keywords": "Constructor TemplateAsset TemplateAsset(String) Declaration public TemplateAsset(string template) Parameters Type Name Description String template TemplateAsset() Declaration public TemplateAsset()"
  },
  "Next/api/VRLabs.ModularShaderSystem.TemplateAsset.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.TemplateAsset.html",
    "title": "Class TemplateAsset | Modular Shader System Documentation",
    "keywords": "Class TemplateAsset Asset containing shader code that is used around the modular shader system. Inheritance Object Object ScriptableObject TemplateAsset Namespace : VRLabs.ModularShaderSystem Syntax public class TemplateAsset : ScriptableObject Constructors Name Description TemplateAsset() TemplateAsset(String) Fields Name Description Keywords Keywords found in the template Template Template string."
  },
  "Next/api/VRLabs.ModularShaderSystem.TemplateAsset.Keywords.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.TemplateAsset.Keywords.html",
    "title": "Field Keywords | Modular Shader System Documentation",
    "keywords": "Field Keywords Keywords found in the template Namespace : VRLabs.ModularShaderSystem Syntax public string[] Keywords Returns String []"
  },
  "Next/api/VRLabs.ModularShaderSystem.TemplateAsset.Template.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.TemplateAsset.Template.html",
    "title": "Field Template | Modular Shader System Documentation",
    "keywords": "Field Template Template string. Namespace : VRLabs.ModularShaderSystem Syntax public string Template Returns String"
  },
  "Next/api/VRLabs.ModularShaderSystem.TemplateAssetImporter.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.TemplateAssetImporter.html",
    "title": "Class TemplateAssetImporter | Modular Shader System Documentation",
    "keywords": "Class TemplateAssetImporter Scripted importer for the template asset Inheritance Object Object AssetImporter ScriptedImporter TemplateAssetImporter Namespace : VRLabs.ModularShaderSystem Syntax [ScriptedImporter(1, \"stemplate\")] public class TemplateAssetImporter : ScriptedImporter Methods Name Description OnImportAsset(AssetImportContext) SupportsRemappedAssetType(Type)"
  },
  "Next/api/VRLabs.ModularShaderSystem.TemplateAssetImporter.OnImportAsset.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.TemplateAssetImporter.OnImportAsset.html",
    "title": "Method OnImportAsset | Modular Shader System Documentation",
    "keywords": "Method OnImportAsset OnImportAsset(AssetImportContext) Declaration public override void OnImportAsset(AssetImportContext ctx) Parameters Type Name Description AssetImportContext ctx Overrides ScriptedImporter.OnImportAsset(AssetImportContext)"
  },
  "Next/api/VRLabs.ModularShaderSystem.TemplateAssetImporter.SupportsRemappedAssetType.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.TemplateAssetImporter.SupportsRemappedAssetType.html",
    "title": "Method SupportsRemappedAssetType | Modular Shader System Documentation",
    "keywords": "Method SupportsRemappedAssetType SupportsRemappedAssetType(Type) Declaration public override bool SupportsRemappedAssetType(Type type) Parameters Type Name Description Type type Returns Type Description Boolean Overrides ScriptedImporter.SupportsRemappedAssetType(Type)"
  },
  "Next/api/VRLabs.ModularShaderSystem.TemplateCollectionAsset.-ctor.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.TemplateCollectionAsset.-ctor.html",
    "title": "Constructor TemplateCollectionAsset | Modular Shader System Documentation",
    "keywords": "Constructor TemplateCollectionAsset TemplateCollectionAsset() Declaration public TemplateCollectionAsset()"
  },
  "Next/api/VRLabs.ModularShaderSystem.TemplateCollectionAsset.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.TemplateCollectionAsset.html",
    "title": "Class TemplateCollectionAsset | Modular Shader System Documentation",
    "keywords": "Class TemplateCollectionAsset Asset containing multiple templates separated by special keywords. Inheritance Object Object ScriptableObject TemplateCollectionAsset Namespace : VRLabs.ModularShaderSystem Syntax public class TemplateCollectionAsset : ScriptableObject Remarks Each template is marked by starting a \"#T#TEMPLATE_NAME\" and ends whenever a new template keyword is declared or the end of the file. Constructors Name Description TemplateCollectionAsset() Fields Name Description Templates List of templates contained in this collection."
  },
  "Next/api/VRLabs.ModularShaderSystem.TemplateCollectionAsset.Templates.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.TemplateCollectionAsset.Templates.html",
    "title": "Field Templates | Modular Shader System Documentation",
    "keywords": "Field Templates List of templates contained in this collection. Namespace : VRLabs.ModularShaderSystem Syntax public List<TemplateAsset> Templates Returns List < TemplateAsset >"
  },
  "Next/api/VRLabs.ModularShaderSystem.TemplateColletionAssetImporter.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.TemplateColletionAssetImporter.html",
    "title": "Class TemplateColletionAssetImporter | Modular Shader System Documentation",
    "keywords": "Class TemplateColletionAssetImporter Scripted importer for the template collection. Inheritance Object Object AssetImporter ScriptedImporter TemplateColletionAssetImporter Namespace : VRLabs.ModularShaderSystem Syntax [ScriptedImporter(1, \"stemplatecollection\")] public class TemplateColletionAssetImporter : ScriptedImporter Methods Name Description OnImportAsset(AssetImportContext) SupportsRemappedAssetType(Type)"
  },
  "Next/api/VRLabs.ModularShaderSystem.TemplateColletionAssetImporter.OnImportAsset.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.TemplateColletionAssetImporter.OnImportAsset.html",
    "title": "Method OnImportAsset | Modular Shader System Documentation",
    "keywords": "Method OnImportAsset OnImportAsset(AssetImportContext) Declaration public override void OnImportAsset(AssetImportContext ctx) Parameters Type Name Description AssetImportContext ctx Overrides ScriptedImporter.OnImportAsset(AssetImportContext)"
  },
  "Next/api/VRLabs.ModularShaderSystem.TemplateColletionAssetImporter.SupportsRemappedAssetType.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.TemplateColletionAssetImporter.SupportsRemappedAssetType.html",
    "title": "Method SupportsRemappedAssetType | Modular Shader System Documentation",
    "keywords": "Method SupportsRemappedAssetType SupportsRemappedAssetType(Type) Declaration public override bool SupportsRemappedAssetType(Type type) Parameters Type Name Description Type type Returns Type Description Boolean Overrides ScriptedImporter.SupportsRemappedAssetType(Type)"
  },
  "Next/api/VRLabs.ModularShaderSystem.Tools.EmbedLibraryWindow.CreateGUI.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.Tools.EmbedLibraryWindow.CreateGUI.html",
    "title": "Method CreateGUI | Modular Shader System Documentation",
    "keywords": "Method CreateGUI CreateGUI() Declaration public void CreateGUI()"
  },
  "Next/api/VRLabs.ModularShaderSystem.Tools.EmbedLibraryWindow.CreateWindow.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.Tools.EmbedLibraryWindow.CreateWindow.html",
    "title": "Method CreateWindow | Modular Shader System Documentation",
    "keywords": "Method CreateWindow CreateWindow() Declaration [MenuItem(\"VRLabs/Modular Shader/Tools/Embed Library\", priority = 102)] public static void CreateWindow()"
  },
  "Next/api/VRLabs.ModularShaderSystem.Tools.EmbedLibraryWindow.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.Tools.EmbedLibraryWindow.html",
    "title": "Class EmbedLibraryWindow | Modular Shader System Documentation",
    "keywords": "Class EmbedLibraryWindow Editor window to let users embed the modular shader system into another library. Inheritance Object Object ScriptableObject EditorWindow EmbedLibraryWindow Namespace : VRLabs.ModularShaderSystem.Tools Syntax public class EmbedLibraryWindow : EditorWindow Methods Name Description CreateGUI() CreateWindow()"
  },
  "Next/api/VRLabs.ModularShaderSystem.Tools.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.Tools.html",
    "title": "Namespace VRLabs.ModularShaderSystem.Tools | Modular Shader System Documentation",
    "keywords": "Namespace VRLabs.ModularShaderSystem.Tools Classes EmbedLibraryWindow Editor window to let users embed the modular shader system into another library."
  },
  "Next/api/VRLabs.ModularShaderSystem.UI.CodeViewElement.-ctor.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.UI.CodeViewElement.-ctor.html",
    "title": "Constructor CodeViewElement | Modular Shader System Documentation",
    "keywords": "Constructor CodeViewElement CodeViewElement() Default constructor of CodeViewElement Declaration public CodeViewElement()"
  },
  "Next/api/VRLabs.ModularShaderSystem.UI.CodeViewElement.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.UI.CodeViewElement.html",
    "title": "Class CodeViewElement | Modular Shader System Documentation",
    "keywords": "Class CodeViewElement VisualElement used to show a piece of code Inheritance Object CallbackEventHandler Focusable VisualElement CodeViewElement Implements IEventHandler ITransform ITransitionAnimations IExperimentalFeatures IVisualElementScheduler IResolvedStyle Namespace : VRLabs.ModularShaderSystem.UI Syntax public class CodeViewElement : VisualElement, IEventHandler, ITransform, ITransitionAnimations, IExperimentalFeatures, IVisualElementScheduler, IResolvedStyle Constructors Name Description CodeViewElement() Default constructor of CodeViewElement Properties Name Description LineCount Text"
  },
  "Next/api/VRLabs.ModularShaderSystem.UI.CodeViewElement.LineCount.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.UI.CodeViewElement.LineCount.html",
    "title": "Property LineCount | Modular Shader System Documentation",
    "keywords": "Property LineCount LineCount Declaration public int LineCount { get; } Property Value Type Description Int32"
  },
  "Next/api/VRLabs.ModularShaderSystem.UI.CodeViewElement.Text.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.UI.CodeViewElement.Text.html",
    "title": "Property Text | Modular Shader System Documentation",
    "keywords": "Property Text Text Declaration public string Text { get; set; } Property Value Type Description String"
  },
  "Next/api/VRLabs.ModularShaderSystem.UI.DefaultTextureValue.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.UI.DefaultTextureValue.html",
    "title": "Enum DefaultTextureValue | Modular Shader System Documentation",
    "keywords": "Enum DefaultTextureValue Default values for texture properties Namespace : VRLabs.ModularShaderSystem.UI Syntax public enum DefaultTextureValue Fields Name Description Black Bump Gray White"
  },
  "Next/api/VRLabs.ModularShaderSystem.UI.EnablePropertyDrawer.CreatePropertyGUI.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.UI.EnablePropertyDrawer.CreatePropertyGUI.html",
    "title": "Method CreatePropertyGUI | Modular Shader System Documentation",
    "keywords": "Method CreatePropertyGUI CreatePropertyGUI(SerializedProperty) Declaration public override VisualElement CreatePropertyGUI(SerializedProperty property) Parameters Type Name Description SerializedProperty property Returns Type Description VisualElement Overrides PropertyDrawer.CreatePropertyGUI(SerializedProperty)"
  },
  "Next/api/VRLabs.ModularShaderSystem.UI.EnablePropertyDrawer.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.UI.EnablePropertyDrawer.html",
    "title": "Class EnablePropertyDrawer | Modular Shader System Documentation",
    "keywords": "Class EnablePropertyDrawer Inspector drawer for EnableProperty . Inheritance Object GUIDrawer PropertyDrawer EnablePropertyDrawer Namespace : VRLabs.ModularShaderSystem.UI Syntax [CustomPropertyDrawer(typeof(EnableProperty))] public class EnablePropertyDrawer : PropertyDrawer Methods Name Description CreatePropertyGUI(SerializedProperty)"
  },
  "Next/api/VRLabs.ModularShaderSystem.UI.FunctionPropertyDrawer.CreatePropertyGUI.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.UI.FunctionPropertyDrawer.CreatePropertyGUI.html",
    "title": "Method CreatePropertyGUI | Modular Shader System Documentation",
    "keywords": "Method CreatePropertyGUI CreatePropertyGUI(SerializedProperty) Declaration public override VisualElement CreatePropertyGUI(SerializedProperty property) Parameters Type Name Description SerializedProperty property Returns Type Description VisualElement Overrides PropertyDrawer.CreatePropertyGUI(SerializedProperty)"
  },
  "Next/api/VRLabs.ModularShaderSystem.UI.FunctionPropertyDrawer.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.UI.FunctionPropertyDrawer.html",
    "title": "Class FunctionPropertyDrawer | Modular Shader System Documentation",
    "keywords": "Class FunctionPropertyDrawer Inspector drawer for ShaderFunction . Inheritance Object GUIDrawer PropertyDrawer FunctionPropertyDrawer Namespace : VRLabs.ModularShaderSystem.UI Syntax [CustomPropertyDrawer(typeof(ShaderFunction))] public class FunctionPropertyDrawer : PropertyDrawer Methods Name Description CreatePropertyGUI(SerializedProperty)"
  },
  "Next/api/VRLabs.ModularShaderSystem.UI.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.UI.html",
    "title": "Namespace VRLabs.ModularShaderSystem.UI | Modular Shader System Documentation",
    "keywords": "Namespace VRLabs.ModularShaderSystem.UI Classes CodeViewElement VisualElement used to show a piece of code EnablePropertyDrawer Inspector drawer for EnableProperty . FunctionPropertyDrawer Inspector drawer for ShaderFunction . InspectorList Visual element used to show a list from a Serialized property containing a list InspectorList.UxmlFactory InspectorList.UxmlTraits InspectorListItem Item for InspectorList LabelField Field containing a label with a title. ModularShaderEditor Inspector for the ModularShader asset. ModuleInspectorList ModuleInspectorList.UxmlFactory ModuleInspectorList.UxmlTraits ModuleTemplatePropertyDrawer Inspector drawer for ModuleTemplate . PropertyAttributeAttribute PropertyAttributeDrawer Inspector drawer for Variable . ShaderModuleEditor Inspector for the ShaderModule asset. ShaderPropertyDrawer Inspector drawer for Property . TemplateAssetEditor Inspector for the TemplateAsset asset TextPopup Editor window that shows a code element. should be shown with \"EditorWindow.ShowAsDropDown\". VariableField Field showing a Variable in a single line. VariablePropertyDrawer Inspector drawer for Variable . Interfaces IInspectorList Interface for an inspector list used for drag reorder. Enums DefaultTextureValue Default values for texture properties"
  },
  "Next/api/VRLabs.ModularShaderSystem.UI.IInspectorList.DeHighlightDrops.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.UI.IInspectorList.DeHighlightDrops.html",
    "title": "Method DeHighlightDrops | Modular Shader System Documentation",
    "keywords": "Method DeHighlightDrops DeHighlightDrops() Declaration void DeHighlightDrops()"
  },
  "Next/api/VRLabs.ModularShaderSystem.UI.IInspectorList.draggedElement.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.UI.IInspectorList.draggedElement.html",
    "title": "Property draggedElement | Modular Shader System Documentation",
    "keywords": "Property draggedElement draggedElement Declaration InspectorListItem draggedElement { get; set; } Property Value Type Description InspectorListItem"
  },
  "Next/api/VRLabs.ModularShaderSystem.UI.IInspectorList.HighlightDrops.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.UI.IInspectorList.HighlightDrops.html",
    "title": "Method HighlightDrops | Modular Shader System Documentation",
    "keywords": "Method HighlightDrops HighlightDrops() Declaration void HighlightDrops()"
  },
  "Next/api/VRLabs.ModularShaderSystem.UI.IInspectorList.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.UI.IInspectorList.html",
    "title": "Interface IInspectorList | Modular Shader System Documentation",
    "keywords": "Interface IInspectorList Interface for an inspector list used for drag reorder. Namespace : VRLabs.ModularShaderSystem.UI Syntax public interface IInspectorList Properties Name Description draggedElement Methods Name Description DeHighlightDrops() HighlightDrops()"
  },
  "Next/api/VRLabs.ModularShaderSystem.UI.InspectorList._highlightDrops.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.UI.InspectorList._highlightDrops.html",
    "title": "Field _highlightDrops | Modular Shader System Documentation",
    "keywords": "Field _highlightDrops Namespace : VRLabs.ModularShaderSystem.UI Syntax public bool _highlightDrops Returns Boolean"
  },
  "Next/api/VRLabs.ModularShaderSystem.UI.InspectorList.AddItem.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.UI.InspectorList.AddItem.html",
    "title": "Method AddItem | Modular Shader System Documentation",
    "keywords": "Method AddItem AddItem() Declaration public void AddItem()"
  },
  "Next/api/VRLabs.ModularShaderSystem.UI.InspectorList.-ctor.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.UI.InspectorList.-ctor.html",
    "title": "Constructor InspectorList | Modular Shader System Documentation",
    "keywords": "Constructor InspectorList InspectorList() Declaration public InspectorList()"
  },
  "Next/api/VRLabs.ModularShaderSystem.UI.InspectorList.DeHighlightDrops.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.UI.InspectorList.DeHighlightDrops.html",
    "title": "Method DeHighlightDrops | Modular Shader System Documentation",
    "keywords": "Method DeHighlightDrops DeHighlightDrops() Declaration public void DeHighlightDrops() Implements IInspectorList.DeHighlightDrops()"
  },
  "Next/api/VRLabs.ModularShaderSystem.UI.InspectorList.draggedElement.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.UI.InspectorList.draggedElement.html",
    "title": "Property draggedElement | Modular Shader System Documentation",
    "keywords": "Property draggedElement draggedElement Declaration public InspectorListItem draggedElement { get; set; } Property Value Type Description InspectorListItem Implements IInspectorList.draggedElement"
  },
  "Next/api/VRLabs.ModularShaderSystem.UI.InspectorList.HandleEvent.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.UI.InspectorList.HandleEvent.html",
    "title": "Method HandleEvent | Modular Shader System Documentation",
    "keywords": "Method HandleEvent HandleEvent(EventBase) Declaration public override void HandleEvent(EventBase evt) Parameters Type Name Description EventBase evt Overrides CallbackEventHandler.HandleEvent(EventBase)"
  },
  "Next/api/VRLabs.ModularShaderSystem.UI.InspectorList.HighlightDrops.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.UI.InspectorList.HighlightDrops.html",
    "title": "Method HighlightDrops | Modular Shader System Documentation",
    "keywords": "Method HighlightDrops HighlightDrops() Declaration public void HighlightDrops() Implements IInspectorList.HighlightDrops()"
  },
  "Next/api/VRLabs.ModularShaderSystem.UI.InspectorList.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.UI.InspectorList.html",
    "title": "Class InspectorList | Modular Shader System Documentation",
    "keywords": "Class InspectorList Visual element used to show a list from a Serialized property containing a list Inheritance Object CallbackEventHandler Focusable VisualElement BindableElement InspectorList Implements IEventHandler ITransform ITransitionAnimations IExperimentalFeatures IVisualElementScheduler IResolvedStyle IBindable IInspectorList Namespace : VRLabs.ModularShaderSystem.UI Syntax public class InspectorList : BindableElement, IEventHandler, ITransform, ITransitionAnimations, IExperimentalFeatures, IVisualElementScheduler, IResolvedStyle, IBindable, IInspectorList Constructors Name Description InspectorList() Fields Name Description _highlightDrops Properties Name Description draggedElement Methods Name Description AddItem() DeHighlightDrops() HandleEvent(EventBase) HighlightDrops() MoveDownItem(Int32) MoveUpItem(Int32) RemoveItem(Int32) SetFoldingState(Boolean) UpdateList()"
  },
  "Next/api/VRLabs.ModularShaderSystem.UI.InspectorList.MoveDownItem.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.UI.InspectorList.MoveDownItem.html",
    "title": "Method MoveDownItem | Modular Shader System Documentation",
    "keywords": "Method MoveDownItem MoveDownItem(Int32) Declaration public void MoveDownItem(int index) Parameters Type Name Description Int32 index"
  },
  "Next/api/VRLabs.ModularShaderSystem.UI.InspectorList.MoveUpItem.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.UI.InspectorList.MoveUpItem.html",
    "title": "Method MoveUpItem | Modular Shader System Documentation",
    "keywords": "Method MoveUpItem MoveUpItem(Int32) Declaration public void MoveUpItem(int index) Parameters Type Name Description Int32 index"
  },
  "Next/api/VRLabs.ModularShaderSystem.UI.InspectorList.RemoveItem.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.UI.InspectorList.RemoveItem.html",
    "title": "Method RemoveItem | Modular Shader System Documentation",
    "keywords": "Method RemoveItem RemoveItem(Int32) Declaration public void RemoveItem(int index) Parameters Type Name Description Int32 index"
  },
  "Next/api/VRLabs.ModularShaderSystem.UI.InspectorList.SetFoldingState.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.UI.InspectorList.SetFoldingState.html",
    "title": "Method SetFoldingState | Modular Shader System Documentation",
    "keywords": "Method SetFoldingState SetFoldingState(Boolean) Declaration public void SetFoldingState(bool open) Parameters Type Name Description Boolean open"
  },
  "Next/api/VRLabs.ModularShaderSystem.UI.InspectorList.UpdateList.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.UI.InspectorList.UpdateList.html",
    "title": "Method UpdateList | Modular Shader System Documentation",
    "keywords": "Method UpdateList UpdateList() Declaration public void UpdateList()"
  },
  "Next/api/VRLabs.ModularShaderSystem.UI.InspectorList.UxmlFactory.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.UI.InspectorList.UxmlFactory.html",
    "title": "Class InspectorList.UxmlFactory | Modular Shader System Documentation",
    "keywords": "Class InspectorList.UxmlFactory Inheritance Object UxmlFactory < InspectorList , InspectorList.UxmlTraits > InspectorList.UxmlFactory Implements IUxmlFactory Namespace : VRLabs.ModularShaderSystem.UI Syntax public class UxmlFactory : UxmlFactory<InspectorList, InspectorList.UxmlTraits>, IUxmlFactory"
  },
  "Next/api/VRLabs.ModularShaderSystem.UI.InspectorList.UxmlTraits.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.UI.InspectorList.UxmlTraits.html",
    "title": "Class InspectorList.UxmlTraits | Modular Shader System Documentation",
    "keywords": "Class InspectorList.UxmlTraits Inheritance Object UxmlTraits VisualElement.UxmlTraits BindableElement.UxmlTraits InspectorList.UxmlTraits Namespace : VRLabs.ModularShaderSystem.UI Syntax public class UxmlTraits : BindableElement.UxmlTraits Methods Name Description Init(VisualElement, IUxmlAttributes, CreationContext)"
  },
  "Next/api/VRLabs.ModularShaderSystem.UI.InspectorList.UxmlTraits.Init.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.UI.InspectorList.UxmlTraits.Init.html",
    "title": "Method Init | Modular Shader System Documentation",
    "keywords": "Method Init Init(VisualElement, IUxmlAttributes, CreationContext) Declaration public override void Init(VisualElement ve, IUxmlAttributes bag, CreationContext cc) Parameters Type Name Description VisualElement ve IUxmlAttributes bag CreationContext cc Overrides BindableElement.UxmlTraits.Init(VisualElement, IUxmlAttributes, CreationContext)"
  },
  "Next/api/VRLabs.ModularShaderSystem.UI.InspectorListItem.-ctor.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.UI.InspectorListItem.-ctor.html",
    "title": "Constructor InspectorListItem | Modular Shader System Documentation",
    "keywords": "Constructor InspectorListItem InspectorListItem(IInspectorList, VisualElement, SerializedProperty, Int32, Boolean) Declaration public InspectorListItem(IInspectorList list, VisualElement element, SerializedProperty array, int index, bool showButtonsText) Parameters Type Name Description IInspectorList list VisualElement element SerializedProperty array Int32 index Boolean showButtonsText"
  },
  "Next/api/VRLabs.ModularShaderSystem.UI.InspectorListItem.downButton.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.UI.InspectorListItem.downButton.html",
    "title": "Field downButton | Modular Shader System Documentation",
    "keywords": "Field downButton Namespace : VRLabs.ModularShaderSystem.UI Syntax public Button downButton Returns Button"
  },
  "Next/api/VRLabs.ModularShaderSystem.UI.InspectorListItem.dragArea.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.UI.InspectorListItem.dragArea.html",
    "title": "Field dragArea | Modular Shader System Documentation",
    "keywords": "Field dragArea Namespace : VRLabs.ModularShaderSystem.UI Syntax public VisualElement dragArea Returns VisualElement"
  },
  "Next/api/VRLabs.ModularShaderSystem.UI.InspectorListItem.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.UI.InspectorListItem.html",
    "title": "Class InspectorListItem | Modular Shader System Documentation",
    "keywords": "Class InspectorListItem Item for InspectorList Inheritance Object CallbackEventHandler Focusable VisualElement InspectorListItem Implements IEventHandler ITransform ITransitionAnimations IExperimentalFeatures IVisualElementScheduler IResolvedStyle Namespace : VRLabs.ModularShaderSystem.UI Syntax public class InspectorListItem : VisualElement, IEventHandler, ITransform, ITransitionAnimations, IExperimentalFeatures, IVisualElementScheduler, IResolvedStyle Constructors Name Description InspectorListItem(IInspectorList, VisualElement, SerializedProperty, Int32, Boolean) Fields Name Description downButton dragArea index removeButton startPosition upButton"
  },
  "Next/api/VRLabs.ModularShaderSystem.UI.InspectorListItem.index.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.UI.InspectorListItem.index.html",
    "title": "Field index | Modular Shader System Documentation",
    "keywords": "Field index Namespace : VRLabs.ModularShaderSystem.UI Syntax public int index Returns Int32"
  },
  "Next/api/VRLabs.ModularShaderSystem.UI.InspectorListItem.removeButton.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.UI.InspectorListItem.removeButton.html",
    "title": "Field removeButton | Modular Shader System Documentation",
    "keywords": "Field removeButton Namespace : VRLabs.ModularShaderSystem.UI Syntax public Button removeButton Returns Button"
  },
  "Next/api/VRLabs.ModularShaderSystem.UI.InspectorListItem.startPosition.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.UI.InspectorListItem.startPosition.html",
    "title": "Field startPosition | Modular Shader System Documentation",
    "keywords": "Field startPosition Namespace : VRLabs.ModularShaderSystem.UI Syntax public Vector2 startPosition Returns Vector2"
  },
  "Next/api/VRLabs.ModularShaderSystem.UI.InspectorListItem.upButton.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.UI.InspectorListItem.upButton.html",
    "title": "Field upButton | Modular Shader System Documentation",
    "keywords": "Field upButton Namespace : VRLabs.ModularShaderSystem.UI Syntax public Button upButton Returns Button"
  },
  "Next/api/VRLabs.ModularShaderSystem.UI.LabelField.-ctor.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.UI.LabelField.-ctor.html",
    "title": "Constructor LabelField | Modular Shader System Documentation",
    "keywords": "Constructor LabelField LabelField(String, String) Declaration public LabelField(string label, string value) Parameters Type Name Description String label String value"
  },
  "Next/api/VRLabs.ModularShaderSystem.UI.LabelField.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.UI.LabelField.html",
    "title": "Class LabelField | Modular Shader System Documentation",
    "keywords": "Class LabelField Field containing a label with a title. Inheritance Object CallbackEventHandler Focusable VisualElement LabelField Implements IEventHandler ITransform ITransitionAnimations IExperimentalFeatures IVisualElementScheduler IResolvedStyle Namespace : VRLabs.ModularShaderSystem.UI Syntax public class LabelField : VisualElement, IEventHandler, ITransform, ITransitionAnimations, IExperimentalFeatures, IVisualElementScheduler, IResolvedStyle Constructors Name Description LabelField(String, String) Properties Name Description Label Value"
  },
  "Next/api/VRLabs.ModularShaderSystem.UI.LabelField.Label.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.UI.LabelField.Label.html",
    "title": "Property Label | Modular Shader System Documentation",
    "keywords": "Property Label Label Declaration public string Label { get; set; } Property Value Type Description String"
  },
  "Next/api/VRLabs.ModularShaderSystem.UI.LabelField.Value.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.UI.LabelField.Value.html",
    "title": "Property Value | Modular Shader System Documentation",
    "keywords": "Property Value Value Declaration public string Value { get; set; } Property Value Type Description String"
  },
  "Next/api/VRLabs.ModularShaderSystem.UI.ModularShaderEditor.CreateInspectorGUI.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.UI.ModularShaderEditor.CreateInspectorGUI.html",
    "title": "Method CreateInspectorGUI | Modular Shader System Documentation",
    "keywords": "Method CreateInspectorGUI CreateInspectorGUI() Declaration public override VisualElement CreateInspectorGUI() Returns Type Description VisualElement Overrides Editor.CreateInspectorGUI()"
  },
  "Next/api/VRLabs.ModularShaderSystem.UI.ModularShaderEditor.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.UI.ModularShaderEditor.html",
    "title": "Class ModularShaderEditor | Modular Shader System Documentation",
    "keywords": "Class ModularShaderEditor Inspector for the ModularShader asset. Inheritance Object Object ScriptableObject Editor ModularShaderEditor Namespace : VRLabs.ModularShaderSystem.UI Syntax [CustomEditor(typeof(ModularShader))] public class ModularShaderEditor : Editor, IPreviewable, IToolModeOwner Methods Name Description CreateInspectorGUI()"
  },
  "Next/api/VRLabs.ModularShaderSystem.UI.ModuleInspectorList._highlightDrops.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.UI.ModuleInspectorList._highlightDrops.html",
    "title": "Field _highlightDrops | Modular Shader System Documentation",
    "keywords": "Field _highlightDrops Namespace : VRLabs.ModularShaderSystem.UI Syntax public bool _highlightDrops Returns Boolean"
  },
  "Next/api/VRLabs.ModularShaderSystem.UI.ModuleInspectorList.AddItem.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.UI.ModuleInspectorList.AddItem.html",
    "title": "Method AddItem | Modular Shader System Documentation",
    "keywords": "Method AddItem AddItem() Declaration public void AddItem()"
  },
  "Next/api/VRLabs.ModularShaderSystem.UI.ModuleInspectorList.-ctor.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.UI.ModuleInspectorList.-ctor.html",
    "title": "Constructor ModuleInspectorList | Modular Shader System Documentation",
    "keywords": "Constructor ModuleInspectorList ModuleInspectorList() Declaration public ModuleInspectorList()"
  },
  "Next/api/VRLabs.ModularShaderSystem.UI.ModuleInspectorList.DeHighlightDrops.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.UI.ModuleInspectorList.DeHighlightDrops.html",
    "title": "Method DeHighlightDrops | Modular Shader System Documentation",
    "keywords": "Method DeHighlightDrops DeHighlightDrops() Declaration public void DeHighlightDrops() Implements IInspectorList.DeHighlightDrops()"
  },
  "Next/api/VRLabs.ModularShaderSystem.UI.ModuleInspectorList.draggedElement.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.UI.ModuleInspectorList.draggedElement.html",
    "title": "Property draggedElement | Modular Shader System Documentation",
    "keywords": "Property draggedElement draggedElement Declaration public InspectorListItem draggedElement { get; set; } Property Value Type Description InspectorListItem Implements IInspectorList.draggedElement"
  },
  "Next/api/VRLabs.ModularShaderSystem.UI.ModuleInspectorList.HandleEvent.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.UI.ModuleInspectorList.HandleEvent.html",
    "title": "Method HandleEvent | Modular Shader System Documentation",
    "keywords": "Method HandleEvent HandleEvent(EventBase) Declaration public override void HandleEvent(EventBase evt) Parameters Type Name Description EventBase evt Overrides CallbackEventHandler.HandleEvent(EventBase)"
  },
  "Next/api/VRLabs.ModularShaderSystem.UI.ModuleInspectorList.HighlightDrops.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.UI.ModuleInspectorList.HighlightDrops.html",
    "title": "Method HighlightDrops | Modular Shader System Documentation",
    "keywords": "Method HighlightDrops HighlightDrops() Declaration public void HighlightDrops() Implements IInspectorList.HighlightDrops()"
  },
  "Next/api/VRLabs.ModularShaderSystem.UI.ModuleInspectorList.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.UI.ModuleInspectorList.html",
    "title": "Class ModuleInspectorList | Modular Shader System Documentation",
    "keywords": "Class ModuleInspectorList Inheritance Object CallbackEventHandler Focusable VisualElement BindableElement ModuleInspectorList Implements IEventHandler ITransform ITransitionAnimations IExperimentalFeatures IVisualElementScheduler IResolvedStyle IBindable IInspectorList Namespace : VRLabs.ModularShaderSystem.UI Syntax public class ModuleInspectorList : BindableElement, IEventHandler, ITransform, ITransitionAnimations, IExperimentalFeatures, IVisualElementScheduler, IResolvedStyle, IBindable, IInspectorList Constructors Name Description ModuleInspectorList() Fields Name Description _highlightDrops Properties Name Description draggedElement Methods Name Description AddItem() DeHighlightDrops() HandleEvent(EventBase) HighlightDrops() MoveDownItem(Int32) MoveUpItem(Int32) RemoveItem(Int32) SetFoldingState(Boolean) UpdateList()"
  },
  "Next/api/VRLabs.ModularShaderSystem.UI.ModuleInspectorList.MoveDownItem.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.UI.ModuleInspectorList.MoveDownItem.html",
    "title": "Method MoveDownItem | Modular Shader System Documentation",
    "keywords": "Method MoveDownItem MoveDownItem(Int32) Declaration public void MoveDownItem(int index) Parameters Type Name Description Int32 index"
  },
  "Next/api/VRLabs.ModularShaderSystem.UI.ModuleInspectorList.MoveUpItem.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.UI.ModuleInspectorList.MoveUpItem.html",
    "title": "Method MoveUpItem | Modular Shader System Documentation",
    "keywords": "Method MoveUpItem MoveUpItem(Int32) Declaration public void MoveUpItem(int index) Parameters Type Name Description Int32 index"
  },
  "Next/api/VRLabs.ModularShaderSystem.UI.ModuleInspectorList.RemoveItem.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.UI.ModuleInspectorList.RemoveItem.html",
    "title": "Method RemoveItem | Modular Shader System Documentation",
    "keywords": "Method RemoveItem RemoveItem(Int32) Declaration public void RemoveItem(int index) Parameters Type Name Description Int32 index"
  },
  "Next/api/VRLabs.ModularShaderSystem.UI.ModuleInspectorList.SetFoldingState.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.UI.ModuleInspectorList.SetFoldingState.html",
    "title": "Method SetFoldingState | Modular Shader System Documentation",
    "keywords": "Method SetFoldingState SetFoldingState(Boolean) Declaration public void SetFoldingState(bool open) Parameters Type Name Description Boolean open"
  },
  "Next/api/VRLabs.ModularShaderSystem.UI.ModuleInspectorList.UpdateList.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.UI.ModuleInspectorList.UpdateList.html",
    "title": "Method UpdateList | Modular Shader System Documentation",
    "keywords": "Method UpdateList UpdateList() Declaration public void UpdateList()"
  },
  "Next/api/VRLabs.ModularShaderSystem.UI.ModuleInspectorList.UxmlFactory.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.UI.ModuleInspectorList.UxmlFactory.html",
    "title": "Class ModuleInspectorList.UxmlFactory | Modular Shader System Documentation",
    "keywords": "Class ModuleInspectorList.UxmlFactory Inheritance Object UxmlFactory < ModuleInspectorList , ModuleInspectorList.UxmlTraits > ModuleInspectorList.UxmlFactory Implements IUxmlFactory Namespace : VRLabs.ModularShaderSystem.UI Syntax public class UxmlFactory : UxmlFactory<ModuleInspectorList, ModuleInspectorList.UxmlTraits>, IUxmlFactory"
  },
  "Next/api/VRLabs.ModularShaderSystem.UI.ModuleInspectorList.UxmlTraits.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.UI.ModuleInspectorList.UxmlTraits.html",
    "title": "Class ModuleInspectorList.UxmlTraits | Modular Shader System Documentation",
    "keywords": "Class ModuleInspectorList.UxmlTraits Inheritance Object UxmlTraits VisualElement.UxmlTraits BindableElement.UxmlTraits ModuleInspectorList.UxmlTraits Namespace : VRLabs.ModularShaderSystem.UI Syntax public class UxmlTraits : BindableElement.UxmlTraits Methods Name Description Init(VisualElement, IUxmlAttributes, CreationContext)"
  },
  "Next/api/VRLabs.ModularShaderSystem.UI.ModuleInspectorList.UxmlTraits.Init.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.UI.ModuleInspectorList.UxmlTraits.Init.html",
    "title": "Method Init | Modular Shader System Documentation",
    "keywords": "Method Init Init(VisualElement, IUxmlAttributes, CreationContext) Declaration public override void Init(VisualElement ve, IUxmlAttributes bag, CreationContext cc) Parameters Type Name Description VisualElement ve IUxmlAttributes bag CreationContext cc Overrides BindableElement.UxmlTraits.Init(VisualElement, IUxmlAttributes, CreationContext)"
  },
  "Next/api/VRLabs.ModularShaderSystem.UI.ModuleTemplatePropertyDrawer.CreatePropertyGUI.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.UI.ModuleTemplatePropertyDrawer.CreatePropertyGUI.html",
    "title": "Method CreatePropertyGUI | Modular Shader System Documentation",
    "keywords": "Method CreatePropertyGUI CreatePropertyGUI(SerializedProperty) Declaration public override VisualElement CreatePropertyGUI(SerializedProperty property) Parameters Type Name Description SerializedProperty property Returns Type Description VisualElement Overrides PropertyDrawer.CreatePropertyGUI(SerializedProperty)"
  },
  "Next/api/VRLabs.ModularShaderSystem.UI.ModuleTemplatePropertyDrawer.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.UI.ModuleTemplatePropertyDrawer.html",
    "title": "Class ModuleTemplatePropertyDrawer | Modular Shader System Documentation",
    "keywords": "Class ModuleTemplatePropertyDrawer Inspector drawer for ModuleTemplate . Inheritance Object GUIDrawer PropertyDrawer ModuleTemplatePropertyDrawer Namespace : VRLabs.ModularShaderSystem.UI Syntax [CustomPropertyDrawer(typeof(ModuleTemplate))] public class ModuleTemplatePropertyDrawer : PropertyDrawer Methods Name Description CreatePropertyGUI(SerializedProperty)"
  },
  "Next/api/VRLabs.ModularShaderSystem.UI.PropertyAttributeAttribute.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.UI.PropertyAttributeAttribute.html",
    "title": "Class PropertyAttributeAttribute | Modular Shader System Documentation",
    "keywords": "Class PropertyAttributeAttribute Inheritance Object Attribute PropertyAttribute PropertyAttributeAttribute Implements _Attribute Namespace : VRLabs.ModularShaderSystem.UI Syntax public class PropertyAttributeAttribute : PropertyAttribute, _Attribute"
  },
  "Next/api/VRLabs.ModularShaderSystem.UI.PropertyAttributeDrawer.CreatePropertyGUI.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.UI.PropertyAttributeDrawer.CreatePropertyGUI.html",
    "title": "Method CreatePropertyGUI | Modular Shader System Documentation",
    "keywords": "Method CreatePropertyGUI CreatePropertyGUI(SerializedProperty) Declaration public override VisualElement CreatePropertyGUI(SerializedProperty property) Parameters Type Name Description SerializedProperty property Returns Type Description VisualElement Overrides PropertyDrawer.CreatePropertyGUI(SerializedProperty)"
  },
  "Next/api/VRLabs.ModularShaderSystem.UI.PropertyAttributeDrawer.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.UI.PropertyAttributeDrawer.html",
    "title": "Class PropertyAttributeDrawer | Modular Shader System Documentation",
    "keywords": "Class PropertyAttributeDrawer Inspector drawer for Variable . Inheritance Object GUIDrawer PropertyDrawer PropertyAttributeDrawer Namespace : VRLabs.ModularShaderSystem.UI Syntax [CustomPropertyDrawer(typeof(PropertyAttributeAttribute))] public class PropertyAttributeDrawer : PropertyDrawer Methods Name Description CreatePropertyGUI(SerializedProperty)"
  },
  "Next/api/VRLabs.ModularShaderSystem.UI.ShaderModuleEditor.CreateInspectorGUI.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.UI.ShaderModuleEditor.CreateInspectorGUI.html",
    "title": "Method CreateInspectorGUI | Modular Shader System Documentation",
    "keywords": "Method CreateInspectorGUI CreateInspectorGUI() Declaration public override VisualElement CreateInspectorGUI() Returns Type Description VisualElement Overrides Editor.CreateInspectorGUI()"
  },
  "Next/api/VRLabs.ModularShaderSystem.UI.ShaderModuleEditor.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.UI.ShaderModuleEditor.html",
    "title": "Class ShaderModuleEditor | Modular Shader System Documentation",
    "keywords": "Class ShaderModuleEditor Inspector for the ShaderModule asset. Inheritance Object Object ScriptableObject Editor ShaderModuleEditor Namespace : VRLabs.ModularShaderSystem.UI Syntax [CustomEditor(typeof(ShaderModule))] public class ShaderModuleEditor : Editor, IPreviewable, IToolModeOwner Methods Name Description CreateInspectorGUI()"
  },
  "Next/api/VRLabs.ModularShaderSystem.UI.ShaderPropertyDrawer.CreatePropertyGUI.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.UI.ShaderPropertyDrawer.CreatePropertyGUI.html",
    "title": "Method CreatePropertyGUI | Modular Shader System Documentation",
    "keywords": "Method CreatePropertyGUI CreatePropertyGUI(SerializedProperty) Declaration public override VisualElement CreatePropertyGUI(SerializedProperty property) Parameters Type Name Description SerializedProperty property Returns Type Description VisualElement Overrides PropertyDrawer.CreatePropertyGUI(SerializedProperty)"
  },
  "Next/api/VRLabs.ModularShaderSystem.UI.ShaderPropertyDrawer.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.UI.ShaderPropertyDrawer.html",
    "title": "Class ShaderPropertyDrawer | Modular Shader System Documentation",
    "keywords": "Class ShaderPropertyDrawer Inspector drawer for Property . Inheritance Object GUIDrawer PropertyDrawer ShaderPropertyDrawer Namespace : VRLabs.ModularShaderSystem.UI Syntax [CustomPropertyDrawer(typeof(Property))] public class ShaderPropertyDrawer : PropertyDrawer Methods Name Description CreatePropertyGUI(SerializedProperty)"
  },
  "Next/api/VRLabs.ModularShaderSystem.UI.TemplateAssetEditor.CreateInspectorGUI.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.UI.TemplateAssetEditor.CreateInspectorGUI.html",
    "title": "Method CreateInspectorGUI | Modular Shader System Documentation",
    "keywords": "Method CreateInspectorGUI CreateInspectorGUI() Declaration public override VisualElement CreateInspectorGUI() Returns Type Description VisualElement Overrides Editor.CreateInspectorGUI()"
  },
  "Next/api/VRLabs.ModularShaderSystem.UI.TemplateAssetEditor.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.UI.TemplateAssetEditor.html",
    "title": "Class TemplateAssetEditor | Modular Shader System Documentation",
    "keywords": "Class TemplateAssetEditor Inspector for the TemplateAsset asset Inheritance Object Object ScriptableObject Editor TemplateAssetEditor Namespace : VRLabs.ModularShaderSystem.UI Syntax [CustomEditor(typeof(TemplateAsset))] public class TemplateAssetEditor : Editor, IPreviewable, IToolModeOwner Methods Name Description CreateInspectorGUI()"
  },
  "Next/api/VRLabs.ModularShaderSystem.UI.TextPopup.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.UI.TextPopup.html",
    "title": "Class TextPopup | Modular Shader System Documentation",
    "keywords": "Class TextPopup Editor window that shows a code element. should be shown with \"EditorWindow.ShowAsDropDown\". Inheritance Object Object ScriptableObject EditorWindow TextPopup Namespace : VRLabs.ModularShaderSystem.UI Syntax public class TextPopup : EditorWindow Fields Name Description Text"
  },
  "Next/api/VRLabs.ModularShaderSystem.UI.TextPopup.Text.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.UI.TextPopup.Text.html",
    "title": "Field Text | Modular Shader System Documentation",
    "keywords": "Field Text Namespace : VRLabs.ModularShaderSystem.UI Syntax public string Text Returns String"
  },
  "Next/api/VRLabs.ModularShaderSystem.UI.VariableField.-ctor.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.UI.VariableField.-ctor.html",
    "title": "Constructor VariableField | Modular Shader System Documentation",
    "keywords": "Constructor VariableField VariableField(Variable) Declaration public VariableField(Variable variable) Parameters Type Name Description Variable variable"
  },
  "Next/api/VRLabs.ModularShaderSystem.UI.VariableField.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.UI.VariableField.html",
    "title": "Class VariableField | Modular Shader System Documentation",
    "keywords": "Class VariableField Field showing a Variable in a single line. Inheritance Object CallbackEventHandler Focusable VisualElement VariableField Implements IEventHandler ITransform ITransitionAnimations IExperimentalFeatures IVisualElementScheduler IResolvedStyle Namespace : VRLabs.ModularShaderSystem.UI Syntax public class VariableField : VisualElement, IEventHandler, ITransform, ITransitionAnimations, IExperimentalFeatures, IVisualElementScheduler, IResolvedStyle Constructors Name Description VariableField(Variable) Properties Name Description Variable"
  },
  "Next/api/VRLabs.ModularShaderSystem.UI.VariableField.Variable.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.UI.VariableField.Variable.html",
    "title": "Property Variable | Modular Shader System Documentation",
    "keywords": "Property Variable Variable Declaration public Variable Variable { get; set; } Property Value Type Description Variable"
  },
  "Next/api/VRLabs.ModularShaderSystem.UI.VariablePropertyDrawer.CreatePropertyGUI.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.UI.VariablePropertyDrawer.CreatePropertyGUI.html",
    "title": "Method CreatePropertyGUI | Modular Shader System Documentation",
    "keywords": "Method CreatePropertyGUI CreatePropertyGUI(SerializedProperty) Declaration public override VisualElement CreatePropertyGUI(SerializedProperty property) Parameters Type Name Description SerializedProperty property Returns Type Description VisualElement Overrides PropertyDrawer.CreatePropertyGUI(SerializedProperty)"
  },
  "Next/api/VRLabs.ModularShaderSystem.UI.VariablePropertyDrawer.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.UI.VariablePropertyDrawer.html",
    "title": "Class VariablePropertyDrawer | Modular Shader System Documentation",
    "keywords": "Class VariablePropertyDrawer Inspector drawer for Variable . Inheritance Object GUIDrawer PropertyDrawer VariablePropertyDrawer Namespace : VRLabs.ModularShaderSystem.UI Syntax [CustomPropertyDrawer(typeof(Variable))] public class VariablePropertyDrawer : PropertyDrawer Methods Name Description CreatePropertyGUI(SerializedProperty)"
  },
  "Next/api/VRLabs.ModularShaderSystem.Variable.CustomType.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.Variable.CustomType.html",
    "title": "Field CustomType | Modular Shader System Documentation",
    "keywords": "Field CustomType Namespace : VRLabs.ModularShaderSystem Syntax public string CustomType Returns String"
  },
  "Next/api/VRLabs.ModularShaderSystem.Variable.Equals.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.Variable.Equals.html",
    "title": "Method Equals | Modular Shader System Documentation",
    "keywords": "Method Equals Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean Overrides Object.Equals(Object) Equals(Variable) Declaration public bool Equals(Variable other) Parameters Type Name Description Variable other Returns Type Description Boolean Implements IEquatable<T>.Equals(T)"
  },
  "Next/api/VRLabs.ModularShaderSystem.Variable.GetDefinition.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.Variable.GetDefinition.html",
    "title": "Method GetDefinition | Modular Shader System Documentation",
    "keywords": "Method GetDefinition GetDefinition() Gets a string definition of the variable. Declaration public string GetDefinition() Returns Type Description String a string containing the variable definition."
  },
  "Next/api/VRLabs.ModularShaderSystem.Variable.GetHashCode.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.Variable.GetHashCode.html",
    "title": "Method GetHashCode | Modular Shader System Documentation",
    "keywords": "Method GetHashCode GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 Overrides Object.GetHashCode()"
  },
  "Next/api/VRLabs.ModularShaderSystem.Variable.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.Variable.html",
    "title": "Class Variable | Modular Shader System Documentation",
    "keywords": "Class Variable Object defining a shader variable. It's used mainly for defining used variables in a module's function. Inheritance Object Variable Implements IEquatable < Variable > Namespace : VRLabs.ModularShaderSystem Syntax [Serializable] public class Variable : IEquatable<Variable> Fields Name Description CustomType Name Type Methods Name Description Equals(Object) Equals(Variable) GetDefinition() Gets a string definition of the variable. GetHashCode() Operators Name Description Equality(Variable, Variable) Inequality(Variable, Variable)"
  },
  "Next/api/VRLabs.ModularShaderSystem.Variable.Name.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.Variable.Name.html",
    "title": "Field Name | Modular Shader System Documentation",
    "keywords": "Field Name Namespace : VRLabs.ModularShaderSystem Syntax public string Name Returns String"
  },
  "Next/api/VRLabs.ModularShaderSystem.Variable.op_Equality.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.Variable.op_Equality.html",
    "title": "Operator Equality | Modular Shader System Documentation",
    "keywords": "Operator Equality Equality(Variable, Variable) Declaration public static bool operator ==(Variable left, Variable right) Parameters Type Name Description Variable left Variable right Returns Type Description Boolean"
  },
  "Next/api/VRLabs.ModularShaderSystem.Variable.op_Inequality.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.Variable.op_Inequality.html",
    "title": "Operator Inequality | Modular Shader System Documentation",
    "keywords": "Operator Inequality Inequality(Variable, Variable) Declaration public static bool operator !=(Variable left, Variable right) Parameters Type Name Description Variable left Variable right Returns Type Description Boolean"
  },
  "Next/api/VRLabs.ModularShaderSystem.Variable.Type.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.Variable.Type.html",
    "title": "Field Type | Modular Shader System Documentation",
    "keywords": "Field Type Namespace : VRLabs.ModularShaderSystem Syntax public VariableType Type Returns VariableType"
  },
  "Next/api/VRLabs.ModularShaderSystem.VariableType.html": {
    "href": "Next/api/VRLabs.ModularShaderSystem.VariableType.html",
    "title": "Enum VariableType | Modular Shader System Documentation",
    "keywords": "Enum VariableType Possible types of variables. Namespace : VRLabs.ModularShaderSystem Syntax public enum VariableType Fields Name Description Custom Float Float2 Float3 Float4 Half Half2 Half3 Half4 Sampler2D Sampler3D SamplerCUBE Texture2D Texture2DArray Texture2DMS Texture3D TextureCube TextureCubeArray UnityTex2D UnityTex2DArray UnityTex2DArrayNoSampler UnityTex2DNoSampler UnityTex3D UnityTex3DNoSampler UnityTexCube UnityTexCubeArray UnityTexCubeArrayNoSampler UnityTexCubeNoSampler"
  },
  "Next/guides/AdvancedTopics/EmbeddingLibrary.html": {
    "href": "Next/guides/AdvancedTopics/EmbeddingLibrary.html",
    "title": "Embedding The Library | Modular Shader System Documentation",
    "keywords": "Embedding The Library Embedding the library is the process of making a functional copy of the library for your exclusive use, making you able to export a unity package of your modular shader without worrying about the end user having to download the modular shader system by themselves, and also gives you control over what version of the modular shader system the shader is shipped with. If you're planning to make a shader to publish it's important to do this as fist step, since there are going to be some differences applied to the embedded library compared to the base one. Luckily for you there's an editor window dedicated to this, and can be found in VRLabs > Modular Shader > Tools > Embed Library . Embed Library Window The window contains some fields that are filled with the default values. Most of these values need to be changed based on your needs. Namespace: this will be the namespace of the embedded library, it has to differ from VRLabs since this one is already there, and it would cause compilation errors. The end namespace will always be *YourInput*.ModularShaderSystem (a preview is visible in the window) Default variable keyword: is the keyword used by default when no keywords are provided for variables. You can change it to whatever you want, or keep it like that. Default code keyword: is the keyword used by default when no keywords are provided for function code implementation. You can change it to whatever you want, or keep it like that. Default properties keyword: is the keyword used as an entry point for templates that target the property block when that option is enabled. You can change it to whatever you want, or keep it like that. Resource folder: it will be the name used for the resource folder of the library, it has to be different from the default value to avoid having collisions with the default library resources, since otherwise when those resources are used the default library ones may be loaded instead if both the embedded and original library are in the project, which could cause issues if the 2 libraries are of different versions with breaking changes between the 2 of them. Template extension: extension for the template file. It has to be different from the default value, to avoid collisions with the scripted importer of the 2 versions. Collection extension: extension for the template collection file. It has to be different from the default value, to avoid collisions with the scripted importer of the 2 versions. Editor window menu path: path to the editor windows in the menu, has to be different from the default one to avoid collisions with the base library, which would end up to being able to only have the options for 1 of the 2 libraries. Create asset menu path: path to the create asset menu in the menu, has to be different from the default one to avoid collisions with the base library, which would end up to being able to only have the options for 1 of the 2 libraries. Important You should keep an eye to what public shaders using the system use for these options, since you also have to not collide with them. After setting all those options for the first time, it's a good idea to save them to a file, so that the next times you have to update the embedded library you can just load the options from the file. Now it's time to embed the library by clicking Embed . It will prompt you to select a folder to where to put the library. The folder must be a folder called Editor since everything needs to be an editor script. Once done the editor will copy the library with the modifications declared and save it under a folder called ModularShaderSystem inside the selected editor folder. From here you can use the embedded library directly to make your own shader. This has also the advantage that since you now have your own file extensions for templates and collections, they won't get mixed up with other's people modular shader templates."
  },
  "Next/guides/AdvancedTopics/MigratingAssets.html": {
    "href": "Next/guides/AdvancedTopics/MigratingAssets.html",
    "title": "Migrating Assets | Modular Shader System Documentation",
    "keywords": "Migrating Assets If you embed the library for your specific project, you're quickly going to notice that all shaders, modules and templates you're made are still dependent on the original Modular Shader System installation, and not your newly embedded one. You could theoretically just remake the modules and shaders, and changing the extensions of the templates and collections, but it is quite annoying to do that, especially considering that you're going to have to reassign all asset references. For this reason there's a tool included that lets you import and export assets from the library to a generic format and back, and can be found in VRLabs > Modular Shader > Tools > Migrator . Migrator The migrator is a tool divided into 2 tabs: Export and Import : The export section will let you select the assets you want to migrate, and by pressing the Save button. you can save them into a file. On the other hand the import section will let you to read and import the mentioned file, restoring the previously selected modules in the same path under the library the migrator window belongs to. You will always import all the assets contained into the migration files Important Import and export are always dependent on which library said window is from. VRLabs > Modular Shader > Tools > Migrator is where the default one is, meanwhile your embedded version depends on the embed settings. So to convert a modular shader from base library to your embedded library you have to open the default library migrator, export the assets you want, and then open the migrator of your embedded version and import the file from there. Warning Beware that if you have default texture overrides in some properties, you have to complete the migration process within the same editor session, otherwise the references to those textures will be lost. This is also a good reason to not use the migrator as a \"quick share\" tool"
  },
  "Next/guides/AdvancedTopics/ModularShaderDive.html": {
    "href": "Next/guides/AdvancedTopics/ModularShaderDive.html",
    "title": "Modular Shader Generator Deep Dive | Modular Shader System Documentation",
    "keywords": "Modular Shader Generator Deep Dive The modular shader generator is fairly simple to use, you just call the GenerateShader method, pass in the destination folder path, the modular shader, and you're done. But it may be useful to know what happens underneath and talk about the generation steps. First of all, the GenerateShader is a wrapper that sets up one or more ShaderContext objects, and these objects are what actually generate the shader. This separation is done so that the generator is unified in all use cases, for example in the library it's used for both generating the shader and generating optimised shaders. GenerateShader method In the case of the GenerateShader method, it first retrieves and reloads all the used template assets, then it evaluates all the possible variants combinations the modular shader has (as a reminder, variants are those templates that to be able to have the module toggled on and off, need to have the code actually removed, ending up with multiple shader files), after that it generates the PropertyBlock string, which contains all properties declared in all modules (if you have the shader setup to use templates for properties, only the ones in the dedicated template in the modular shader asset is included here, the rest will be handled later with the other templates). The PropertyBlock string is generated outside of the shader context here cause they will all share the same properties, so you only need to generate it once. Note in an ideal world reloading all template assets needed should not be done since you should be able to just take the reference from the modular shader and shader module assets, but in some specific situations (specifically when you first import unitypackages containing a modular shader, up until editor restart) that returns empty assets instead of our templates, so we just reload them for the generation process Now for each variant combination a ShaderContext is generated, by passing all its relevant informations. Now that we have a list of contexts to run, we will just process them all in parallel, since everything that a context does is manipulating strings, we aren't limited to do it inside the main thread. This speeds up a lot the generation of shaders that have a lot of variant combinations. After all the contexts are done, we tell unity that we are starting to edit assets, write down files with the result of each context, and then tell unity we finished editing, so that it can import the newly generated shaders. To finish it off, we load all the newly generated shaders and add a reference to them in the modular shader asset, this way the modular shader always contains a reference to the last shaders that were generated with it. The ShaderContext As we previously said, a ShaderContext takes care of generating a single shader file using the informations it has been given by calling its GenerateShader method. First it generates the name for both the file and the shader path in the material's shader selector, after that it generates the property section of the shader by using the provided property block or by generating its own if it's empty (in this case it makes the assumption that it's doing it for optimised shaders and does not include module's Enable properties). Adding templates Then it's time to generate the SubShader block by applying the templates. They get listed from modules and then reordered by queue (this should keep the templates with the same queue ordered by position of their relative modules). Then for each template there's a check to see if the template is a toggleable template that doesn't need a variant, in which case the template code gets enclosed by an if check (in optimised shaders this would never happen since the module would not be even in the list of used modules for the context generation). After that it checks for the presence of any internal keyword , and each found one gets replaced with a runtime generated one that is dependent on the module id and original internal keyword. This is to assure that internal keywords that are in multiple modules don't actually get used by different modules from the one it was intended for. Note the instanced internal keywords are stored in a dictionary where the key is a combination of module id and original internal keyword, so that it can be easily retrieved when we search an internal keyword for a specific template in a module. Now it's time to add the template to the main code by finding the indexes of the selected keywords (or instanced internal keywords), and inserting the template string (with the mentioned modifications) in each of these indexes, from the last one to the first one. Note We go from last to first index because if we went the other way around after the first index is used the others would not be valid, since the keywords positions have shifted indexes by the amount of characters equivalent to the lenght of the inserted template. We could have just taken that into account and also shifter our indexes after each iteration, but it's just simpler to start from the last and go backwards. Once all templates have been dealt with, all the instanced internal keywords get removed, since they're not going to be used anymore. Adding functions Now it's time to add all the functions declared in modules, which is a bit more involved process since there are multiple things to keep track of. Fist we list all the functions that have to be added, then we start by adding all the variables in their respective keywords. This is done by looping each function, looking for which variables it declares, check which keywords they're supposed to go in, and then adding them to the respective list (these lists are contained in a dictionary where the key is the keyword they should go in). iterating all functions for their variables, for each list a string with the variable declarations is generated (duplicates of variables get removed here), and then each string is added to the shader code with the same logic templates did (minus the internal keywords that are not here anymore). Now that variables are dealt with, it's time for the functions themselves. Their order depends first on where they declare to go (keyword or other functions), then by their queue. Due to that, functions that go to keywords are the first to be looked at, since they are the root of the call chain. Therefore we look at all keywords that are being used by functions, and for each keyword we list all functions that go there, and order them by queue. Just like templates, we check if the function needs to be able to be disabled and in that case we enclose the call with an if check, and then append the string to the call sequence. Before cycling to the next function in the list, we need to check if the function has other functions that declare to be appended right after it. This is pretty much the same process done with these top level functions, but using the function name instead of a keyword, so the entire process can be repeated recursively. And after that the next function in the list is evaluated and the process repeats. At the end of the call sequence evaluation of each keyword, the entire call sequence string gets appended to each keywords, with the same logic already used for templates and variables. During the evaluation process functions also get reordered into a list where the order is dependent on when a function has been used by the sequence, and this is used now to write down the actual function code implementation stored in template assets. For each function in the reordered list its code template string is taken and added to the relative keyword (in case of no keywords declared, the default DEFAULT_CODE keyword is used). Note the code strings are stored in a dictionary of StringBuilders first, and then added to the main code by keywords later on, so that the final insertion to the keywords is done only once per keyword. During this process is also made sure that a code implementation template is not added more than once per keyword, to avoid code duplication that would make the shader fail to compile. Final steps Now that functions have been taken of, there's some last things to take care of. First is to add the defined CustomEditor so that is used the inspector that has been defined in the modular shader asset, then a custom PostGeneration action is called. This action can be passed to the shader context to have custom code run at this step, this could be useful in case someone needs to do some edits to the shader code before it is finalized. Tip You can still look for keywords at this stage. After that all the keywords used up to now get removed from the final shader code, since they are not needed anymore. And everything ends with a final code cleanup where the shader code gets indented correctly (for the most part) and line terminators get normalized."
  },
  "Next/guides/GettingStarted.html": {
    "href": "Next/guides/GettingStarted.html",
    "title": "Getting started | Modular Shader System Documentation",
    "keywords": "Getting Started First of all, we need to import the unity package with the asset, if you haven't downloaded yet go here and grab the latest version. Once everything is imported let's start creating our first modular shader! Creating the Modular Shader Everything starts with a Modular shader asset. This Asset contains all the basic information about the shader. Create a new asset file by selecting Assets > Create > VRLabs > Modular Shader > Modular Shader (alternative you can bring up the Assets menu by right clicking in the project tab). Warning All assets specific for the Modular Shader System like Modular Shader, Shader module and Template assets should always go inside an Editor folder, since they're used only in editor to generate the shaders. Now fill out the basic informations with the proper data (for more details about it, check this page ). After that, it's time to fill out some settings, let's start with the shader path. The shader path is just what you would fill in in the first line of the shader file and that defines the path of the shader when searching in the shader selector of the material. After that there's the Custom editor value. If you're using a custom inspector you would fill it out with the Namespace.ClassName of the shader inspector you're going to use. In this example we'll keep it empty to let the shader use the default inspector. Now, let's get into the meat and let's make the base skeleton for our shader. This skeleton will be in the template asset that will be placed in the shader template field. Create the new template file by selecting Assets > Create > VRLabs > Modular Shader > Template , open the file in any text editor and paste the following code: ZTest[_ZTest] ZWrite[_ZWrite] Cull[_CullMode] Pass { Tags { \"LightMode\" = \"ForwardBase\" } CGPROGRAM #pragma target 3.0 #pragma vertex Vertex #pragma fragment Fragment #include \"UnityStandardUtils.cginc\" struct VertexData { float4 vertex : POSITION; float2 uv : TEXCOORD0; float3 normal : NORMAL; }; struct FragmentData { float4 pos : SV_POSITION; float3 normal : NORMAL; float2 uv : TEXCOORD0; float3 worldPos : TEXCOORD1; }; FragmentData FragData; float4 FinalColor; #K#DEFAULT_VARIABLES #K#DEFAULT_CODE FragmentData Vertex (VertexData v) { FragmentData i; UNITY_INITIALIZE_OUTPUT(FragmentData, i); #K#VERTEX_FUNCTION return i; } float4 Fragment (FragmentData i) : SV_TARGET { FragData = i; FinalColor = float4(0,0,0,0); #K#FRAGMENT_FUNCTION return FinalColor; } ENDCG } In this template we set a couple of keywords for hooking up code for vertex and fragment functions, as well as function implementations and properties declarations. To get more details about keywords in modular shader system, check out this page (we really encourage you to check it right now, as we're gonna talk about them more here). After that just put the template into the shader template field. Now try to generate the shader to see what the system does (you will be prompted to select in which folder to put the generated shader). Shader \"Example/ExampleShader\" { Properties { } SubShader { ZTest[_ZTest] ZWrite[_ZWrite] Cull[_CullMode] Pass { Tags { \"LightMode\" = \"ForwardBase\" } CGPROGRAM #pragma target 3.0 #pragma vertex Vertex #pragma fragment Fragment #include \"UnityStandardUtils.cginc\" struct VertexData { float4 vertex : POSITION; float2 uv : TEXCOORD0; float3 normal : NORMAL; }; struct FragmentData { float4 pos : SV_POSITION; float3 normal : NORMAL; float2 uv : TEXCOORD0; float3 worldPos : TEXCOORD1; }; FragmentData FragData; float4 FinalColor; FragmentData Vertex (VertexData v) { FragmentData i; UNITY_INITIALIZE_OUTPUT(FragmentData, i); return i; } float4 Fragment (FragmentData i) : SV_TARGET { FragData = i; FinalColor = float4(0,0,0,0); return FinalColor; } ENDCG } } } Main notable thing: all keywords defined have disappeared. This is because keywords defined are only used to generate the final shader, once that is done they get remove to avoid shader compilation error that would happen otherwise. Other than that you can see that the shader has the correct name and does not implement a custom inspector since we did not set that field. Also it currently uses properties ZTest, ZWrite and Cull that are not yet defined, let's fix that by filling out the parameters info. Now if we try to generate the shader again (if you reselect the same folder you will override the shader) you will see the shader now also has properties generated. Shader \"Example/ExampleShader\" { Properties { [Enum(UnityEngine.Rendering.CompareFunction)] _ZTest(\"Depth test\", Float) = 4 _ZWrite(\"Depth write\", Float) = 0 [Enum(UnityEngine.Rendering.CullMode)] _Cull(\"Cull Mode\", Float) = 2 } SubShader { ZTest[_ZTest] ZWrite[_ZWrite] Cull[_CullMode] Pass { Tags { \"LightMode\" = \"ForwardBase\" } CGPROGRAM #pragma target 3.0 #pragma vertex Vertex #pragma fragment Fragment #include \"UnityStandardUtils.cginc\" struct VertexData { float4 vertex : POSITION; float2 uv : TEXCOORD0; float3 normal : NORMAL; }; struct FragmentData { float4 pos : SV_POSITION; float3 normal : NORMAL; float2 uv : TEXCOORD0; float3 worldPos : TEXCOORD1; }; FragmentData FragData; float4 FinalColor; FragmentData Vertex (VertexData v) { FragmentData i; UNITY_INITIALIZE_OUTPUT(FragmentData, i); return i; } float4 Fragment (FragmentData i) : SV_TARGET { FragData = i; FinalColor = float4(0,0,0,0); return FinalColor; } ENDCG } } } Perfect, now the shader has all the properties it uses. But it still doesn't output much since both the vertex and fragment shaders don't really anything at the moment. Now it's the time to make a module that will give some functionality to this shader. Note Theoretically you could create a fully working shader just in the main template, and just leave the keywords as entry points for additional features. The main downside for that is that the main hooks have to be inside the main template somewhere, meaning that all the relevant code (like the vertex and fragment function) will have to be there and not enclosed inside some cginc file, since the system doesn't really crawl into includes when it generates the shader, and therefore can't really know if inside one of them there's some keyword. Using cginc file to put your shader code is not advised with the modular shader system, we instead promote the usage of templates in modules to obtain a similar result. (you are still able to use default includes just fine) Creating a Module Time to create a module to give life to this shader, first create the module asset file by selecting Assets > Create > VRLabs > Modular Shader > Shader Module . The informations area of the asset is similar to the modular shader assets, but with some key differences: The id needs to be filled in since it's going to be used by the system to check for duplicate modules, incompatibilities, and dependencies. There's a list of dependencies. There's a list of incompatibilities. In our case we won't need to add any dependency or incompatibility, so we will just fill everything else with the proper information. Now time for the interesting bits, first of all, we need to make the vertex shader set the proper output. This is a good time to add a template and hook it to the VERTEX_FUNCTION keyword. First let's create a new template to contain the vertex function implementation: i.pos = UnityObjectToClipPos(v.vertex); i.normal = UnityObjectToWorldNormal(v.normal); i.worldPos = mul(unity_ObjectToWorld, v.vertex); i.uv = v.uv; And after that add a new template in the list and set the asset slot with the newly created template asset, and add some other data. The queue value is used to decide the order in which the templates are used to generate the shader. This is very important since a template is placed inside every keyword found at the moment the template is placed in, meaning that if templates that are added in a later stage have that same keywords, the template won't be added to those cause they're not there yet. The order in which templates are evaluated and added is from lower queue to higher queue ones, if 2 templates are on the same queue, the first one will be based on the order of the relative modules in the shader, and in case 2 templates are in the same module and have the same queue, the one higher in the list goes first. The generate variant toggle is used to tell the system to generate different shaders for cases when the parent module is enabled or disabled (we will talk more about enabling and disabling modules in this page ), this module will always be enabled so this setting is not used and should be left untoggled. In our case even if the module was able to be enabled and disabled, this toggle would still be left unchecked, since the code in this template is inside a function and can be enabled and disabled by doing an conditional check, so there's no need to create multiple shaders. The keywords list contains all the keywords this template will be hooked to, in our case it will be added only on the VERTEX_FUNCTION keyword. Nice, now let's test it by adding the module in the modules list of the modular shader and generate the shader again. Shader \"Example/ExampleShader\" { Properties { [Enum(UnityEngine.Rendering.CompareFunction)] _ZTest(\"Depth test\", Float) = 4 _ZWrite(\"Depth write\", Float) = 0 [Enum(UnityEngine.Rendering.CullMode)] _Cull(\"Cull Mode\", Float) = 2 } SubShader { ZTest[_ZTest] ZWrite[_ZWrite] Cull[_CullMode] Pass { Tags { \"LightMode\" = \"ForwardBase\" } CGPROGRAM #pragma target 3.0 #pragma vertex Vertex #pragma fragment Fragment #include \"UnityStandardUtils.cginc\" struct VertexData { float4 vertex : POSITION; float2 uv : TEXCOORD0; float3 normal : NORMAL; }; struct FragmentData { float4 pos : SV_POSITION; float3 normal : NORMAL; float2 uv : TEXCOORD0; float3 worldPos : TEXCOORD1; }; FragmentData FragData; float4 FinalColor; FragmentData Vertex (VertexData v) { FragmentData i; UNITY_INITIALIZE_OUTPUT(FragmentData, i); i.pos = UnityObjectToClipPos(v.vertex); i.normal = UnityObjectToWorldNormal(v.normal); i.worldPos = mul(unity_ObjectToWorld, v.vertex); i.uv = v.uv; return i; } float4 Fragment (FragmentData i) : SV_TARGET { FragData = i; FinalColor = float4(0,0,0,0); return FinalColor; } ENDCG } } } Now the shader outputs something! It's pitch black, but don't worry, we're going to give it some more color soon, by adding a function to the fragment function. But first, we need a color property so that we can set a color from the inspector, so let's add it to the properties list of this module. Now time to create a function. Let's start that by creating another template asset (yes, functions need template assets as well, to get the function implementation). void ApplyColor() { FinalColor = _MyColor; } Template assets used for functions always need to have a void function with no parameters, in this case ApplyColor . Now that we have the asset, let's fill the function data The name has to be the same as the name of the void function with no parameters mentioned before. the Append After field contains the hook for the function. Unlike just templates this hook can be either keywords or other function declared in this or other modules. For this reason unlike other fields if you want to target a keyword here you have to keep the #K# prefix. The Queue field works the same as in templates, with the difference being that everything is in the context of the same Append After . The Used Variables list, just like the title suggests, contains all the variables that are going to be used in this function. in our case the only variable we need to put is the _MyColor variable (since the property is a Color property, it translated to a float4 in shader). Warning While we do use the FinalColor variable in the function, you should not put it in the variables list because it is already declared by the template itself. in the variables list of functions you should never put variables that for some reason are already available to be used in that place of the shader. The Variable Keywords and Code Keywords lists are used to tell where the function template code and the variables declarations should be placed. By default if the lists are empty the generator will try to put them in some default keywords, respectively being DEFAULT_VARIABLES and DEFAULT_CODE . In our case those keywords are exactly where we need them to be, so we leave the lists empty. Now, let's generate the shader again and see the result. Shader \"Example/ExampleShader\" { Properties { [Enum(UnityEngine.Rendering.CompareFunction)] _ZTest(\"Depth test\", Float) = 4 _ZWrite(\"Depth write\", Float) = 0 [Enum(UnityEngine.Rendering.CullMode)] _Cull(\"Cull Mode\", Float) = 2 _MyColor(\"My Color\", Color) = (1, 1, 1, 1) } SubShader { ZTest[_ZTest] ZWrite[_ZWrite] Cull[_CullMode] Pass { Tags { \"LightMode\" = \"ForwardBase\" } CGPROGRAM #pragma target 3.0 #pragma vertex Vertex #pragma fragment Fragment #include \"UnityStandardUtils.cginc\" struct VertexData { float4 vertex : POSITION; float2 uv : TEXCOORD0; float3 normal : NORMAL; }; struct FragmentData { float4 pos : SV_POSITION; float3 normal : NORMAL; float2 uv : TEXCOORD0; float3 worldPos : TEXCOORD1; }; FragmentData FragData; float4 FinalColor; float4 _MyColor; void ApplyColor() { FinalColor = _MyColor; } FragmentData Vertex (VertexData v) { FragmentData i; UNITY_INITIALIZE_OUTPUT(FragmentData, i); i.pos = UnityObjectToClipPos(v.vertex); i.normal = UnityObjectToWorldNormal(v.normal); i.worldPos = mul(unity_ObjectToWorld, v.vertex); i.uv = v.uv; return i; } float4 Fragment (FragmentData i) : SV_TARGET { FragData = i; FinalColor = float4(0,0,0,0); ApplyColor(); return FinalColor; } ENDCG } } } Now the shader is a fully functional shader that outputs the color we select with the property! If you check the code you can see it added the _MyColor property, and placed its variable declaration and function definition in the place of the standard keywords, and created call to said function in the fragment shader. From here you can add templates and features to this module to add features, or make a separate module for other features, the possibilities are endless. Templates vs Functions Now the big question rises: when do you use templates and when do you use functions? don't they do the same thing by stitching code around? Well, depends, they both do more or less the same thing, but in slightly different ways. Templates are just a dumb \"place code here now\", so they're conceptually really simple and you can theoretically generate an entire shader with just that concept alone (some big VRChat shader developer is doing just that...). But being simple also means having to manually deal with some issues like \"is this function available in this bit of code?\" \"do i have to define the variable here or if i do it i'll get an error cause it's already defined?\". Functions on the other hand are a bit more complex to setup since they require you to tell them used variables, where to put them, where to put the code etc., but this also gives the system more power to handle some stuff, like variables being available without making duplicates. Another big advantage is the possibility to use other functions as hook points for your functions, which means that the more functions are used, the more hooks are available to add more functions, giving you great flexibility, especially in big shader projects. Also the debugging tools available for viewing functions are inherently better due the bigger amount of data available, which makes it way easier to add functionality to someone else's modular shader with a custom module without too much prior knowledge of the shader design. Of course functions also have some disadvantages outside of the longer initial setup. The main issue is that due to how they work, they can only be added to keywords inside a function implementation (like the fragment function in the example above). Our initial intent with this subdivision was to have templates be the base skeleton of the final shader, with hook points inside the main functions to add modules with your own functions which add features."
  },
  "Next/guides/index.html": {
    "href": "Next/guides/index.html",
    "title": "Welcome to the General Guides Section | Modular Shader System Documentation",
    "keywords": "Welcome to the General Guides Section Here you will find general guides on how to use the Modular Shader System. If you're a first time user you may want how to get started here"
  },
  "Next/guides/ModularShaderComponents/Keywords.html": {
    "href": "Next/guides/ModularShaderComponents/Keywords.html",
    "title": "Keywords | Modular Shader System Documentation",
    "keywords": "Keywords Keywords are a specific piece of text placed all around templates, and are used as hook points to place other templates, function calls, variables, etc. They should not be confused with shader keywords , as these keywords are only used by the modular shader system generation process, and generated shaders will not have any of these keywords in them. A keyword is composed by #K# followed by a name like EXAMPLE_KEYWORD , with no other text in that line. // this is valid ...code... #K#NICE_KEYWORD ...code... //this is not valid ...code... #K#NICE_KEYWORD ...code... ...code... //this is also not valid ...code... ...code... #K#NICE_KEYWORD ...code... There's also a variation with #KI# in place of #K# , in this case the keyword is considered local meaning that it is only usable from templates within the same module. Also functions don't have access to local keywords, they're for module templates only. When referencing keywords inside shader module assets, you usually do not include the #K# prefix to identify the keyword, with the exception of the Append After value of a function definition, where the prefix is needed to identify the value as a keyword instead of a function call."
  },
  "Next/guides/ModularShaderComponents/ModularShader.html": {
    "href": "Next/guides/ModularShaderComponents/ModularShader.html",
    "title": "Modular Shader | Modular Shader System Documentation",
    "keywords": "Modular Shader This Asset contains all the basic information about the shader, divided in the following categories: Base Informations: this part is mainly informational, but could be used by systems made to work with the modular shader system. Settings: data here will be used to generate the shader. You can create a modular shader asset by selecting the menu Assets > Create > VRLabs > Modular Shader > Modular Shader . Basic Informations Info about the shader, not really used by the modular shader system, but available for third party implementations. Id: Identifier for the shader, should stay unique. Normally it should have a namespace like structure like Author.Name.Subname , but anything goes. Name: User friendly name for the modular shader. Author: Author of the modular shader. Version: Version of the modular shader. Description: A short description of the modular shader. Settings Settings of the shader, which will change how the shader gets generated. Shader template: The shader template is just shader code that will go inside the main Subshader block. This will be the base of the shader and where tha main hooks will be. These hooks are called Keywords (not to be confused with shader keywords) and they're always defined by starting the line with #K# (the entire line should be just the keyword). Note The modular shader system currently only supports one Subshader block. Note We talk more in specific about Keywords in this page . Shader Path: It will be shader path of this modular shader when searching in the material settings. Custom Editor: Custom editor the shader will use. Note Being a modular shader, you may end up having it changing the properties available, so you should probably account for that in your custom inspector Properties: The shader properties that you're going to have. These properties wil always be included in the generated shader, but they may not be the only properties available, since each module can also have properties. Properties from templates: If for some reason you want to have more control on how the properties are declared, you check this toggle and you will have available a keyword called SHADER_PROPERTIES from which you can point templates to in modules. You also can set a base template for setting properties that are always going to be available, just like you would if you set them in the properties section. Warning It is preferable to have properties in the properties list compared to have them inside a template, but you're free to take the approach you want. Base Modules list: One of the most important part of the settings, the Base modules list, contains the modules that are going to be used by the shader. These modules are what will compose the final generated shader. Note The basic modules is not the full list of modules, there's also another list of modules that are not listed by the inspector, but that's meant to be used by third party systems that want to automatically manage modules."
  },
  "Next/guides/ModularShaderComponents/ShaderModule.html": {
    "href": "Next/guides/ModularShaderComponents/ShaderModule.html",
    "title": "Shader Module | Modular Shader System Documentation",
    "keywords": "Shader Modules A module is a component that can be added and removed from a modular shader. Like the modular shader asset it has a Base Information and Settings sections, but unlike in the modular shader, you actually need to set at least some of the Base Information settings, since they're used for checking module compatibility inside a modular shader. You can create a shader module asset by selecting the menu Assets > Create > VRLabs > Modular Shader > Shader Module . Basic Informations Id: Id of the module. Like the Modular Shader one, but it is used to check duplicates, incompatible modules and required modules inside a modular shader. You really should stick to a specific naming convention here. Name: User friendly name for the shader module. Author: Author of the shader module. Version: Version of the shader module. Description: A short description of the shader module. Module Dependencies: List of dependencies this module has, you should have the id of the modules this module needs in order to work. Incompatible With: List of modules that are incompatible with this module, works the same as module dependencies but for incompatibility instead. Settings Enabled: This is a special int shader property that will define if the module is enabled or not. When this area is filled the module will have the ability to be turned on and off entirely. This works by having the generated shader containing conditional statements for function calls and templates of this module, unless the template needs a variant , in that case the system just generates multiple versions of the shader based on the combinations of the variants turned on and off. Eventual optimized shaders will have disabled modules completely removed from the shader code, making it a good way to optimise out unused features once the material settings are of your liking. Note The library has an API to generate optimised shaders, but that's not used anywhere by default, so if you need the feature you need to create your own editor tool to generate optimised shaders. Properties: Acts just like the properties in the modular shader asset. Templates: A list of templates the module has. In here you have the possibility to set the template assets, and select which keywords this template code is going to placed into. Warning The keyword has to omit the #K# , so put the template inside the keyword #K#MY_KEYWORD you should write MY_KEYWORD . This behavior with keywords is the same everywhere except where specifically noted. The queue value also determines when this placement of the code in the shader, which can drastically change the result. lower numbers means the operation is done before templates with higher numbers. The Generate variant toggle defines if this template does not support being inside an if statement due to it being placed in areas of the shader where that would be a syntax error (basically everywhere except inside some functions, like the vertex or fragment functions). When it's checked, the system will generate multiple versions of the shader, one with this code in there, and one without. Multiple variants will cause the generator to generate an exponential amount of shaders, due to the need to check for all possible cases. Functions: The more complicated part of the module. It's a bigger abstraction compared to templates, and needs more data to be filled in order to work. But this also gives the system more infos to play with, which comes really useful when using the debugging tools offered by the Modular Shader System. Each function is defined by: A name. A template containing the function definition. An Append After string. A Queue value. A list of variables used by the function. A list of keywords for variables. A list of keywords for the function code. Name It's the name of the function that has to be called. Template It's the template containing the code of the function, as well as other dependent code that the function needs. It should have a void function with no parameters called the same way of the Name defined before, also it should avoid defining any variable, since those should be given to the variables list. This function will be called in the point defined by the Append After . Append After This property defines where this function call is placed. 2 types of values are valid here: The name of another declared function. A keyword that is placed inside a function. When using another declared function, you just type the name of said function, when using a keyword instead type the full keyword name, with the #K# included since the system has to know you want to place it after a keyword and not after a function call. Queue This works similarly to how templates Queue work, where low numbers will be written in the shader before higher ones. The main difference is that this queue value is valid only in the context of the same Append After value. This is due to the fact that each function call under the same Append After will be placed right after said function, and before whatever function was about to be placed after that one. You can try to play with it and check the Function Timeline in the Modular Shader Debugger to see the order of the functions calls. Variables In this list you define all the variables that are going to be used by this function and that are not available by default from some template. You should declare a variable here even if another function placed above already defines it. the system will only create the variable once upon generation, but this way has the knowledge that both functions use it. The variable values will depend if other functions before this one used it and set it, or it has never been used. So this is the main way you can pass results from a function to another. Note Remember to write down variables that derive from a shader property as well, because by default the system will not assume that all properties are used inside the shader. Tip You should keep in mind that the variable may have not been used by any function until this function uses it. If you need this variable to have some value that is defined by another function in another specific module, you should make sure this function is called after, and also to set this module is dependent on. If you just need to have the variable be defined and just act based on its value, then just be sure that the function can handle a default value on said variable. Variable Keywords This is a list of keywords where all the variables used by this function will be declared to, it not already there. Ideally this keyword is placed in an area before all functions implementations, so that the functions can access those variables. If empty the variables will automatically go after the default DEFAULT_VARIABLES keyword (the keyword has to be defined somewhere in the templates, or these variables will not be defined anywhere). Function Keywords Same as the variable keywords, but for placing the code inside the templates given to the function. If empty the template code will automatically go after the default DEFAULT_CODE keyword (the keyword has to be defined somewhere in the templates, or the code will not be placed anywhere)."
  },
  "Next/guides/ModularShaderComponents/TemplateAssets.html": {
    "href": "Next/guides/ModularShaderComponents/TemplateAssets.html",
    "title": "Template Assets | Modular Shader System Documentation",
    "keywords": "Template Assets A template asset is an asset that contains shader code. Its purpose depends on where this template asset is used, for example if it's used for a function definition, it will be used for the function declaration, if it's used for the templates section of a module, it's going to just be placed as code under that keyword. You can create a template asset by selecting the menu Assets > Create > VRLabs > Modular Shader > Template . The asset doesn't have an editable inspector, but you can edit the file itself in any text editor."
  },
  "Next/guides/ModularShaderComponents/TemplateCollectionAssets.html": {
    "href": "Next/guides/ModularShaderComponents/TemplateCollectionAssets.html",
    "title": "Template Collection Assets | Modular Shader System Documentation",
    "keywords": "Template Collection Assets This asset is a collection of multiple templates under a single file. It's not directly used in its entirety in any place in the library, you can use any single template inside this collection like it was its own asset. Like the template asset it is just a text file where you can write shader code, but unlike a template asset you need to start each part of code with a #T#TEMPLATE_NAME to tell the asset everything after it is part of this specific template. You can have multiple template keywords like the above, and every new one ends the previous template and starts the new one. The template name will be the name of that template keyword. You can create a template collection asset by selecting the menu Assets > Create > VRLabs > Modular Shader > Template Collection ."
  },
  "Next/guides/ModularShaderDebugger/FunctionTimeline.html": {
    "href": "Next/guides/ModularShaderDebugger/FunctionTimeline.html",
    "title": "Template Graph | Modular Shader System Documentation",
    "keywords": "Function Timeline The function timeline is a default tab of the Modular Shader Debugger that shows the functions flow inside a modular shader, divided by root keyword. The is composed of the following areas: The timeline in the central area Selected function information Module information of the selected function Function's template code view Timeline The main timeline shows the order in which each function will be placed inside the selected root keyword. The order reflects the order in which the functions will be called in the shader, from left to right. If multiple function elements have some overlap it means that there is a direct dependency between them, with the smaller one usually being the one that has the AppendAfter value set to the bigger one, this information can be shown by looking at the function's information after selecting the element. You can select which timeline to show by selecting the root you want to see in the dropdown above the timeline. Timeline element A single element contains the name of the function on the left, and it's queue on the right (the queue is always relative to its parent AppendAfter ) The selected element will have a cyan border, while elements with a yellow borders indicate a function that contains the variable selected in the Selected Function information area. Selected function information This area shows informations relative to the function, such as the name, queue, and where it's appended. It also shows its variables and in which keywords variables and implementation are put on. Selecting a variable will show which other functions in the timeline that use the same variable, giving you the possibility to check where it's used and for what. Function's module base info This area shows some basic informations about the module where the selected function is defines, and give you a quick way to select the module asset for further inspection if needed. Function code template This area shows the template containing the implementation of the selected function."
  },
  "Next/guides/ModularShaderDebugger/ModularShaderDebugger.html": {
    "href": "Next/guides/ModularShaderDebugger/ModularShaderDebugger.html",
    "title": "Modular Shader Debugger | Modular Shader System Documentation",
    "keywords": "Modular Shader Debugger The Modular Shader Debugger is a tool used to display various informations about a selected modular shader that is useful when you're in the process of creating a module for said shader. The window is composed by a top bar containing a field for the selected modular shader, and a button to reload the selected shader, in case the modular shader or one if its modules has been updated. The rest of the window is composed by a tab row that by default contains 2 selectable tabs, the Template Graph and the Function Timeline . The window can be extended by inheriting IModularShaderDebuggerTab . Custom tabs can be useful to show specific informations you may need to show in your custom modular shader project."
  },
  "Next/guides/ModularShaderDebugger/TemplateGraph.html": {
    "href": "Next/guides/ModularShaderDebugger/TemplateGraph.html",
    "title": "Template Graph | Modular Shader System Documentation",
    "keywords": "Template Graph The template graph is a default tab of the Modular Shader Debugger that aims at providing a general view of how the templates are going to be linked together when generating the shader. The template tree starts from the left with a root node representing the main template defined in the modular shader asset (and another one to define the root of templates used for properties when the Properties from templates toggle of the modular shader is on). From then templates are parsed like they would during shader generation and their relative nodes appended and connected with the keyword they defined. If a templated declares to be attached to multiple keywords, this is reflected in the graph by having multiple nodes attached, each to its keyword. This process may end up not showing some templates that are declared in the asset, if that happens it usually is indicative of errors in some settings of those templates, since they would never be used when generating the shader to begin with. This way the graph is representative of the structure of the generated shader. Template Node The template node is divided in 3 sections: the top bar, the used keyword on the left, and the declared keywords on the right. There can be exceptions where either the left of right area is missing due to the node being the root (in the former case) or a template that doesn't declare keywords (the latter case). The top bar includes 3 elements: The template name The module it comes from (in the form of the id of the module) Its queue value (on the right) The left area will always contain the keyword that is used to place this template (with the exception of root nodes that don't have this area). The right area contains all the keywords contained, regardless of if they're used for other templates or not. Internal keywords are indicated with an (i) at the end. Right clicking the node will give you a popup menu with the option of showing off the content of the template, so you can quickly check what the template does."
  },
  "Next/guides/ThirdPartyModule.html": {
    "href": "Next/guides/ThirdPartyModule.html",
    "title": "Create a Module for Third Parties | Modular Shader System Documentation",
    "keywords": "Create a Module for Third Parties Up until now we assumed that you've been working on your own modular shader where you know what each piece does and how it's designed already. But if you're making a module to add a specific functionality to someone else's shader, you won't have the luxury of knowing exactly how it works, unless the creator of that shader made ample documentation for it. Luckily we have the means to get at least enough informations to try and add some functionality of our own. In this example we will use the modular shader built in Getting Started as a reference modular shader, but we will act like we didn't make it and we know nothing about it. The Modular Shader Debugger Before starting doing anything, we probably need to look on the modular shader first. We could open the modular shader and shader module assets, but there's a better way to get a quick look: the Modular Shader Debugger. Go to the menu VRLabs > Modular Shader > Modular Shader Debugger . A window will open with an object field and 2 (or more) tabs. put the modular shader you want to look a into that field. Template Graph This first tab, called Template Graph is a node graph where all the template hierarchy is shown. From here you can look at all the templates the modular shader uses with its current module setup. Each node is a template, and on the left side it shows the keyword used to add it, while the right side contains all the keywords it declares. Each connection indicates that the template on the right of the connection has been placed inside the the template on the left of the connection, by the keyword indicated by the port. Our case is fairly simple, it's just the base template and an extra template. Note In the case a template had multiple keywords to be placed on, in the graph there would be a number of copies of said template for each different keyword. So if for example the template had been defined to be placed in both the VERTEX_FUNCTION and FRAGMENT_FUNCTION keywords we would have seen 2 different notes indicating the same template. This is because the template graph is solving the template tree like it the shader generator would, so multiple uses of a template in different keywords will be instanced multiple times (multiple instances on the same keyword in different places of the same parent template are not duplicated). Since it solves the template tree like the shader generator, it will also not include templates that are in the assets but are set up wrong and wouldn't end up inside the final shader, like templates with the queue set up wrong or similar. The tree is an image of what is actually used in the final result By right clicking a node you have the possibility to preview its code and get a quick idea on what it does. We have a general idea about the templates used by this modular shader, let's now go and look at the functions it may use. Function Timeline The Function Timeline is a busier tab where you can see the order of the functions being called from a root keyword. you can select which keyword to select from the dropdown in the top, and clicking any function will show up its informations, as well as info about the module it is declared on and the template it uses. In our case we only have one function in the FRAGMENT_FUNCTION keyword. We can see that there's a _MyColor variable, and that there's a FinalColor variable being used in the implementation, despite not being in the variables list. The author of this shader has either forgot to include FinalColor in the list or the variable is already statically defined in a template. By looking at the templates we can see that the FRAGMENT_FUNCTION keyword is only on the base template, let's check the code quickly and see what's going on there. Bingo! The FinalColor variable is here, and is initialized with 0, means that it's handled by the templates and we can use it as we please in our modules without declaring its usage. Now we have a rough idea of how the area we want to hook in works, and we can start build our own module. Create the module So, we've already done this before, so let's go through this quickly. We want to create a module that adds a texture to the output of the material, tinted by the already available color. So we create the asset, fill in the informations, add a property for our texture, and add a function that uses said texture to multiply the final color with it. void ApplyTexture() { FinalColor *= UNITY_SAMPLE_TEX2D(_MyTexture, TRANSFORM_TEX(FragData.uv, _MyTexture)); } Now just add the module to the modular shader and generate the shader. If everything went well, you can now use the newly generated shader with the texture slot. Toggle The Module Texture samples can be expensive, and we don't want to use it always, so we want to do a toggle for it. We could do it manually in the function code, but since the texture sample is everything the shader does to begin with, we can just toggle the entire module on and off. This is fairly simple to do with the modular shader system, since each module can define an Enabled property, which will become a float property used to check if the module should be enabled or not. Let's fill the data in and regenerate the shader. We can now toggle on and off the texture without doing anything extra. This is due to the generator encapsulating the function call into an if statement to check if the value of toggle property is the value we've given to to the module as a condition. While generally branching in shaders is a bad idea, the compiler generally optimises where he can, and on top of this, if the shader you added the module in came with some editor scripts that use the capability of the generator to generate shaders optimized for their current material settings, whenever you disable the module and then run said script, the entire module code will not be included in the generated shader at all. Note The modular shader system doesn't come with a 1 click script that optimizes the material for you, instead comes with an api to let you do that in your own setup, We decided to go this way cause we think it gives more flexibility to shader creators to integrate the library in their own workflow."
  }
}